   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"LSM9DS1_drivers.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	TimerId,4,4
  20              		.comm	Status,4,4
  21              		.comm	WriteTimerId,4,4
  22              		.comm	WriteTimerStatus,4,4
  23              		.comm	TimerIdReadBytes,4,4
  24              		.comm	StatusReadBytes,4,4
  25              		.comm	settings,40,4
  26              		.comm	gBias,12,4
  27              		.comm	aBias,12,4
  28              		.comm	mBias,12,4
  29              		.comm	gBiasRaw,6,4
  30              		.comm	aBiasRaw,6,4
  31              		.comm	mBiasRaw,6,4
  32              		.comm	_autoCalc,1,1
  33              		.comm	_mAddress,1,1
  34              		.comm	_xgAddress,1,1
  35              		.comm	gRes,4,4
  36              		.comm	aRes,4,4
  37              		.comm	mRes,4,4
  38              		.comm	gx,2,2
  39              		.comm	gy,2,2
  40              		.comm	gz,2,2
  41              		.comm	ax,2,2
  42              		.comm	ay,2,2
  43              		.comm	az,2,2
  44              		.comm	mx,2,2
  45              		.comm	my,2,2
  46              		.comm	mz,2,2
  47              		.comm	temperature,2,2
  48              		.comm	accelMeasurementsNum,4,4
  49              		.comm	lk,20,4
  50              		.global	indexAccel
  51              		.bss
  52              		.align	2
  55              	indexAccel:
  56 0000 00000000 		.space	4
  57              		.global	magSensitivity
  58              		.data
  59              		.align	2
  62              	magSensitivity:
  63 0000 F7CC1239 		.word	957533431
  64 0004 240B9839 		.word	966265636
  65 0008 9F71E139 		.word	971075999
  66 000c 240B183A 		.word	974654244
  67              		.global	accelMeasurements
  68              		.bss
  69              		.align	2
  72              	accelMeasurements:
  73 0004 00000000 		.space	4
  74              		.global	gyroMeasurements
  75              		.align	2
  78              	gyroMeasurements:
  79 0008 00000000 		.space	4
  80              		.comm	poms,6000,4
  81              		.section	.text.init,"ax",%progbits
  82              		.align	2
  83              		.global	init
  84              		.thumb
  85              		.thumb_func
  87              	init:
  88              	.LFB112:
  89              		.file 1 "../LSM9DS1_drivers.c"
   1:../LSM9DS1_drivers.c **** /*
   2:../LSM9DS1_drivers.c ****  * LSM9DS1_drivers.c
   3:../LSM9DS1_drivers.c ****  *
   4:../LSM9DS1_drivers.c ****  *  Created on: 28-12-2015
   5:../LSM9DS1_drivers.c ****  *      Author: Mateusz
   6:../LSM9DS1_drivers.c ****  */
   7:../LSM9DS1_drivers.c **** 
   8:../LSM9DS1_drivers.c **** #include "LSM9DS1_drivers.h"
   9:../LSM9DS1_drivers.c **** #include "LSM9DS1_Registers.h"
  10:../LSM9DS1_drivers.c **** #include "LSM9DS1_Types.h"
  11:../LSM9DS1_drivers.c **** #include "timerFunctionsLSM.h"
  12:../LSM9DS1_drivers.c **** #include "timerFunctions.h"
  13:../LSM9DS1_drivers.c **** #include <stdint.h>
  14:../LSM9DS1_drivers.c **** #include <inttypes.h>
  15:../LSM9DS1_drivers.c **** #include <math.h>
  16:../LSM9DS1_drivers.c **** #include <stdlib.h>
  17:../LSM9DS1_drivers.c **** 
  18:../LSM9DS1_drivers.c **** #define TRUE 1
  19:../LSM9DS1_drivers.c **** #define FALSE 0
  20:../LSM9DS1_drivers.c **** #define LSM9DS1_COMMUNICATION_TIMEOUT 1000
  21:../LSM9DS1_drivers.c **** 
  22:../LSM9DS1_drivers.c **** 
  23:../LSM9DS1_drivers.c **** int accelMeasurementsNum;
  24:../LSM9DS1_drivers.c **** 
  25:../LSM9DS1_drivers.c **** char lk[20];
  26:../LSM9DS1_drivers.c **** /*Status = SYSTM001_ERROR;
  27:../LSM9DS1_drivers.c **** TimerId = 0;
  28:../LSM9DS1_drivers.c **** 
  29:../LSM9DS1_drivers.c **** WriteTimerStatus = SYSTM001_ERROR;
  30:../LSM9DS1_drivers.c **** WriteTimerId = 0;*/
  31:../LSM9DS1_drivers.c **** 
  32:../LSM9DS1_drivers.c **** int indexAccel = 0;
  33:../LSM9DS1_drivers.c **** 
  34:../LSM9DS1_drivers.c **** 
  35:../LSM9DS1_drivers.c **** float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};
  36:../LSM9DS1_drivers.c **** 
  37:../LSM9DS1_drivers.c **** FILE * accelMeasurements = NULL;
  38:../LSM9DS1_drivers.c **** FILE * gyroMeasurements = NULL;
  39:../LSM9DS1_drivers.c **** 
  40:../LSM9DS1_drivers.c **** typedef struct pomiary
  41:../LSM9DS1_drivers.c **** {
  42:../LSM9DS1_drivers.c **** 	int16_t gxs[1000];
  43:../LSM9DS1_drivers.c **** 	int16_t gys[1000];
  44:../LSM9DS1_drivers.c **** 	int16_t gzs[1000];
  45:../LSM9DS1_drivers.c **** }pomiary;
  46:../LSM9DS1_drivers.c **** 
  47:../LSM9DS1_drivers.c **** pomiary poms;
  48:../LSM9DS1_drivers.c **** 
  49:../LSM9DS1_drivers.c **** void init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
  50:../LSM9DS1_drivers.c **** {
  90              		.loc 1 50 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 16
  93              		@ frame_needed = 1, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95 0000 80B4     		push	{r7}
  96              	.LCFI0:
  97              		.cfi_def_cfa_offset 4
  98              		.cfi_offset 7, -4
  99 0002 85B0     		sub	sp, sp, #20
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 24
 102 0004 00AF     		add	r7, sp, #0
 103              	.LCFI2:
 104              		.cfi_def_cfa_register 7
 105 0006 1346     		mov	r3, r2
 106 0008 0246     		mov	r2, r0
 107 000a FA71     		strb	r2, [r7, #7]
 108 000c 0A46     		mov	r2, r1
 109 000e BA71     		strb	r2, [r7, #6]
 110 0010 7B71     		strb	r3, [r7, #5]
  51:../LSM9DS1_drivers.c **** 	settings.device.commInterface = interface;
 111              		.loc 1 51 0
 112 0012 40F20003 		movw	r3, #:lower16:settings
 113 0016 C0F20003 		movt	r3, #:upper16:settings
 114 001a FA79     		ldrb	r2, [r7, #7]
 115 001c 1A70     		strb	r2, [r3, #0]
  52:../LSM9DS1_drivers.c **** 	settings.device.agAddress = xgAddr;
 116              		.loc 1 52 0
 117 001e 40F20003 		movw	r3, #:lower16:settings
 118 0022 C0F20003 		movt	r3, #:upper16:settings
 119 0026 BA79     		ldrb	r2, [r7, #6]
 120 0028 5A70     		strb	r2, [r3, #1]
  53:../LSM9DS1_drivers.c **** 	settings.device.mAddress = mAddr;
 121              		.loc 1 53 0
 122 002a 40F20003 		movw	r3, #:lower16:settings
 123 002e C0F20003 		movt	r3, #:upper16:settings
 124 0032 7A79     		ldrb	r2, [r7, #5]
 125 0034 9A70     		strb	r2, [r3, #2]
  54:../LSM9DS1_drivers.c **** 
  55:../LSM9DS1_drivers.c **** 	settings.gyro.enabled = TRUE;
 126              		.loc 1 55 0
 127 0036 40F20003 		movw	r3, #:lower16:settings
 128 003a C0F20003 		movt	r3, #:upper16:settings
 129 003e 4FF00102 		mov	r2, #1
 130 0042 1A71     		strb	r2, [r3, #4]
  56:../LSM9DS1_drivers.c **** 	settings.gyro.enableX = TRUE;
 131              		.loc 1 56 0
 132 0044 40F20003 		movw	r3, #:lower16:settings
 133 0048 C0F20003 		movt	r3, #:upper16:settings
 134 004c 4FF00102 		mov	r2, #1
 135 0050 5A74     		strb	r2, [r3, #17]
  57:../LSM9DS1_drivers.c **** 	settings.gyro.enableY = TRUE;
 136              		.loc 1 57 0
 137 0052 40F20003 		movw	r3, #:lower16:settings
 138 0056 C0F20003 		movt	r3, #:upper16:settings
 139 005a 4FF00102 		mov	r2, #1
 140 005e 9A74     		strb	r2, [r3, #18]
  58:../LSM9DS1_drivers.c **** 	settings.gyro.enableZ = TRUE;
 141              		.loc 1 58 0
 142 0060 40F20003 		movw	r3, #:lower16:settings
 143 0064 C0F20003 		movt	r3, #:upper16:settings
 144 0068 4FF00102 		mov	r2, #1
 145 006c DA74     		strb	r2, [r3, #19]
  59:../LSM9DS1_drivers.c **** 	// gyro scale can be 245, 500, or 2000
  60:../LSM9DS1_drivers.c **** 	settings.gyro.scale = 245;
 146              		.loc 1 60 0
 147 006e 40F20003 		movw	r3, #:lower16:settings
 148 0072 C0F20003 		movt	r3, #:upper16:settings
 149 0076 4FF0F502 		mov	r2, #245
 150 007a DA80     		strh	r2, [r3, #6]	@ movhi
  61:../LSM9DS1_drivers.c **** 	// gyro sample rate: value between 1-6
  62:../LSM9DS1_drivers.c **** 	// 1 = 14.9    4 = 238
  63:../LSM9DS1_drivers.c **** 	// 2 = 59.5    5 = 476
  64:../LSM9DS1_drivers.c **** 	// 3 = 119     6 = 952
  65:../LSM9DS1_drivers.c **** 	settings.gyro.sampleRate = 3;
 151              		.loc 1 65 0
 152 007c 40F20003 		movw	r3, #:lower16:settings
 153 0080 C0F20003 		movt	r3, #:upper16:settings
 154 0084 4FF00302 		mov	r2, #3
 155 0088 1A72     		strb	r2, [r3, #8]
  66:../LSM9DS1_drivers.c **** 	// gyro cutoff frequency: value between 0-3
  67:../LSM9DS1_drivers.c **** 	// Actual value of cutoff frequency depends
  68:../LSM9DS1_drivers.c **** 	// on sample rate.
  69:../LSM9DS1_drivers.c **** 	settings.gyro.bandwidth = 0;
 156              		.loc 1 69 0
 157 008a 40F20003 		movw	r3, #:lower16:settings
 158 008e C0F20003 		movt	r3, #:upper16:settings
 159 0092 4FF00002 		mov	r2, #0
 160 0096 5A72     		strb	r2, [r3, #9]
  70:../LSM9DS1_drivers.c **** 	settings.gyro.lowPowerEnable = FALSE;
 161              		.loc 1 70 0
 162 0098 40F20003 		movw	r3, #:lower16:settings
 163 009c C0F20003 		movt	r3, #:upper16:settings
 164 00a0 4FF00002 		mov	r2, #0
 165 00a4 9A72     		strb	r2, [r3, #10]
  71:../LSM9DS1_drivers.c **** 
  72:../LSM9DS1_drivers.c **** 	settings.gyro.HPFEnable = FALSE;
 166              		.loc 1 72 0
 167 00a6 40F20003 		movw	r3, #:lower16:settings
 168 00aa C0F20003 		movt	r3, #:upper16:settings
 169 00ae 4FF00002 		mov	r2, #0
 170 00b2 DA72     		strb	r2, [r3, #11]
  73:../LSM9DS1_drivers.c **** 	// Gyro HPF cutoff frequency: value between 0-9
  74:../LSM9DS1_drivers.c **** 	// Actual value depends on sample rate. Only applies
  75:../LSM9DS1_drivers.c **** 	// if gyroHPFEnable is TRUE.
  76:../LSM9DS1_drivers.c **** 	settings.gyro.HPFCutoff = 0;
 171              		.loc 1 76 0
 172 00b4 40F20003 		movw	r3, #:lower16:settings
 173 00b8 C0F20003 		movt	r3, #:upper16:settings
 174 00bc 4FF00002 		mov	r2, #0
 175 00c0 1A73     		strb	r2, [r3, #12]
  77:../LSM9DS1_drivers.c **** 	settings.gyro.flipX = FALSE;
 176              		.loc 1 77 0
 177 00c2 40F20003 		movw	r3, #:lower16:settings
 178 00c6 C0F20003 		movt	r3, #:upper16:settings
 179 00ca 4FF00002 		mov	r2, #0
 180 00ce 5A73     		strb	r2, [r3, #13]
  78:../LSM9DS1_drivers.c **** 	settings.gyro.flipY = FALSE;
 181              		.loc 1 78 0
 182 00d0 40F20003 		movw	r3, #:lower16:settings
 183 00d4 C0F20003 		movt	r3, #:upper16:settings
 184 00d8 4FF00002 		mov	r2, #0
 185 00dc 9A73     		strb	r2, [r3, #14]
  79:../LSM9DS1_drivers.c **** 	settings.gyro.flipZ = FALSE;
 186              		.loc 1 79 0
 187 00de 40F20003 		movw	r3, #:lower16:settings
 188 00e2 C0F20003 		movt	r3, #:upper16:settings
 189 00e6 4FF00002 		mov	r2, #0
 190 00ea DA73     		strb	r2, [r3, #15]
  80:../LSM9DS1_drivers.c **** 	settings.gyro.orientation = 0;
 191              		.loc 1 80 0
 192 00ec 40F20003 		movw	r3, #:lower16:settings
 193 00f0 C0F20003 		movt	r3, #:upper16:settings
 194 00f4 4FF00002 		mov	r2, #0
 195 00f8 1A74     		strb	r2, [r3, #16]
  81:../LSM9DS1_drivers.c **** 	settings.gyro.latchInterrupt = TRUE;
 196              		.loc 1 81 0
 197 00fa 40F20003 		movw	r3, #:lower16:settings
 198 00fe C0F20003 		movt	r3, #:upper16:settings
 199 0102 4FF00102 		mov	r2, #1
 200 0106 1A75     		strb	r2, [r3, #20]
  82:../LSM9DS1_drivers.c **** 
  83:../LSM9DS1_drivers.c **** 	settings.accel.enabled = TRUE;
 201              		.loc 1 83 0
 202 0108 40F20003 		movw	r3, #:lower16:settings
 203 010c C0F20003 		movt	r3, #:upper16:settings
 204 0110 4FF00102 		mov	r2, #1
 205 0114 9A75     		strb	r2, [r3, #22]
  84:../LSM9DS1_drivers.c **** 	settings.accel.enableX = TRUE;
 206              		.loc 1 84 0
 207 0116 40F20003 		movw	r3, #:lower16:settings
 208 011a C0F20003 		movt	r3, #:upper16:settings
 209 011e 4FF00102 		mov	r2, #1
 210 0122 5A76     		strb	r2, [r3, #25]
  85:../LSM9DS1_drivers.c **** 	settings.accel.enableY = TRUE;
 211              		.loc 1 85 0
 212 0124 40F20003 		movw	r3, #:lower16:settings
 213 0128 C0F20003 		movt	r3, #:upper16:settings
 214 012c 4FF00102 		mov	r2, #1
 215 0130 9A76     		strb	r2, [r3, #26]
  86:../LSM9DS1_drivers.c **** 	settings.accel.enableZ = TRUE;
 216              		.loc 1 86 0
 217 0132 40F20003 		movw	r3, #:lower16:settings
 218 0136 C0F20003 		movt	r3, #:upper16:settings
 219 013a 4FF00102 		mov	r2, #1
 220 013e DA76     		strb	r2, [r3, #27]
  87:../LSM9DS1_drivers.c **** 	// accel scale can be 2, 4, 8, or 16
  88:../LSM9DS1_drivers.c **** 	settings.accel.scale = 2;
 221              		.loc 1 88 0
 222 0140 40F20003 		movw	r3, #:lower16:settings
 223 0144 C0F20003 		movt	r3, #:upper16:settings
 224 0148 4FF00202 		mov	r2, #2
 225 014c DA75     		strb	r2, [r3, #23]
  89:../LSM9DS1_drivers.c **** 	// accel sample rate can be 1-6
  90:../LSM9DS1_drivers.c **** 	// 1 = 10 Hz    4 = 238 Hz
  91:../LSM9DS1_drivers.c **** 	// 2 = 50 Hz    5 = 476 Hz
  92:../LSM9DS1_drivers.c **** 	// 3 = 119 Hz   6 = 952 Hz
  93:../LSM9DS1_drivers.c **** 	settings.accel.sampleRate = 6;
 226              		.loc 1 93 0
 227 014e 40F20003 		movw	r3, #:lower16:settings
 228 0152 C0F20003 		movt	r3, #:upper16:settings
 229 0156 4FF00602 		mov	r2, #6
 230 015a 1A76     		strb	r2, [r3, #24]
  94:../LSM9DS1_drivers.c **** 	// Accel cutoff freqeuncy can be any value between -1 - 3.
  95:../LSM9DS1_drivers.c **** 	// -1 = bandwidth determined by sample rate
  96:../LSM9DS1_drivers.c **** 	// 0 = 408 Hz   2 = 105 Hz
  97:../LSM9DS1_drivers.c **** 	// 1 = 211 Hz   3 = 50 Hz
  98:../LSM9DS1_drivers.c **** 	settings.accel.bandwidth = -1;
 231              		.loc 1 98 0
 232 015c 40F20003 		movw	r3, #:lower16:settings
 233 0160 C0F20003 		movt	r3, #:upper16:settings
 234 0164 4FF0FF02 		mov	r2, #255
 235 0168 1A77     		strb	r2, [r3, #28]
  99:../LSM9DS1_drivers.c **** 	settings.accel.highResEnable = FALSE;
 236              		.loc 1 99 0
 237 016a 40F20003 		movw	r3, #:lower16:settings
 238 016e C0F20003 		movt	r3, #:upper16:settings
 239 0172 4FF00002 		mov	r2, #0
 240 0176 5A77     		strb	r2, [r3, #29]
 100:../LSM9DS1_drivers.c **** 	// accelHighResBandwidth can be any value between 0-3
 101:../LSM9DS1_drivers.c **** 	// LP cutoff is set to a factor of sample rate
 102:../LSM9DS1_drivers.c **** 	// 0 = ODR/50    2 = ODR/9
 103:../LSM9DS1_drivers.c **** 	// 1 = ODR/100   3 = ODR/400
 104:../LSM9DS1_drivers.c **** 	settings.accel.highResBandwidth = 0;
 241              		.loc 1 104 0
 242 0178 40F20003 		movw	r3, #:lower16:settings
 243 017c C0F20003 		movt	r3, #:upper16:settings
 244 0180 4FF00002 		mov	r2, #0
 245 0184 9A77     		strb	r2, [r3, #30]
 105:../LSM9DS1_drivers.c **** 
 106:../LSM9DS1_drivers.c **** 	settings.mag.enabled = TRUE;
 246              		.loc 1 106 0
 247 0186 40F20003 		movw	r3, #:lower16:settings
 248 018a C0F20003 		movt	r3, #:upper16:settings
 249 018e 4FF00102 		mov	r2, #1
 250 0192 DA77     		strb	r2, [r3, #31]
 107:../LSM9DS1_drivers.c **** 	// mag scale can be 4, 8, 12, or 16
 108:../LSM9DS1_drivers.c **** 	settings.mag.scale = 4;
 251              		.loc 1 108 0
 252 0194 40F20003 		movw	r3, #:lower16:settings
 253 0198 C0F20003 		movt	r3, #:upper16:settings
 254 019c 4FF00402 		mov	r2, #4
 255 01a0 83F82020 		strb	r2, [r3, #32]
 109:../LSM9DS1_drivers.c **** 	// mag data rate can be 0-7
 110:../LSM9DS1_drivers.c **** 	// 0 = 0.625 Hz  4 = 10 Hz
 111:../LSM9DS1_drivers.c **** 	// 1 = 1.25 Hz   5 = 20 Hz
 112:../LSM9DS1_drivers.c **** 	// 2 = 2.5 Hz    6 = 40 Hz
 113:../LSM9DS1_drivers.c **** 	// 3 = 5 Hz      7 = 80 Hz
 114:../LSM9DS1_drivers.c **** 	settings.mag.sampleRate = 7;
 256              		.loc 1 114 0
 257 01a4 40F20003 		movw	r3, #:lower16:settings
 258 01a8 C0F20003 		movt	r3, #:upper16:settings
 259 01ac 4FF00702 		mov	r2, #7
 260 01b0 83F82120 		strb	r2, [r3, #33]
 115:../LSM9DS1_drivers.c **** 	settings.mag.tempCompensationEnable = FALSE;
 261              		.loc 1 115 0
 262 01b4 40F20003 		movw	r3, #:lower16:settings
 263 01b8 C0F20003 		movt	r3, #:upper16:settings
 264 01bc 4FF00002 		mov	r2, #0
 265 01c0 83F82220 		strb	r2, [r3, #34]
 116:../LSM9DS1_drivers.c **** 	// magPerformance can be any value between 0-3
 117:../LSM9DS1_drivers.c **** 	// 0 = Low power mode      2 = high performance
 118:../LSM9DS1_drivers.c **** 	// 1 = medium performance  3 = ultra-high performance
 119:../LSM9DS1_drivers.c **** 	settings.mag.XYPerformance = 3;
 266              		.loc 1 119 0
 267 01c4 40F20003 		movw	r3, #:lower16:settings
 268 01c8 C0F20003 		movt	r3, #:upper16:settings
 269 01cc 4FF00302 		mov	r2, #3
 270 01d0 83F82320 		strb	r2, [r3, #35]
 120:../LSM9DS1_drivers.c **** 	settings.mag.ZPerformance = 3;
 271              		.loc 1 120 0
 272 01d4 40F20003 		movw	r3, #:lower16:settings
 273 01d8 C0F20003 		movt	r3, #:upper16:settings
 274 01dc 4FF00302 		mov	r2, #3
 275 01e0 83F82420 		strb	r2, [r3, #36]
 121:../LSM9DS1_drivers.c **** 	settings.mag.lowPowerEnable = FALSE;
 276              		.loc 1 121 0
 277 01e4 40F20003 		movw	r3, #:lower16:settings
 278 01e8 C0F20003 		movt	r3, #:upper16:settings
 279 01ec 4FF00002 		mov	r2, #0
 280 01f0 83F82520 		strb	r2, [r3, #37]
 122:../LSM9DS1_drivers.c **** 	// magOperatingMode can be 0-2
 123:../LSM9DS1_drivers.c **** 	// 0 = continuous conversion
 124:../LSM9DS1_drivers.c **** 	// 1 = single-conversion
 125:../LSM9DS1_drivers.c **** 	// 2 = power down
 126:../LSM9DS1_drivers.c **** 	settings.mag.operatingMode = 0;
 281              		.loc 1 126 0
 282 01f4 40F20003 		movw	r3, #:lower16:settings
 283 01f8 C0F20003 		movt	r3, #:upper16:settings
 284 01fc 4FF00002 		mov	r2, #0
 285 0200 83F82620 		strb	r2, [r3, #38]
 127:../LSM9DS1_drivers.c **** 
 128:../LSM9DS1_drivers.c **** 	settings.temp.enabled = TRUE;
 286              		.loc 1 128 0
 287 0204 40F20003 		movw	r3, #:lower16:settings
 288 0208 C0F20003 		movt	r3, #:upper16:settings
 289 020c 4FF00102 		mov	r2, #1
 290 0210 83F82720 		strb	r2, [r3, #39]
 291              	.LBB2:
 129:../LSM9DS1_drivers.c **** 
 130:../LSM9DS1_drivers.c **** 	for (int i=0; i<3; i++)
 292              		.loc 1 130 0
 293 0214 4FF00003 		mov	r3, #0
 294 0218 FB60     		str	r3, [r7, #12]
 295 021a 3FE0     		b	.L2
 296              	.L3:
 131:../LSM9DS1_drivers.c **** 	{
 132:../LSM9DS1_drivers.c **** 		gBias[i] = 0;
 297              		.loc 1 132 0 discriminator 2
 298 021c 40F20003 		movw	r3, #:lower16:gBias
 299 0220 C0F20003 		movt	r3, #:upper16:gBias
 300 0224 FA68     		ldr	r2, [r7, #12]
 301 0226 4FEA8202 		lsl	r2, r2, #2
 302 022a 9B18     		adds	r3, r3, r2
 303 022c 4FF00002 		mov	r2, #0
 304 0230 1A60     		str	r2, [r3, #0]	@ float
 133:../LSM9DS1_drivers.c **** 		aBias[i] = 0;
 305              		.loc 1 133 0 discriminator 2
 306 0232 40F20003 		movw	r3, #:lower16:aBias
 307 0236 C0F20003 		movt	r3, #:upper16:aBias
 308 023a FA68     		ldr	r2, [r7, #12]
 309 023c 4FEA8202 		lsl	r2, r2, #2
 310 0240 9B18     		adds	r3, r3, r2
 311 0242 4FF00002 		mov	r2, #0
 312 0246 1A60     		str	r2, [r3, #0]	@ float
 134:../LSM9DS1_drivers.c **** 		mBias[i] = 0;
 313              		.loc 1 134 0 discriminator 2
 314 0248 40F20003 		movw	r3, #:lower16:mBias
 315 024c C0F20003 		movt	r3, #:upper16:mBias
 316 0250 FA68     		ldr	r2, [r7, #12]
 317 0252 4FEA8202 		lsl	r2, r2, #2
 318 0256 9B18     		adds	r3, r3, r2
 319 0258 4FF00002 		mov	r2, #0
 320 025c 1A60     		str	r2, [r3, #0]	@ float
 135:../LSM9DS1_drivers.c **** 		gBiasRaw[i] = 0;
 321              		.loc 1 135 0 discriminator 2
 322 025e 40F20003 		movw	r3, #:lower16:gBiasRaw
 323 0262 C0F20003 		movt	r3, #:upper16:gBiasRaw
 324 0266 FA68     		ldr	r2, [r7, #12]
 325 0268 4FF00001 		mov	r1, #0
 326 026c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 136:../LSM9DS1_drivers.c **** 		aBiasRaw[i] = 0;
 327              		.loc 1 136 0 discriminator 2
 328 0270 40F20003 		movw	r3, #:lower16:aBiasRaw
 329 0274 C0F20003 		movt	r3, #:upper16:aBiasRaw
 330 0278 FA68     		ldr	r2, [r7, #12]
 331 027a 4FF00001 		mov	r1, #0
 332 027e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 137:../LSM9DS1_drivers.c **** 		mBiasRaw[i] = 0;
 333              		.loc 1 137 0 discriminator 2
 334 0282 40F20003 		movw	r3, #:lower16:mBiasRaw
 335 0286 C0F20003 		movt	r3, #:upper16:mBiasRaw
 336 028a FA68     		ldr	r2, [r7, #12]
 337 028c 4FF00001 		mov	r1, #0
 338 0290 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 130:../LSM9DS1_drivers.c **** 	for (int i=0; i<3; i++)
 339              		.loc 1 130 0 discriminator 2
 340 0294 FB68     		ldr	r3, [r7, #12]
 341 0296 03F10103 		add	r3, r3, #1
 342 029a FB60     		str	r3, [r7, #12]
 343              	.L2:
 130:../LSM9DS1_drivers.c **** 	for (int i=0; i<3; i++)
 344              		.loc 1 130 0 is_stmt 0 discriminator 1
 345 029c FB68     		ldr	r3, [r7, #12]
 346 029e 022B     		cmp	r3, #2
 347 02a0 BCDD     		ble	.L3
 348              	.LBE2:
 138:../LSM9DS1_drivers.c **** 	}
 139:../LSM9DS1_drivers.c **** 
 140:../LSM9DS1_drivers.c **** 	_autoCalc = FALSE;
 349              		.loc 1 140 0 is_stmt 1
 350 02a2 40F20003 		movw	r3, #:lower16:_autoCalc
 351 02a6 C0F20003 		movt	r3, #:upper16:_autoCalc
 352 02aa 4FF00002 		mov	r2, #0
 353 02ae 1A70     		strb	r2, [r3, #0]
 141:../LSM9DS1_drivers.c **** }
 354              		.loc 1 141 0
 355 02b0 07F11407 		add	r7, r7, #20
 356 02b4 BD46     		mov	sp, r7
 357 02b6 80BC     		pop	{r7}
 358 02b8 7047     		bx	lr
 359              		.cfi_endproc
 360              	.LFE112:
 362 02ba 00BF     		.section	.text.begin,"ax",%progbits
 363              		.align	2
 364              		.global	begin
 365              		.thumb
 366              		.thumb_func
 368              	begin:
 369              	.LFB113:
 142:../LSM9DS1_drivers.c **** 
 143:../LSM9DS1_drivers.c **** uint16_t begin(void)
 144:../LSM9DS1_drivers.c **** {
 370              		.loc 1 144 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 8
 373              		@ frame_needed = 1, uses_anonymous_args = 0
 374 0000 80B5     		push	{r7, lr}
 375              	.LCFI3:
 376              		.cfi_def_cfa_offset 8
 377              		.cfi_offset 7, -8
 378              		.cfi_offset 14, -4
 379 0002 82B0     		sub	sp, sp, #8
 380              	.LCFI4:
 381              		.cfi_def_cfa_offset 16
 382 0004 00AF     		add	r7, sp, #0
 383              	.LCFI5:
 384              		.cfi_def_cfa_register 7
 145:../LSM9DS1_drivers.c **** 	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
 146:../LSM9DS1_drivers.c **** 	_xgAddress = settings.device.agAddress;
 385              		.loc 1 146 0
 386 0006 40F20003 		movw	r3, #:lower16:settings
 387 000a C0F20003 		movt	r3, #:upper16:settings
 388 000e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 389 0010 40F20003 		movw	r3, #:lower16:_xgAddress
 390 0014 C0F20003 		movt	r3, #:upper16:_xgAddress
 391 0018 1A70     		strb	r2, [r3, #0]
 147:../LSM9DS1_drivers.c **** 	_mAddress = settings.device.mAddress;
 392              		.loc 1 147 0
 393 001a 40F20003 		movw	r3, #:lower16:settings
 394 001e C0F20003 		movt	r3, #:upper16:settings
 395 0022 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 396 0024 40F20003 		movw	r3, #:lower16:_mAddress
 397 0028 C0F20003 		movt	r3, #:upper16:_mAddress
 398 002c 1A70     		strb	r2, [r3, #0]
 148:../LSM9DS1_drivers.c **** 
 149:../LSM9DS1_drivers.c **** 	constrainScales();
 399              		.loc 1 149 0
 400 002e FFF7FEFF 		bl	constrainScales
 150:../LSM9DS1_drivers.c **** 
 151:../LSM9DS1_drivers.c **** 	// Once we have the scale values, we can calculate the resolution
 152:../LSM9DS1_drivers.c **** 	// of each sensor. That's what these functions are for. One for each sensor
 153:../LSM9DS1_drivers.c **** 	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 401              		.loc 1 153 0
 402 0032 FFF7FEFF 		bl	calcgRes
 154:../LSM9DS1_drivers.c **** 	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 403              		.loc 1 154 0
 404 0036 FFF7FEFF 		bl	calcmRes
 155:../LSM9DS1_drivers.c **** 	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 405              		.loc 1 155 0
 406 003a FFF7FEFF 		bl	calcaRes
 156:../LSM9DS1_drivers.c **** 
 157:../LSM9DS1_drivers.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 407              		.loc 1 157 0
 408 003e 40F20003 		movw	r3, #:lower16:settings
 409 0042 C0F20003 		movt	r3, #:upper16:settings
 410 0046 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 411 0048 012B     		cmp	r3, #1
 412 004a 02D1     		bne	.L5
 158:../LSM9DS1_drivers.c **** 		initI2C();	// Initialize I2C
 413              		.loc 1 158 0
 414 004c FFF7FEFF 		bl	initI2C
 415 0050 08E0     		b	.L6
 416              	.L5:
 159:../LSM9DS1_drivers.c **** 	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 417              		.loc 1 159 0
 418 0052 40F20003 		movw	r3, #:lower16:settings
 419 0056 C0F20003 		movt	r3, #:upper16:settings
 420 005a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 421 005c 002B     		cmp	r3, #0
 422 005e 01D1     		bne	.L6
 160:../LSM9DS1_drivers.c **** 		initSPI();	// Initialize SPI
 423              		.loc 1 160 0
 424 0060 FFF7FEFF 		bl	initSPI
 425              	.L6:
 161:../LSM9DS1_drivers.c **** 
 162:../LSM9DS1_drivers.c **** 	// To verify communication, we can read from the WHO_AM_I register of
 163:../LSM9DS1_drivers.c **** 	// each device. Store those in a variable so we can return them.
 164:../LSM9DS1_drivers.c **** 	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 426              		.loc 1 164 0
 427 0064 4FF00F00 		mov	r0, #15
 428 0068 FFF7FEFF 		bl	mReadByte
 429 006c 0346     		mov	r3, r0
 430 006e FB71     		strb	r3, [r7, #7]
 165:../LSM9DS1_drivers.c **** 	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 431              		.loc 1 165 0
 432 0070 4FF00F00 		mov	r0, #15
 433 0074 FFF7FEFF 		bl	xgReadByte
 434 0078 0346     		mov	r3, r0
 435 007a BB71     		strb	r3, [r7, #6]
 166:../LSM9DS1_drivers.c **** 
 167:../LSM9DS1_drivers.c **** 	uint16_t whoAmICombined = (xgTest << 8) | mTest;
 436              		.loc 1 167 0
 437 007c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 438 007e 4FEA0323 		lsl	r3, r3, #8
 439 0082 9AB2     		uxth	r2, r3
 440 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 441 0086 9BB2     		uxth	r3, r3
 442 0088 1343     		orrs	r3, r3, r2
 443 008a 9BB2     		uxth	r3, r3
 444 008c BB80     		strh	r3, [r7, #4]	@ movhi
 168:../LSM9DS1_drivers.c **** 
 169:../LSM9DS1_drivers.c **** 	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 445              		.loc 1 169 0
 446 008e BA88     		ldrh	r2, [r7, #4]
 447 0090 46F63D03 		movw	r3, #26685
 448 0094 9A42     		cmp	r2, r3
 449 0096 02D0     		beq	.L7
 170:../LSM9DS1_drivers.c **** 	{
 171:../LSM9DS1_drivers.c **** 		return 0;
 450              		.loc 1 171 0
 451 0098 4FF00003 		mov	r3, #0
 452 009c 06E0     		b	.L8
 453              	.L7:
 172:../LSM9DS1_drivers.c **** 	}
 173:../LSM9DS1_drivers.c **** 
 174:../LSM9DS1_drivers.c **** 	// Gyro initialization stuff:
 175:../LSM9DS1_drivers.c **** 	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 454              		.loc 1 175 0
 455 009e FFF7FEFF 		bl	initGyro
 176:../LSM9DS1_drivers.c **** 
 177:../LSM9DS1_drivers.c **** 	// Accelerometer initialization stuff:
 178:../LSM9DS1_drivers.c **** 	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 456              		.loc 1 178 0
 457 00a2 FFF7FEFF 		bl	initAccel
 179:../LSM9DS1_drivers.c **** 
 180:../LSM9DS1_drivers.c **** 	// Magnetometer initialization stuff:
 181:../LSM9DS1_drivers.c **** 	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 458              		.loc 1 181 0
 459 00a6 FFF7FEFF 		bl	initMag
 182:../LSM9DS1_drivers.c **** 
 183:../LSM9DS1_drivers.c **** 	// Once everything is initialized, return the WHO_AM_I registers we read:
 184:../LSM9DS1_drivers.c **** 	return whoAmICombined;
 460              		.loc 1 184 0
 461 00aa BB88     		ldrh	r3, [r7, #4]
 462              	.L8:
 185:../LSM9DS1_drivers.c **** 
 186:../LSM9DS1_drivers.c **** }
 463              		.loc 1 186 0
 464 00ac 1846     		mov	r0, r3
 465 00ae 07F10807 		add	r7, r7, #8
 466 00b2 BD46     		mov	sp, r7
 467 00b4 80BD     		pop	{r7, pc}
 468              		.cfi_endproc
 469              	.LFE113:
 471 00b6 00BF     		.section	.text.constrainScales,"ax",%progbits
 472              		.align	2
 473              		.global	constrainScales
 474              		.thumb
 475              		.thumb_func
 477              	constrainScales:
 478              	.LFB114:
 187:../LSM9DS1_drivers.c **** 
 188:../LSM9DS1_drivers.c **** void constrainScales()
 189:../LSM9DS1_drivers.c **** {
 479              		.loc 1 189 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0000 80B4     		push	{r7}
 485              	.LCFI6:
 486              		.cfi_def_cfa_offset 4
 487              		.cfi_offset 7, -4
 488 0002 00AF     		add	r7, sp, #0
 489              	.LCFI7:
 490              		.cfi_def_cfa_register 7
 190:../LSM9DS1_drivers.c **** 	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && (settings.gyro.scale != 2000))
 491              		.loc 1 190 0
 492 0004 40F20003 		movw	r3, #:lower16:settings
 493 0008 C0F20003 		movt	r3, #:upper16:settings
 494 000c DB88     		ldrh	r3, [r3, #6]
 495 000e F52B     		cmp	r3, #245
 496 0010 16D0     		beq	.L10
 497              		.loc 1 190 0 is_stmt 0 discriminator 1
 498 0012 40F20003 		movw	r3, #:lower16:settings
 499 0016 C0F20003 		movt	r3, #:upper16:settings
 500 001a DB88     		ldrh	r3, [r3, #6]
 501 001c B3F5FA7F 		cmp	r3, #500
 502 0020 0ED0     		beq	.L10
 503 0022 40F20003 		movw	r3, #:lower16:settings
 504 0026 C0F20003 		movt	r3, #:upper16:settings
 505 002a DB88     		ldrh	r3, [r3, #6]
 506 002c B3F5FA6F 		cmp	r3, #2000
 507 0030 06D0     		beq	.L10
 191:../LSM9DS1_drivers.c **** 	{
 192:../LSM9DS1_drivers.c **** 		settings.gyro.scale = 245;
 508              		.loc 1 192 0 is_stmt 1
 509 0032 40F20003 		movw	r3, #:lower16:settings
 510 0036 C0F20003 		movt	r3, #:upper16:settings
 511 003a 4FF0F502 		mov	r2, #245
 512 003e DA80     		strh	r2, [r3, #6]	@ movhi
 513              	.L10:
 193:../LSM9DS1_drivers.c **** 	}
 194:../LSM9DS1_drivers.c **** 
 195:../LSM9DS1_drivers.c **** 	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) && (settings.accel.scale != 8) && (
 514              		.loc 1 195 0
 515 0040 40F20003 		movw	r3, #:lower16:settings
 516 0044 C0F20003 		movt	r3, #:upper16:settings
 517 0048 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 518 004a 022B     		cmp	r3, #2
 519 004c 1BD0     		beq	.L11
 520              		.loc 1 195 0 is_stmt 0 discriminator 1
 521 004e 40F20003 		movw	r3, #:lower16:settings
 522 0052 C0F20003 		movt	r3, #:upper16:settings
 523 0056 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 524 0058 042B     		cmp	r3, #4
 525 005a 14D0     		beq	.L11
 526 005c 40F20003 		movw	r3, #:lower16:settings
 527 0060 C0F20003 		movt	r3, #:upper16:settings
 528 0064 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 529 0066 082B     		cmp	r3, #8
 530 0068 0DD0     		beq	.L11
 531 006a 40F20003 		movw	r3, #:lower16:settings
 532 006e C0F20003 		movt	r3, #:upper16:settings
 533 0072 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 534 0074 102B     		cmp	r3, #16
 535 0076 06D0     		beq	.L11
 196:../LSM9DS1_drivers.c **** 	{
 197:../LSM9DS1_drivers.c **** 		settings.accel.scale = 2;
 536              		.loc 1 197 0 is_stmt 1
 537 0078 40F20003 		movw	r3, #:lower16:settings
 538 007c C0F20003 		movt	r3, #:upper16:settings
 539 0080 4FF00202 		mov	r2, #2
 540 0084 DA75     		strb	r2, [r3, #23]
 541              	.L11:
 198:../LSM9DS1_drivers.c **** 	}
 199:../LSM9DS1_drivers.c **** 
 200:../LSM9DS1_drivers.c **** 	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) && (settings.mag.scale != 12) && (setti
 542              		.loc 1 200 0
 543 0086 40F20003 		movw	r3, #:lower16:settings
 544 008a C0F20003 		movt	r3, #:upper16:settings
 545 008e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 546 0092 042B     		cmp	r3, #4
 547 0094 1FD0     		beq	.L9
 548              		.loc 1 200 0 is_stmt 0 discriminator 1
 549 0096 40F20003 		movw	r3, #:lower16:settings
 550 009a C0F20003 		movt	r3, #:upper16:settings
 551 009e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 552 00a2 082B     		cmp	r3, #8
 553 00a4 17D0     		beq	.L9
 554 00a6 40F20003 		movw	r3, #:lower16:settings
 555 00aa C0F20003 		movt	r3, #:upper16:settings
 556 00ae 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 557 00b2 0C2B     		cmp	r3, #12
 558 00b4 0FD0     		beq	.L9
 559 00b6 40F20003 		movw	r3, #:lower16:settings
 560 00ba C0F20003 		movt	r3, #:upper16:settings
 561 00be 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 562 00c2 102B     		cmp	r3, #16
 563 00c4 07D0     		beq	.L9
 201:../LSM9DS1_drivers.c **** 	{
 202:../LSM9DS1_drivers.c **** 		settings.mag.scale = 4;
 564              		.loc 1 202 0 is_stmt 1
 565 00c6 40F20003 		movw	r3, #:lower16:settings
 566 00ca C0F20003 		movt	r3, #:upper16:settings
 567 00ce 4FF00402 		mov	r2, #4
 568 00d2 83F82020 		strb	r2, [r3, #32]
 569              	.L9:
 203:../LSM9DS1_drivers.c **** 	}
 204:../LSM9DS1_drivers.c **** }
 570              		.loc 1 204 0
 571 00d6 BD46     		mov	sp, r7
 572 00d8 80BC     		pop	{r7}
 573 00da 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE114:
 577              		.section	.text.calcgRes,"ax",%progbits
 578              		.align	2
 579              		.global	calcgRes
 580              		.thumb
 581              		.thumb_func
 583              	calcgRes:
 584              	.LFB115:
 205:../LSM9DS1_drivers.c **** 
 206:../LSM9DS1_drivers.c **** 
 207:../LSM9DS1_drivers.c **** void calcgRes()
 208:../LSM9DS1_drivers.c **** {
 585              		.loc 1 208 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 1, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590 0000 80B4     		push	{r7}
 591              	.LCFI8:
 592              		.cfi_def_cfa_offset 4
 593              		.cfi_offset 7, -4
 594 0002 00AF     		add	r7, sp, #0
 595              	.LCFI9:
 596              		.cfi_def_cfa_register 7
 209:../LSM9DS1_drivers.c **** 	gRes = ((float) settings.gyro.scale) / 32768.0;
 597              		.loc 1 209 0
 598 0004 40F20003 		movw	r3, #:lower16:settings
 599 0008 C0F20003 		movt	r3, #:upper16:settings
 600 000c DB88     		ldrh	r3, [r3, #6]
 601 000e 07EE903A 		fmsr	s15, r3	@ int
 602 0012 B8EE677A 		fuitos	s14, s15
 603 0016 DFED067A 		flds	s15, .L14
 604 001a C7EE277A 		fdivs	s15, s14, s15
 605 001e 40F20003 		movw	r3, #:lower16:gRes
 606 0022 C0F20003 		movt	r3, #:upper16:gRes
 607 0026 C3ED007A 		fsts	s15, [r3, #0]
 210:../LSM9DS1_drivers.c **** }
 608              		.loc 1 210 0
 609 002a BD46     		mov	sp, r7
 610 002c 80BC     		pop	{r7}
 611 002e 7047     		bx	lr
 612              	.L15:
 613              		.align	2
 614              	.L14:
 615 0030 00000047 		.word	1191182336
 616              		.cfi_endproc
 617              	.LFE115:
 619              		.section	.text.calcaRes,"ax",%progbits
 620              		.align	2
 621              		.global	calcaRes
 622              		.thumb
 623              		.thumb_func
 625              	calcaRes:
 626              	.LFB116:
 211:../LSM9DS1_drivers.c **** 
 212:../LSM9DS1_drivers.c **** void calcaRes()
 213:../LSM9DS1_drivers.c **** {
 627              		.loc 1 213 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632 0000 80B4     		push	{r7}
 633              	.LCFI10:
 634              		.cfi_def_cfa_offset 4
 635              		.cfi_offset 7, -4
 636 0002 00AF     		add	r7, sp, #0
 637              	.LCFI11:
 638              		.cfi_def_cfa_register 7
 214:../LSM9DS1_drivers.c **** 	aRes = ((float) settings.accel.scale) / 32768.0;
 639              		.loc 1 214 0
 640 0004 40F20003 		movw	r3, #:lower16:settings
 641 0008 C0F20003 		movt	r3, #:upper16:settings
 642 000c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 643 000e 07EE903A 		fmsr	s15, r3	@ int
 644 0012 B8EE677A 		fuitos	s14, s15
 645 0016 DFED067A 		flds	s15, .L17
 646 001a C7EE277A 		fdivs	s15, s14, s15
 647 001e 40F20003 		movw	r3, #:lower16:aRes
 648 0022 C0F20003 		movt	r3, #:upper16:aRes
 649 0026 C3ED007A 		fsts	s15, [r3, #0]
 215:../LSM9DS1_drivers.c **** }
 650              		.loc 1 215 0
 651 002a BD46     		mov	sp, r7
 652 002c 80BC     		pop	{r7}
 653 002e 7047     		bx	lr
 654              	.L18:
 655              		.align	2
 656              	.L17:
 657 0030 00000047 		.word	1191182336
 658              		.cfi_endproc
 659              	.LFE116:
 661              		.section	.text.calcmRes,"ax",%progbits
 662              		.align	2
 663              		.global	calcmRes
 664              		.thumb
 665              		.thumb_func
 667              	calcmRes:
 668              	.LFB117:
 216:../LSM9DS1_drivers.c **** 
 217:../LSM9DS1_drivers.c **** 
 218:../LSM9DS1_drivers.c **** void calcmRes()
 219:../LSM9DS1_drivers.c **** {
 669              		.loc 1 219 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 1, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674 0000 80B4     		push	{r7}
 675              	.LCFI12:
 676              		.cfi_def_cfa_offset 4
 677              		.cfi_offset 7, -4
 678 0002 00AF     		add	r7, sp, #0
 679              	.LCFI13:
 680              		.cfi_def_cfa_register 7
 220:../LSM9DS1_drivers.c **** 	//mRes = ((float) settings.mag.scale) / 32768.0;
 221:../LSM9DS1_drivers.c **** 	switch (settings.mag.scale)
 681              		.loc 1 221 0
 682 0004 40F20003 		movw	r3, #:lower16:settings
 683 0008 C0F20003 		movt	r3, #:upper16:settings
 684 000c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 685 0010 A3F10403 		sub	r3, r3, #4
 686 0014 0C2B     		cmp	r3, #12
 687 0016 49D8     		bhi	.L19
 688 0018 01A2     		adr	r2, .L25
 689 001a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 690 001e 00BF     		.align	2
 691              	.L25:
 692 0020 55000000 		.word	.L21+1
 693 0024 AD000000 		.word	.L19+1
 694 0028 AD000000 		.word	.L19+1
 695 002c AD000000 		.word	.L19+1
 696 0030 6B000000 		.word	.L22+1
 697 0034 AD000000 		.word	.L19+1
 698 0038 AD000000 		.word	.L19+1
 699 003c AD000000 		.word	.L19+1
 700 0040 81000000 		.word	.L23+1
 701 0044 AD000000 		.word	.L19+1
 702 0048 AD000000 		.word	.L19+1
 703 004c AD000000 		.word	.L19+1
 704 0050 97000000 		.word	.L24+1
 705              	.L21:
 222:../LSM9DS1_drivers.c **** 	{
 223:../LSM9DS1_drivers.c **** 		case 4:
 224:../LSM9DS1_drivers.c **** 			mRes = magSensitivity[0];
 706              		.loc 1 224 0
 707 0054 40F20003 		movw	r3, #:lower16:magSensitivity
 708 0058 C0F20003 		movt	r3, #:upper16:magSensitivity
 709 005c 1A68     		ldr	r2, [r3, #0]	@ float
 710 005e 40F20003 		movw	r3, #:lower16:mRes
 711 0062 C0F20003 		movt	r3, #:upper16:mRes
 712 0066 1A60     		str	r2, [r3, #0]	@ float
 225:../LSM9DS1_drivers.c **** 			break;
 713              		.loc 1 225 0
 714 0068 20E0     		b	.L19
 715              	.L22:
 226:../LSM9DS1_drivers.c **** 		case 8:
 227:../LSM9DS1_drivers.c **** 			mRes = magSensitivity[1];
 716              		.loc 1 227 0
 717 006a 40F20003 		movw	r3, #:lower16:magSensitivity
 718 006e C0F20003 		movt	r3, #:upper16:magSensitivity
 719 0072 5A68     		ldr	r2, [r3, #4]	@ float
 720 0074 40F20003 		movw	r3, #:lower16:mRes
 721 0078 C0F20003 		movt	r3, #:upper16:mRes
 722 007c 1A60     		str	r2, [r3, #0]	@ float
 228:../LSM9DS1_drivers.c **** 			break;
 723              		.loc 1 228 0
 724 007e 15E0     		b	.L19
 725              	.L23:
 229:../LSM9DS1_drivers.c **** 		case 12:
 230:../LSM9DS1_drivers.c **** 			mRes = magSensitivity[2];
 726              		.loc 1 230 0
 727 0080 40F20003 		movw	r3, #:lower16:magSensitivity
 728 0084 C0F20003 		movt	r3, #:upper16:magSensitivity
 729 0088 9A68     		ldr	r2, [r3, #8]	@ float
 730 008a 40F20003 		movw	r3, #:lower16:mRes
 731 008e C0F20003 		movt	r3, #:upper16:mRes
 732 0092 1A60     		str	r2, [r3, #0]	@ float
 231:../LSM9DS1_drivers.c **** 			break;
 733              		.loc 1 231 0
 734 0094 0AE0     		b	.L19
 735              	.L24:
 232:../LSM9DS1_drivers.c **** 		case 16:
 233:../LSM9DS1_drivers.c **** 			mRes = magSensitivity[3];
 736              		.loc 1 233 0
 737 0096 40F20003 		movw	r3, #:lower16:magSensitivity
 738 009a C0F20003 		movt	r3, #:upper16:magSensitivity
 739 009e DA68     		ldr	r2, [r3, #12]	@ float
 740 00a0 40F20003 		movw	r3, #:lower16:mRes
 741 00a4 C0F20003 		movt	r3, #:upper16:mRes
 742 00a8 1A60     		str	r2, [r3, #0]	@ float
 234:../LSM9DS1_drivers.c **** 			break;
 743              		.loc 1 234 0
 744 00aa 00BF     		nop
 745              	.L19:
 235:../LSM9DS1_drivers.c **** 	}
 236:../LSM9DS1_drivers.c **** 
 237:../LSM9DS1_drivers.c **** }
 746              		.loc 1 237 0
 747 00ac BD46     		mov	sp, r7
 748 00ae 80BC     		pop	{r7}
 749 00b0 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE117:
 753 00b2 00BF     		.section	.text.initI2C,"ax",%progbits
 754              		.align	2
 755              		.global	initI2C
 756              		.thumb
 757              		.thumb_func
 759              	initI2C:
 760              	.LFB118:
 238:../LSM9DS1_drivers.c **** 
 239:../LSM9DS1_drivers.c **** void initI2C(void)
 240:../LSM9DS1_drivers.c **** {
 761              		.loc 1 240 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766 0000 80B4     		push	{r7}
 767              	.LCFI14:
 768              		.cfi_def_cfa_offset 4
 769              		.cfi_offset 7, -4
 770 0002 00AF     		add	r7, sp, #0
 771              	.LCFI15:
 772              		.cfi_def_cfa_register 7
 241:../LSM9DS1_drivers.c **** 	;
 242:../LSM9DS1_drivers.c **** }
 773              		.loc 1 242 0
 774 0004 BD46     		mov	sp, r7
 775 0006 80BC     		pop	{r7}
 776 0008 7047     		bx	lr
 777              		.cfi_endproc
 778              	.LFE118:
 780 000a 00BF     		.section	.text.initSPI,"ax",%progbits
 781              		.align	2
 782              		.global	initSPI
 783              		.thumb
 784              		.thumb_func
 786              	initSPI:
 787              	.LFB119:
 243:../LSM9DS1_drivers.c **** 
 244:../LSM9DS1_drivers.c **** void initSPI(void)
 245:../LSM9DS1_drivers.c **** {
 788              		.loc 1 245 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 793 0000 80B4     		push	{r7}
 794              	.LCFI16:
 795              		.cfi_def_cfa_offset 4
 796              		.cfi_offset 7, -4
 797 0002 00AF     		add	r7, sp, #0
 798              	.LCFI17:
 799              		.cfi_def_cfa_register 7
 246:../LSM9DS1_drivers.c **** 	;
 247:../LSM9DS1_drivers.c **** }
 800              		.loc 1 247 0
 801 0004 BD46     		mov	sp, r7
 802 0006 80BC     		pop	{r7}
 803 0008 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE119:
 807 000a 00BF     		.section	.text.I2CreadByte,"ax",%progbits
 808              		.align	2
 809              		.global	I2CreadByte
 810              		.thumb
 811              		.thumb_func
 813              	I2CreadByte:
 814              	.LFB120:
 248:../LSM9DS1_drivers.c **** 
 249:../LSM9DS1_drivers.c **** uint8_t I2CreadByte(uint8_t address, uint8_t subAddress)
 250:../LSM9DS1_drivers.c **** {
 815              		.loc 1 250 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 16
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819 0000 80B5     		push	{r7, lr}
 820              	.LCFI18:
 821              		.cfi_def_cfa_offset 8
 822              		.cfi_offset 7, -8
 823              		.cfi_offset 14, -4
 824 0002 86B0     		sub	sp, sp, #24
 825              	.LCFI19:
 826              		.cfi_def_cfa_offset 32
 827 0004 02AF     		add	r7, sp, #8
 828              	.LCFI20:
 829              		.cfi_def_cfa 7, 24
 830 0006 0246     		mov	r2, r0
 831 0008 0B46     		mov	r3, r1
 832 000a FA71     		strb	r2, [r7, #7]
 833 000c BB71     		strb	r3, [r7, #6]
 251:../LSM9DS1_drivers.c **** 	//I2C001_DataType data1,data2,data3,data4,data5, data6, data7;
 252:../LSM9DS1_drivers.c **** 
 253:../LSM9DS1_drivers.c **** 	uint16_t DataReceive1 = 0x0000;
 834              		.loc 1 253 0
 835 000e 4FF00003 		mov	r3, #0
 836 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 254:../LSM9DS1_drivers.c **** 	addressTimer = address;
 837              		.loc 1 254 0
 838 0014 40F20003 		movw	r3, #:lower16:addressTimer
 839 0018 C0F20003 		movt	r3, #:upper16:addressTimer
 840 001c FA79     		ldrb	r2, [r7, #7]
 841 001e 1A70     		strb	r2, [r3, #0]
 255:../LSM9DS1_drivers.c **** 	subAddressTimer = subAddress;
 842              		.loc 1 255 0
 843 0020 40F20003 		movw	r3, #:lower16:subAddressTimer
 844 0024 C0F20003 		movt	r3, #:upper16:subAddressTimer
 845 0028 BA79     		ldrb	r2, [r7, #6]
 846 002a 1A70     		strb	r2, [r3, #0]
 256:../LSM9DS1_drivers.c **** 
 257:../LSM9DS1_drivers.c **** 	makeTimer(200, SYSTM001_PERIODIC, timerHandlerI2CreadByte, NULL, &Status, &TimerId);
 847              		.loc 1 257 0
 848 002c 40F20003 		movw	r3, #:lower16:Status
 849 0030 C0F20003 		movt	r3, #:upper16:Status
 850 0034 0093     		str	r3, [sp, #0]
 851 0036 40F20003 		movw	r3, #:lower16:TimerId
 852 003a C0F20003 		movt	r3, #:upper16:TimerId
 853 003e 0193     		str	r3, [sp, #4]
 854 0040 4FF0C800 		mov	r0, #200
 855 0044 4FF00101 		mov	r1, #1
 856 0048 40F20002 		movw	r2, #:lower16:timerHandlerI2CreadByte
 857 004c C0F20002 		movt	r2, #:upper16:timerHandlerI2CreadByte
 858 0050 4FF00003 		mov	r3, #0
 859 0054 FFF7FEFF 		bl	makeTimer
 860 0058 00E0     		b	.L31
 861              	.L33:
 258:../LSM9DS1_drivers.c **** 	while(1)
 259:../LSM9DS1_drivers.c **** 	{
 260:../LSM9DS1_drivers.c **** 		if(6 == indexI2CreadByte)
 261:../LSM9DS1_drivers.c **** 		{
 262:../LSM9DS1_drivers.c **** 			removeTimer(&Status, &TimerId);
 263:../LSM9DS1_drivers.c **** 			DataReceive1 = DataReceive2;
 264:../LSM9DS1_drivers.c **** 			indexI2CreadByte = 0;
 265:../LSM9DS1_drivers.c **** 			addressTimer = 0;
 266:../LSM9DS1_drivers.c **** 			subAddressTimer = 0;
 267:../LSM9DS1_drivers.c **** 			DataReceive2 = 0x0000;
 268:../LSM9DS1_drivers.c **** 
 269:../LSM9DS1_drivers.c **** 			Status = SYSTM001_ERROR;
 270:../LSM9DS1_drivers.c **** 			TimerId = 0;
 271:../LSM9DS1_drivers.c **** 			break;
 272:../LSM9DS1_drivers.c **** 		}
 273:../LSM9DS1_drivers.c **** 	}
 862              		.loc 1 273 0
 863 005a 00BF     		nop
 864              	.L31:
 260:../LSM9DS1_drivers.c **** 		if(6 == indexI2CreadByte)
 865              		.loc 1 260 0
 866 005c 40F20003 		movw	r3, #:lower16:indexI2CreadByte
 867 0060 C0F20003 		movt	r3, #:upper16:indexI2CreadByte
 868 0064 1B68     		ldr	r3, [r3, #0]
 869 0066 062B     		cmp	r3, #6
 870 0068 F7D1     		bne	.L33
 262:../LSM9DS1_drivers.c **** 			removeTimer(&Status, &TimerId);
 871              		.loc 1 262 0
 872 006a 40F20000 		movw	r0, #:lower16:Status
 873 006e C0F20000 		movt	r0, #:upper16:Status
 874 0072 40F20001 		movw	r1, #:lower16:TimerId
 875 0076 C0F20001 		movt	r1, #:upper16:TimerId
 876 007a FFF7FEFF 		bl	removeTimer
 263:../LSM9DS1_drivers.c **** 			DataReceive1 = DataReceive2;
 877              		.loc 1 263 0
 878 007e 40F20003 		movw	r3, #:lower16:DataReceive2
 879 0082 C0F20003 		movt	r3, #:upper16:DataReceive2
 880 0086 1B88     		ldrh	r3, [r3, #0]	@ movhi
 881 0088 FB81     		strh	r3, [r7, #14]	@ movhi
 264:../LSM9DS1_drivers.c **** 			indexI2CreadByte = 0;
 882              		.loc 1 264 0
 883 008a 40F20003 		movw	r3, #:lower16:indexI2CreadByte
 884 008e C0F20003 		movt	r3, #:upper16:indexI2CreadByte
 885 0092 4FF00002 		mov	r2, #0
 886 0096 1A60     		str	r2, [r3, #0]
 265:../LSM9DS1_drivers.c **** 			addressTimer = 0;
 887              		.loc 1 265 0
 888 0098 40F20003 		movw	r3, #:lower16:addressTimer
 889 009c C0F20003 		movt	r3, #:upper16:addressTimer
 890 00a0 4FF00002 		mov	r2, #0
 891 00a4 1A70     		strb	r2, [r3, #0]
 266:../LSM9DS1_drivers.c **** 			subAddressTimer = 0;
 892              		.loc 1 266 0
 893 00a6 40F20003 		movw	r3, #:lower16:subAddressTimer
 894 00aa C0F20003 		movt	r3, #:upper16:subAddressTimer
 895 00ae 4FF00002 		mov	r2, #0
 896 00b2 1A70     		strb	r2, [r3, #0]
 267:../LSM9DS1_drivers.c **** 			DataReceive2 = 0x0000;
 897              		.loc 1 267 0
 898 00b4 40F20003 		movw	r3, #:lower16:DataReceive2
 899 00b8 C0F20003 		movt	r3, #:upper16:DataReceive2
 900 00bc 4FF00002 		mov	r2, #0
 901 00c0 1A80     		strh	r2, [r3, #0]	@ movhi
 269:../LSM9DS1_drivers.c **** 			Status = SYSTM001_ERROR;
 902              		.loc 1 269 0
 903 00c2 40F20003 		movw	r3, #:lower16:Status
 904 00c6 C0F20003 		movt	r3, #:upper16:Status
 905 00ca 4FF00202 		mov	r2, #2
 906 00ce 1A60     		str	r2, [r3, #0]
 270:../LSM9DS1_drivers.c **** 			TimerId = 0;
 907              		.loc 1 270 0
 908 00d0 40F20003 		movw	r3, #:lower16:TimerId
 909 00d4 C0F20003 		movt	r3, #:upper16:TimerId
 910 00d8 4FF00002 		mov	r2, #0
 911 00dc 1A60     		str	r2, [r3, #0]
 271:../LSM9DS1_drivers.c **** 			break;
 912              		.loc 1 271 0
 913 00de 00BF     		nop
 274:../LSM9DS1_drivers.c **** 
 275:../LSM9DS1_drivers.c **** 	return (uint8_t)DataReceive1;
 914              		.loc 1 275 0
 915 00e0 FB89     		ldrh	r3, [r7, #14]	@ movhi
 916 00e2 DBB2     		uxtb	r3, r3
 276:../LSM9DS1_drivers.c **** }
 917              		.loc 1 276 0
 918 00e4 1846     		mov	r0, r3
 919 00e6 07F11007 		add	r7, r7, #16
 920 00ea BD46     		mov	sp, r7
 921 00ec 80BD     		pop	{r7, pc}
 922              		.cfi_endproc
 923              	.LFE120:
 925 00ee 00BF     		.section	.text.mReadByte,"ax",%progbits
 926              		.align	2
 927              		.global	mReadByte
 928              		.thumb
 929              		.thumb_func
 931              	mReadByte:
 932              	.LFB121:
 277:../LSM9DS1_drivers.c **** 
 278:../LSM9DS1_drivers.c **** 
 279:../LSM9DS1_drivers.c **** uint8_t mReadByte(uint8_t subAddress)
 280:../LSM9DS1_drivers.c **** {
 933              		.loc 1 280 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 8
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937 0000 80B5     		push	{r7, lr}
 938              	.LCFI21:
 939              		.cfi_def_cfa_offset 8
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 942 0002 82B0     		sub	sp, sp, #8
 943              	.LCFI22:
 944              		.cfi_def_cfa_offset 16
 945 0004 00AF     		add	r7, sp, #0
 946              	.LCFI23:
 947              		.cfi_def_cfa_register 7
 948 0006 0346     		mov	r3, r0
 949 0008 FB71     		strb	r3, [r7, #7]
 281:../LSM9DS1_drivers.c **** 	// Whether we're using I2C or SPI, read a byte using the
 282:../LSM9DS1_drivers.c **** 	// accelerometer-specific I2C address or SPI CS pin.
 283:../LSM9DS1_drivers.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 950              		.loc 1 283 0
 951 000a 40F20003 		movw	r3, #:lower16:settings
 952 000e C0F20003 		movt	r3, #:upper16:settings
 953 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 954 0014 012B     		cmp	r3, #1
 955 0016 0BD1     		bne	.L35
 284:../LSM9DS1_drivers.c **** 		return I2CreadByte(_mAddress, subAddress);
 956              		.loc 1 284 0
 957 0018 40F20003 		movw	r3, #:lower16:_mAddress
 958 001c C0F20003 		movt	r3, #:upper16:_mAddress
 959 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 960 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 961 0024 1046     		mov	r0, r2
 962 0026 1946     		mov	r1, r3
 963 0028 FFF7FEFF 		bl	I2CreadByte
 964 002c 0346     		mov	r3, r0
 965 002e 13E0     		b	.L36
 966              	.L35:
 285:../LSM9DS1_drivers.c **** 	else if (settings.device.commInterface == IMU_MODE_SPI)
 967              		.loc 1 285 0
 968 0030 40F20003 		movw	r3, #:lower16:settings
 969 0034 C0F20003 		movt	r3, #:upper16:settings
 970 0038 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 971 003a 002B     		cmp	r3, #0
 972 003c 0BD1     		bne	.L37
 286:../LSM9DS1_drivers.c **** 		return SPIreadByte(_mAddress, subAddress);
 973              		.loc 1 286 0
 974 003e 40F20003 		movw	r3, #:lower16:_mAddress
 975 0042 C0F20003 		movt	r3, #:upper16:_mAddress
 976 0046 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 977 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 978 004a 1046     		mov	r0, r2
 979 004c 1946     		mov	r1, r3
 980 004e FFF7FEFF 		bl	SPIreadByte
 981 0052 0346     		mov	r3, r0
 982 0054 00E0     		b	.L36
 983              	.L37:
 984 0056 FFE7     		b	.L34
 985              	.L36:
 986              	.L34:
 287:../LSM9DS1_drivers.c **** }
 987              		.loc 1 287 0
 988 0058 1846     		mov	r0, r3
 989 005a 07F10807 		add	r7, r7, #8
 990 005e BD46     		mov	sp, r7
 991 0060 80BD     		pop	{r7, pc}
 992              		.cfi_endproc
 993              	.LFE121:
 995 0062 00BF     		.section	.text.SPIreadByte,"ax",%progbits
 996              		.align	2
 997              		.global	SPIreadByte
 998              		.thumb
 999              		.thumb_func
 1001              	SPIreadByte:
 1002              	.LFB122:
 288:../LSM9DS1_drivers.c **** 
 289:../LSM9DS1_drivers.c **** uint8_t SPIreadByte(uint8_t csPin, uint8_t subAddress)
 290:../LSM9DS1_drivers.c **** {
 1003              		.loc 1 290 0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 8
 1006              		@ frame_needed = 1, uses_anonymous_args = 0
 1007              		@ link register save eliminated.
 1008 0000 80B4     		push	{r7}
 1009              	.LCFI24:
 1010              		.cfi_def_cfa_offset 4
 1011              		.cfi_offset 7, -4
 1012 0002 83B0     		sub	sp, sp, #12
 1013              	.LCFI25:
 1014              		.cfi_def_cfa_offset 16
 1015 0004 00AF     		add	r7, sp, #0
 1016              	.LCFI26:
 1017              		.cfi_def_cfa_register 7
 1018 0006 0246     		mov	r2, r0
 1019 0008 0B46     		mov	r3, r1
 1020 000a FA71     		strb	r2, [r7, #7]
 1021 000c BB71     		strb	r3, [r7, #6]
 291:../LSM9DS1_drivers.c **** 	;
 292:../LSM9DS1_drivers.c **** }
 1022              		.loc 1 292 0
 1023 000e 1846     		mov	r0, r3
 1024 0010 07F10C07 		add	r7, r7, #12
 1025 0014 BD46     		mov	sp, r7
 1026 0016 80BC     		pop	{r7}
 1027 0018 7047     		bx	lr
 1028              		.cfi_endproc
 1029              	.LFE122:
 1031 001a 00BF     		.section	.text.xgReadByte,"ax",%progbits
 1032              		.align	2
 1033              		.global	xgReadByte
 1034              		.thumb
 1035              		.thumb_func
 1037              	xgReadByte:
 1038              	.LFB123:
 293:../LSM9DS1_drivers.c **** 
 294:../LSM9DS1_drivers.c **** uint8_t xgReadByte(uint8_t subAddress)
 295:../LSM9DS1_drivers.c **** {
 1039              		.loc 1 295 0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 8
 1042              		@ frame_needed = 1, uses_anonymous_args = 0
 1043 0000 80B5     		push	{r7, lr}
 1044              	.LCFI27:
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 7, -8
 1047              		.cfi_offset 14, -4
 1048 0002 82B0     		sub	sp, sp, #8
 1049              	.LCFI28:
 1050              		.cfi_def_cfa_offset 16
 1051 0004 00AF     		add	r7, sp, #0
 1052              	.LCFI29:
 1053              		.cfi_def_cfa_register 7
 1054 0006 0346     		mov	r3, r0
 1055 0008 FB71     		strb	r3, [r7, #7]
 296:../LSM9DS1_drivers.c **** 	// Whether we're using I2C or SPI, read a byte using the
 297:../LSM9DS1_drivers.c **** 	// gyro-specific I2C address or SPI CS pin.
 298:../LSM9DS1_drivers.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 1056              		.loc 1 298 0
 1057 000a 40F20003 		movw	r3, #:lower16:settings
 1058 000e C0F20003 		movt	r3, #:upper16:settings
 1059 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1060 0014 012B     		cmp	r3, #1
 1061 0016 0BD1     		bne	.L40
 299:../LSM9DS1_drivers.c **** 		return I2CreadByte(_xgAddress, subAddress);
 1062              		.loc 1 299 0
 1063 0018 40F20003 		movw	r3, #:lower16:_xgAddress
 1064 001c C0F20003 		movt	r3, #:upper16:_xgAddress
 1065 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1066 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1067 0024 1046     		mov	r0, r2
 1068 0026 1946     		mov	r1, r3
 1069 0028 FFF7FEFF 		bl	I2CreadByte
 1070 002c 0346     		mov	r3, r0
 1071 002e 13E0     		b	.L41
 1072              	.L40:
 300:../LSM9DS1_drivers.c **** 	else if (settings.device.commInterface == IMU_MODE_SPI)
 1073              		.loc 1 300 0
 1074 0030 40F20003 		movw	r3, #:lower16:settings
 1075 0034 C0F20003 		movt	r3, #:upper16:settings
 1076 0038 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1077 003a 002B     		cmp	r3, #0
 1078 003c 0BD1     		bne	.L42
 301:../LSM9DS1_drivers.c **** 		return SPIreadByte(_xgAddress, subAddress);
 1079              		.loc 1 301 0
 1080 003e 40F20003 		movw	r3, #:lower16:_xgAddress
 1081 0042 C0F20003 		movt	r3, #:upper16:_xgAddress
 1082 0046 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1083 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1084 004a 1046     		mov	r0, r2
 1085 004c 1946     		mov	r1, r3
 1086 004e FFF7FEFF 		bl	SPIreadByte
 1087 0052 0346     		mov	r3, r0
 1088 0054 00E0     		b	.L41
 1089              	.L42:
 1090 0056 FFE7     		b	.L39
 1091              	.L41:
 1092              	.L39:
 302:../LSM9DS1_drivers.c **** }
 1093              		.loc 1 302 0
 1094 0058 1846     		mov	r0, r3
 1095 005a 07F10807 		add	r7, r7, #8
 1096 005e BD46     		mov	sp, r7
 1097 0060 80BD     		pop	{r7, pc}
 1098              		.cfi_endproc
 1099              	.LFE123:
 1101 0062 00BF     		.section	.text.xgReadBytes,"ax",%progbits
 1102              		.align	2
 1103              		.global	xgReadBytes
 1104              		.thumb
 1105              		.thumb_func
 1107              	xgReadBytes:
 1108              	.LFB124:
 303:../LSM9DS1_drivers.c **** 
 304:../LSM9DS1_drivers.c **** void xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
 305:../LSM9DS1_drivers.c **** {
 1109              		.loc 1 305 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 8
 1112              		@ frame_needed = 1, uses_anonymous_args = 0
 1113 0000 80B5     		push	{r7, lr}
 1114              	.LCFI30:
 1115              		.cfi_def_cfa_offset 8
 1116              		.cfi_offset 7, -8
 1117              		.cfi_offset 14, -4
 1118 0002 82B0     		sub	sp, sp, #8
 1119              	.LCFI31:
 1120              		.cfi_def_cfa_offset 16
 1121 0004 00AF     		add	r7, sp, #0
 1122              	.LCFI32:
 1123              		.cfi_def_cfa_register 7
 1124 0006 3960     		str	r1, [r7, #0]
 1125 0008 1346     		mov	r3, r2
 1126 000a 0246     		mov	r2, r0
 1127 000c FA71     		strb	r2, [r7, #7]
 1128 000e BB71     		strb	r3, [r7, #6]
 306:../LSM9DS1_drivers.c **** 	// Whether we're using I2C or SPI, read multiple bytes using the
 307:../LSM9DS1_drivers.c **** 	// gyro-specific I2C address or SPI CS pin.
 308:../LSM9DS1_drivers.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 1129              		.loc 1 308 0
 1130 0010 40F20003 		movw	r3, #:lower16:settings
 1131 0014 C0F20003 		movt	r3, #:upper16:settings
 1132 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1133 001a 012B     		cmp	r3, #1
 1134 001c 0CD1     		bne	.L44
 309:../LSM9DS1_drivers.c **** 		I2CreadBytes(_xgAddress, subAddress, dest, count);
 1135              		.loc 1 309 0
 1136 001e 40F20003 		movw	r3, #:lower16:_xgAddress
 1137 0022 C0F20003 		movt	r3, #:upper16:_xgAddress
 1138 0026 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1139 0028 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1140 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1141 002c 0846     		mov	r0, r1
 1142 002e 1146     		mov	r1, r2
 1143 0030 3A68     		ldr	r2, [r7, #0]
 1144 0032 FFF7FEFF 		bl	I2CreadBytes
 1145 0036 12E0     		b	.L43
 1146              	.L44:
 310:../LSM9DS1_drivers.c **** 		//I2CreadBytes1(_xgAddress, subAddress, dest, count);
 311:../LSM9DS1_drivers.c **** 	else if (settings.device.commInterface == IMU_MODE_SPI)
 1147              		.loc 1 311 0
 1148 0038 40F20003 		movw	r3, #:lower16:settings
 1149 003c C0F20003 		movt	r3, #:upper16:settings
 1150 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1151 0042 002B     		cmp	r3, #0
 1152 0044 0BD1     		bne	.L43
 312:../LSM9DS1_drivers.c **** 		SPIreadBytes(_xgAddress, subAddress, dest, count);
 1153              		.loc 1 312 0
 1154 0046 40F20003 		movw	r3, #:lower16:_xgAddress
 1155 004a C0F20003 		movt	r3, #:upper16:_xgAddress
 1156 004e 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1157 0050 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1158 0052 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1159 0054 0846     		mov	r0, r1
 1160 0056 1146     		mov	r1, r2
 1161 0058 3A68     		ldr	r2, [r7, #0]
 1162 005a FFF7FEFF 		bl	SPIreadBytes
 1163              	.L43:
 313:../LSM9DS1_drivers.c **** }
 1164              		.loc 1 313 0
 1165 005e 07F10807 		add	r7, r7, #8
 1166 0062 BD46     		mov	sp, r7
 1167 0064 80BD     		pop	{r7, pc}
 1168              		.cfi_endproc
 1169              	.LFE124:
 1171              		.section	.text.I2CreadBytes,"ax",%progbits
 1172              		.align	2
 1173              		.global	I2CreadBytes
 1174              		.thumb
 1175              		.thumb_func
 1177              	I2CreadBytes:
 1178              	.LFB125:
 314:../LSM9DS1_drivers.c **** 
 315:../LSM9DS1_drivers.c **** uint8_t I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
 316:../LSM9DS1_drivers.c **** {
 1179              		.loc 1 316 0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 16
 1182              		@ frame_needed = 1, uses_anonymous_args = 0
 1183 0000 80B5     		push	{r7, lr}
 1184              	.LCFI33:
 1185              		.cfi_def_cfa_offset 8
 1186              		.cfi_offset 7, -8
 1187              		.cfi_offset 14, -4
 1188 0002 86B0     		sub	sp, sp, #24
 1189              	.LCFI34:
 1190              		.cfi_def_cfa_offset 32
 1191 0004 02AF     		add	r7, sp, #8
 1192              	.LCFI35:
 1193              		.cfi_def_cfa 7, 24
 1194 0006 3A60     		str	r2, [r7, #0]
 1195 0008 0246     		mov	r2, r0
 1196 000a FA71     		strb	r2, [r7, #7]
 1197 000c 0A46     		mov	r2, r1
 1198 000e BA71     		strb	r2, [r7, #6]
 1199 0010 7B71     		strb	r3, [r7, #5]
 317:../LSM9DS1_drivers.c **** 	addressTimerI2CReadBytes = address;
 1200              		.loc 1 317 0
 1201 0012 40F20003 		movw	r3, #:lower16:addressTimerI2CReadBytes
 1202 0016 C0F20003 		movt	r3, #:upper16:addressTimerI2CReadBytes
 1203 001a FA79     		ldrb	r2, [r7, #7]
 1204 001c 1A70     		strb	r2, [r3, #0]
 318:../LSM9DS1_drivers.c **** 	subAddressTimerI2CReadBytes = subAddress;
 1205              		.loc 1 318 0
 1206 001e 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1207 0022 C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1208 0026 BA79     		ldrb	r2, [r7, #6]
 1209 0028 1A70     		strb	r2, [r3, #0]
 319:../LSM9DS1_drivers.c **** 	makeTimer(5, SYSTM001_PERIODIC, timerHandlerI2CreadBytes, NULL, &StatusReadBytes, &TimerIdReadByte
 1210              		.loc 1 319 0
 1211 002a 40F20003 		movw	r3, #:lower16:StatusReadBytes
 1212 002e C0F20003 		movt	r3, #:upper16:StatusReadBytes
 1213 0032 0093     		str	r3, [sp, #0]
 1214 0034 40F20003 		movw	r3, #:lower16:TimerIdReadBytes
 1215 0038 C0F20003 		movt	r3, #:upper16:TimerIdReadBytes
 1216 003c 0193     		str	r3, [sp, #4]
 1217 003e 4FF00500 		mov	r0, #5
 1218 0042 4FF00101 		mov	r1, #1
 1219 0046 40F20002 		movw	r2, #:lower16:timerHandlerI2CreadBytes
 1220 004a C0F20002 		movt	r2, #:upper16:timerHandlerI2CreadBytes
 1221 004e 4FF00003 		mov	r3, #0
 1222 0052 FFF7FEFF 		bl	makeTimer
 1223 0056 00E0     		b	.L52
 1224              	.L54:
 320:../LSM9DS1_drivers.c **** 
 321:../LSM9DS1_drivers.c **** 	while(1)
 322:../LSM9DS1_drivers.c **** 	{
 323:../LSM9DS1_drivers.c **** 		if(5 == indexI2CreadBytes)
 324:../LSM9DS1_drivers.c **** 		{
 325:../LSM9DS1_drivers.c **** 			removeTimer(&StatusReadBytes, &TimerIdReadBytes);
 326:../LSM9DS1_drivers.c **** 
 327:../LSM9DS1_drivers.c **** 			indexI2CreadBytes = 0;
 328:../LSM9DS1_drivers.c **** 			addressTimerI2CReadBytes = 0;
 329:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = 0;
 330:../LSM9DS1_drivers.c **** 
 331:../LSM9DS1_drivers.c **** 			StatusReadBytes = SYSTM001_ERROR;
 332:../LSM9DS1_drivers.c **** 			TimerIdReadBytes = 0;
 333:../LSM9DS1_drivers.c **** 
 334:../LSM9DS1_drivers.c **** 			addressTimerI2CReadBytes = address;
 335:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = subAddress;
 336:../LSM9DS1_drivers.c **** 
 337:../LSM9DS1_drivers.c **** 			indexAccel = indexAccel + 1;
 338:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = subAddressTimerI2CReadBytes + indexAccel;
 339:../LSM9DS1_drivers.c **** 
 340:../LSM9DS1_drivers.c **** 			if(indexAccel == count)
 341:../LSM9DS1_drivers.c **** 			{
 342:../LSM9DS1_drivers.c **** 				/*dest[0] = (uint8_t)accelerationXYZ[0];
 343:../LSM9DS1_drivers.c **** 				dest[1] = (uint8_t)accelerationXYZ[1];
 344:../LSM9DS1_drivers.c **** 				dest[2] = (uint8_t)accelerationXYZ[2];
 345:../LSM9DS1_drivers.c **** 				dest[3] = (uint8_t)accelerationXYZ[3];
 346:../LSM9DS1_drivers.c **** 				dest[4] = (uint8_t)accelerationXYZ[4];
 347:../LSM9DS1_drivers.c **** 				dest[5] = (uint8_t)accelerationXYZ[5];*/
 348:../LSM9DS1_drivers.c **** 				int k = 0;
 349:../LSM9DS1_drivers.c **** 				for(k = 0; k < count; k++)
 350:../LSM9DS1_drivers.c **** 				{
 351:../LSM9DS1_drivers.c **** 					dest[k] = (uint8_t)accelerationXYZ[k];
 352:../LSM9DS1_drivers.c **** 				}
 353:../LSM9DS1_drivers.c **** 
 354:../LSM9DS1_drivers.c **** 				/*for(k = 0; k < 6; k++)
 355:../LSM9DS1_drivers.c **** 				{
 356:../LSM9DS1_drivers.c **** 					accelerationXYZ[k] = 0;
 357:../LSM9DS1_drivers.c **** 				}*/
 358:../LSM9DS1_drivers.c **** 				indexAccel = 0;
 359:../LSM9DS1_drivers.c **** 
 360:../LSM9DS1_drivers.c **** 				break;
 361:../LSM9DS1_drivers.c **** 			}
 362:../LSM9DS1_drivers.c **** 			else
 363:../LSM9DS1_drivers.c **** 			{
 364:../LSM9DS1_drivers.c **** 				makeTimer(5, SYSTM001_PERIODIC, timerHandlerI2CreadBytes, NULL, &StatusReadBytes, &TimerIdReadB
 365:../LSM9DS1_drivers.c **** 			}
 366:../LSM9DS1_drivers.c **** 		}
 367:../LSM9DS1_drivers.c **** 	}
 1225              		.loc 1 367 0
 1226 0058 00BF     		nop
 1227              	.L52:
 323:../LSM9DS1_drivers.c **** 		if(5 == indexI2CreadBytes)
 1228              		.loc 1 323 0
 1229 005a 40F20003 		movw	r3, #:lower16:indexI2CreadBytes
 1230 005e C0F20003 		movt	r3, #:upper16:indexI2CreadBytes
 1231 0062 1B68     		ldr	r3, [r3, #0]
 1232 0064 052B     		cmp	r3, #5
 1233 0066 F7D1     		bne	.L54
 325:../LSM9DS1_drivers.c **** 			removeTimer(&StatusReadBytes, &TimerIdReadBytes);
 1234              		.loc 1 325 0
 1235 0068 40F20000 		movw	r0, #:lower16:StatusReadBytes
 1236 006c C0F20000 		movt	r0, #:upper16:StatusReadBytes
 1237 0070 40F20001 		movw	r1, #:lower16:TimerIdReadBytes
 1238 0074 C0F20001 		movt	r1, #:upper16:TimerIdReadBytes
 1239 0078 FFF7FEFF 		bl	removeTimer
 327:../LSM9DS1_drivers.c **** 			indexI2CreadBytes = 0;
 1240              		.loc 1 327 0
 1241 007c 40F20003 		movw	r3, #:lower16:indexI2CreadBytes
 1242 0080 C0F20003 		movt	r3, #:upper16:indexI2CreadBytes
 1243 0084 4FF00002 		mov	r2, #0
 1244 0088 1A60     		str	r2, [r3, #0]
 328:../LSM9DS1_drivers.c **** 			addressTimerI2CReadBytes = 0;
 1245              		.loc 1 328 0
 1246 008a 40F20003 		movw	r3, #:lower16:addressTimerI2CReadBytes
 1247 008e C0F20003 		movt	r3, #:upper16:addressTimerI2CReadBytes
 1248 0092 4FF00002 		mov	r2, #0
 1249 0096 1A70     		strb	r2, [r3, #0]
 329:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = 0;
 1250              		.loc 1 329 0
 1251 0098 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1252 009c C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1253 00a0 4FF00002 		mov	r2, #0
 1254 00a4 1A70     		strb	r2, [r3, #0]
 331:../LSM9DS1_drivers.c **** 			StatusReadBytes = SYSTM001_ERROR;
 1255              		.loc 1 331 0
 1256 00a6 40F20003 		movw	r3, #:lower16:StatusReadBytes
 1257 00aa C0F20003 		movt	r3, #:upper16:StatusReadBytes
 1258 00ae 4FF00202 		mov	r2, #2
 1259 00b2 1A60     		str	r2, [r3, #0]
 332:../LSM9DS1_drivers.c **** 			TimerIdReadBytes = 0;
 1260              		.loc 1 332 0
 1261 00b4 40F20003 		movw	r3, #:lower16:TimerIdReadBytes
 1262 00b8 C0F20003 		movt	r3, #:upper16:TimerIdReadBytes
 1263 00bc 4FF00002 		mov	r2, #0
 1264 00c0 1A60     		str	r2, [r3, #0]
 334:../LSM9DS1_drivers.c **** 			addressTimerI2CReadBytes = address;
 1265              		.loc 1 334 0
 1266 00c2 40F20003 		movw	r3, #:lower16:addressTimerI2CReadBytes
 1267 00c6 C0F20003 		movt	r3, #:upper16:addressTimerI2CReadBytes
 1268 00ca FA79     		ldrb	r2, [r7, #7]
 1269 00cc 1A70     		strb	r2, [r3, #0]
 335:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = subAddress;
 1270              		.loc 1 335 0
 1271 00ce 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1272 00d2 C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1273 00d6 BA79     		ldrb	r2, [r7, #6]
 1274 00d8 1A70     		strb	r2, [r3, #0]
 337:../LSM9DS1_drivers.c **** 			indexAccel = indexAccel + 1;
 1275              		.loc 1 337 0
 1276 00da 40F20003 		movw	r3, #:lower16:indexAccel
 1277 00de C0F20003 		movt	r3, #:upper16:indexAccel
 1278 00e2 1B68     		ldr	r3, [r3, #0]
 1279 00e4 03F10102 		add	r2, r3, #1
 1280 00e8 40F20003 		movw	r3, #:lower16:indexAccel
 1281 00ec C0F20003 		movt	r3, #:upper16:indexAccel
 1282 00f0 1A60     		str	r2, [r3, #0]
 338:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = subAddressTimerI2CReadBytes + indexAccel;
 1283              		.loc 1 338 0
 1284 00f2 40F20003 		movw	r3, #:lower16:indexAccel
 1285 00f6 C0F20003 		movt	r3, #:upper16:indexAccel
 1286 00fa 1B68     		ldr	r3, [r3, #0]
 1287 00fc DAB2     		uxtb	r2, r3
 1288 00fe 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1289 0102 C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1290 0106 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1291 0108 D318     		adds	r3, r2, r3
 1292 010a DAB2     		uxtb	r2, r3
 1293 010c 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1294 0110 C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1295 0114 1A70     		strb	r2, [r3, #0]
 340:../LSM9DS1_drivers.c **** 			if(indexAccel == count)
 1296              		.loc 1 340 0
 1297 0116 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1298 0118 40F20003 		movw	r3, #:lower16:indexAccel
 1299 011c C0F20003 		movt	r3, #:upper16:indexAccel
 1300 0120 1B68     		ldr	r3, [r3, #0]
 1301 0122 9A42     		cmp	r2, r3
 1302 0124 23D1     		bne	.L48
 1303              	.LBB3:
 348:../LSM9DS1_drivers.c **** 				int k = 0;
 1304              		.loc 1 348 0
 1305 0126 4FF00003 		mov	r3, #0
 1306 012a FB60     		str	r3, [r7, #12]
 349:../LSM9DS1_drivers.c **** 				for(k = 0; k < count; k++)
 1307              		.loc 1 349 0
 1308 012c 4FF00003 		mov	r3, #0
 1309 0130 FB60     		str	r3, [r7, #12]
 1310 0132 0FE0     		b	.L49
 1311              	.L50:
 351:../LSM9DS1_drivers.c **** 					dest[k] = (uint8_t)accelerationXYZ[k];
 1312              		.loc 1 351 0 discriminator 2
 1313 0134 FB68     		ldr	r3, [r7, #12]
 1314 0136 3A68     		ldr	r2, [r7, #0]
 1315 0138 D218     		adds	r2, r2, r3
 1316 013a 40F20003 		movw	r3, #:lower16:accelerationXYZ
 1317 013e C0F20003 		movt	r3, #:upper16:accelerationXYZ
 1318 0142 F968     		ldr	r1, [r7, #12]
 1319 0144 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1320 0148 DBB2     		uxtb	r3, r3
 1321 014a 1370     		strb	r3, [r2, #0]
 349:../LSM9DS1_drivers.c **** 				for(k = 0; k < count; k++)
 1322              		.loc 1 349 0 discriminator 2
 1323 014c FB68     		ldr	r3, [r7, #12]
 1324 014e 03F10103 		add	r3, r3, #1
 1325 0152 FB60     		str	r3, [r7, #12]
 1326              	.L49:
 349:../LSM9DS1_drivers.c **** 				for(k = 0; k < count; k++)
 1327              		.loc 1 349 0 is_stmt 0 discriminator 1
 1328 0154 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1329 0156 FB68     		ldr	r3, [r7, #12]
 1330 0158 9A42     		cmp	r2, r3
 1331 015a EBDC     		bgt	.L50
 358:../LSM9DS1_drivers.c **** 				indexAccel = 0;
 1332              		.loc 1 358 0 is_stmt 1
 1333 015c 40F20003 		movw	r3, #:lower16:indexAccel
 1334 0160 C0F20003 		movt	r3, #:upper16:indexAccel
 1335 0164 4FF00002 		mov	r2, #0
 1336 0168 1A60     		str	r2, [r3, #0]
 360:../LSM9DS1_drivers.c **** 				break;
 1337              		.loc 1 360 0
 1338 016a 00BF     		nop
 1339 016c 16E0     		b	.L53
 1340              	.L48:
 1341              	.LBE3:
 364:../LSM9DS1_drivers.c **** 				makeTimer(5, SYSTM001_PERIODIC, timerHandlerI2CreadBytes, NULL, &StatusReadBytes, &TimerIdReadB
 1342              		.loc 1 364 0
 1343 016e 40F20003 		movw	r3, #:lower16:StatusReadBytes
 1344 0172 C0F20003 		movt	r3, #:upper16:StatusReadBytes
 1345 0176 0093     		str	r3, [sp, #0]
 1346 0178 40F20003 		movw	r3, #:lower16:TimerIdReadBytes
 1347 017c C0F20003 		movt	r3, #:upper16:TimerIdReadBytes
 1348 0180 0193     		str	r3, [sp, #4]
 1349 0182 4FF00500 		mov	r0, #5
 1350 0186 4FF00101 		mov	r1, #1
 1351 018a 40F20002 		movw	r2, #:lower16:timerHandlerI2CreadBytes
 1352 018e C0F20002 		movt	r2, #:upper16:timerHandlerI2CreadBytes
 1353 0192 4FF00003 		mov	r3, #0
 1354 0196 FFF7FEFF 		bl	makeTimer
 1355              		.loc 1 367 0
 1356 019a 5DE7     		b	.L54
 1357              	.L53:
 368:../LSM9DS1_drivers.c **** }
 1358              		.loc 1 368 0
 1359 019c 1846     		mov	r0, r3
 1360 019e 07F11007 		add	r7, r7, #16
 1361 01a2 BD46     		mov	sp, r7
 1362 01a4 80BD     		pop	{r7, pc}
 1363              		.cfi_endproc
 1364              	.LFE125:
 1366 01a6 00BF     		.section	.text.I2CreadBytes1,"ax",%progbits
 1367              		.align	2
 1368              		.global	I2CreadBytes1
 1369              		.thumb
 1370              		.thumb_func
 1372              	I2CreadBytes1:
 1373              	.LFB126:
 369:../LSM9DS1_drivers.c **** 
 370:../LSM9DS1_drivers.c **** uint8_t I2CreadBytes1(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
 371:../LSM9DS1_drivers.c **** {
 1374              		.loc 1 371 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 16
 1377              		@ frame_needed = 1, uses_anonymous_args = 0
 1378 0000 80B5     		push	{r7, lr}
 1379              	.LCFI36:
 1380              		.cfi_def_cfa_offset 8
 1381              		.cfi_offset 7, -8
 1382              		.cfi_offset 14, -4
 1383 0002 86B0     		sub	sp, sp, #24
 1384              	.LCFI37:
 1385              		.cfi_def_cfa_offset 32
 1386 0004 02AF     		add	r7, sp, #8
 1387              	.LCFI38:
 1388              		.cfi_def_cfa 7, 24
 1389 0006 3A60     		str	r2, [r7, #0]
 1390 0008 0246     		mov	r2, r0
 1391 000a FA71     		strb	r2, [r7, #7]
 1392 000c 0A46     		mov	r2, r1
 1393 000e BA71     		strb	r2, [r7, #6]
 1394 0010 7B71     		strb	r3, [r7, #5]
 372:../LSM9DS1_drivers.c **** 	addressTimerI2CReadBytes = address;
 1395              		.loc 1 372 0
 1396 0012 40F20003 		movw	r3, #:lower16:addressTimerI2CReadBytes
 1397 0016 C0F20003 		movt	r3, #:upper16:addressTimerI2CReadBytes
 1398 001a FA79     		ldrb	r2, [r7, #7]
 1399 001c 1A70     		strb	r2, [r3, #0]
 373:../LSM9DS1_drivers.c **** 	subAddressTimerI2CReadBytes = subAddress;
 1400              		.loc 1 373 0
 1401 001e 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1402 0022 C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1403 0026 BA79     		ldrb	r2, [r7, #6]
 1404 0028 1A70     		strb	r2, [r3, #0]
 374:../LSM9DS1_drivers.c **** 	makeTimer(200, SYSTM001_PERIODIC, timerHandlerI2CreadBytes1, NULL, &StatusReadBytes, &TimerIdReadB
 1405              		.loc 1 374 0
 1406 002a 40F20003 		movw	r3, #:lower16:StatusReadBytes
 1407 002e C0F20003 		movt	r3, #:upper16:StatusReadBytes
 1408 0032 0093     		str	r3, [sp, #0]
 1409 0034 40F20003 		movw	r3, #:lower16:TimerIdReadBytes
 1410 0038 C0F20003 		movt	r3, #:upper16:TimerIdReadBytes
 1411 003c 0193     		str	r3, [sp, #4]
 1412 003e 4FF0C800 		mov	r0, #200
 1413 0042 4FF00101 		mov	r1, #1
 1414 0046 40F20002 		movw	r2, #:lower16:timerHandlerI2CreadBytes1
 1415 004a C0F20002 		movt	r2, #:upper16:timerHandlerI2CreadBytes1
 1416 004e 4FF00003 		mov	r3, #0
 1417 0052 FFF7FEFF 		bl	makeTimer
 1418 0056 00E0     		b	.L61
 1419              	.L63:
 375:../LSM9DS1_drivers.c **** 
 376:../LSM9DS1_drivers.c **** 	while(1)
 377:../LSM9DS1_drivers.c **** 	{
 378:../LSM9DS1_drivers.c **** 		if(8 == indexI2CreadBytes)
 379:../LSM9DS1_drivers.c **** 		{
 380:../LSM9DS1_drivers.c **** 			removeTimer(&StatusReadBytes, &TimerIdReadBytes);
 381:../LSM9DS1_drivers.c **** 
 382:../LSM9DS1_drivers.c **** 			indexI2CreadBytes = 0;
 383:../LSM9DS1_drivers.c **** 			addressTimerI2CReadBytes = 0;
 384:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = 0;
 385:../LSM9DS1_drivers.c **** 
 386:../LSM9DS1_drivers.c **** 			StatusReadBytes = SYSTM001_ERROR;
 387:../LSM9DS1_drivers.c **** 			TimerIdReadBytes = 0;
 388:../LSM9DS1_drivers.c **** 
 389:../LSM9DS1_drivers.c **** 			addressTimerI2CReadBytes = address;
 390:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = subAddress;
 391:../LSM9DS1_drivers.c **** 
 392:../LSM9DS1_drivers.c **** 			//indexAccel = indexAccel + 1;
 393:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = subAddressTimerI2CReadBytes + indexAccel;
 394:../LSM9DS1_drivers.c **** 
 395:../LSM9DS1_drivers.c **** 			if(indexAccel == count)
 396:../LSM9DS1_drivers.c **** 			{
 397:../LSM9DS1_drivers.c **** 				/*dest[0] = (uint8_t)accelerationXYZ[0];
 398:../LSM9DS1_drivers.c **** 				dest[1] = (uint8_t)accelerationXYZ[1];
 399:../LSM9DS1_drivers.c **** 				dest[2] = (uint8_t)accelerationXYZ[2];
 400:../LSM9DS1_drivers.c **** 				dest[3] = (uint8_t)accelerationXYZ[3];
 401:../LSM9DS1_drivers.c **** 				dest[4] = (uint8_t)accelerationXYZ[4];
 402:../LSM9DS1_drivers.c **** 				dest[5] = (uint8_t)accelerationXYZ[5];*/
 403:../LSM9DS1_drivers.c **** 				int k = 0;
 404:../LSM9DS1_drivers.c **** 				for(k = 0; k < count; k++)
 405:../LSM9DS1_drivers.c **** 				{
 406:../LSM9DS1_drivers.c **** 					dest[k] = (uint8_t)accelerationXYZ[k];
 407:../LSM9DS1_drivers.c **** 				}
 408:../LSM9DS1_drivers.c **** 
 409:../LSM9DS1_drivers.c **** 				/*for(k = 0; k < 6; k++)
 410:../LSM9DS1_drivers.c **** 				{
 411:../LSM9DS1_drivers.c **** 					accelerationXYZ[k] = 0;
 412:../LSM9DS1_drivers.c **** 				}*/
 413:../LSM9DS1_drivers.c **** 				indexAccel = 0;
 414:../LSM9DS1_drivers.c **** 
 415:../LSM9DS1_drivers.c **** 				break;
 416:../LSM9DS1_drivers.c **** 			}
 417:../LSM9DS1_drivers.c **** 			else
 418:../LSM9DS1_drivers.c **** 			{
 419:../LSM9DS1_drivers.c **** 				makeTimer(100, SYSTM001_PERIODIC, timerHandlerI2CreadBytes1, NULL, &StatusReadBytes, &TimerIdRe
 420:../LSM9DS1_drivers.c **** 			}
 421:../LSM9DS1_drivers.c **** 		}
 422:../LSM9DS1_drivers.c **** 	}
 1420              		.loc 1 422 0
 1421 0058 00BF     		nop
 1422              	.L61:
 378:../LSM9DS1_drivers.c **** 		if(8 == indexI2CreadBytes)
 1423              		.loc 1 378 0
 1424 005a 40F20003 		movw	r3, #:lower16:indexI2CreadBytes
 1425 005e C0F20003 		movt	r3, #:upper16:indexI2CreadBytes
 1426 0062 1B68     		ldr	r3, [r3, #0]
 1427 0064 082B     		cmp	r3, #8
 1428 0066 F7D1     		bne	.L63
 380:../LSM9DS1_drivers.c **** 			removeTimer(&StatusReadBytes, &TimerIdReadBytes);
 1429              		.loc 1 380 0
 1430 0068 40F20000 		movw	r0, #:lower16:StatusReadBytes
 1431 006c C0F20000 		movt	r0, #:upper16:StatusReadBytes
 1432 0070 40F20001 		movw	r1, #:lower16:TimerIdReadBytes
 1433 0074 C0F20001 		movt	r1, #:upper16:TimerIdReadBytes
 1434 0078 FFF7FEFF 		bl	removeTimer
 382:../LSM9DS1_drivers.c **** 			indexI2CreadBytes = 0;
 1435              		.loc 1 382 0
 1436 007c 40F20003 		movw	r3, #:lower16:indexI2CreadBytes
 1437 0080 C0F20003 		movt	r3, #:upper16:indexI2CreadBytes
 1438 0084 4FF00002 		mov	r2, #0
 1439 0088 1A60     		str	r2, [r3, #0]
 383:../LSM9DS1_drivers.c **** 			addressTimerI2CReadBytes = 0;
 1440              		.loc 1 383 0
 1441 008a 40F20003 		movw	r3, #:lower16:addressTimerI2CReadBytes
 1442 008e C0F20003 		movt	r3, #:upper16:addressTimerI2CReadBytes
 1443 0092 4FF00002 		mov	r2, #0
 1444 0096 1A70     		strb	r2, [r3, #0]
 384:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = 0;
 1445              		.loc 1 384 0
 1446 0098 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1447 009c C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1448 00a0 4FF00002 		mov	r2, #0
 1449 00a4 1A70     		strb	r2, [r3, #0]
 386:../LSM9DS1_drivers.c **** 			StatusReadBytes = SYSTM001_ERROR;
 1450              		.loc 1 386 0
 1451 00a6 40F20003 		movw	r3, #:lower16:StatusReadBytes
 1452 00aa C0F20003 		movt	r3, #:upper16:StatusReadBytes
 1453 00ae 4FF00202 		mov	r2, #2
 1454 00b2 1A60     		str	r2, [r3, #0]
 387:../LSM9DS1_drivers.c **** 			TimerIdReadBytes = 0;
 1455              		.loc 1 387 0
 1456 00b4 40F20003 		movw	r3, #:lower16:TimerIdReadBytes
 1457 00b8 C0F20003 		movt	r3, #:upper16:TimerIdReadBytes
 1458 00bc 4FF00002 		mov	r2, #0
 1459 00c0 1A60     		str	r2, [r3, #0]
 389:../LSM9DS1_drivers.c **** 			addressTimerI2CReadBytes = address;
 1460              		.loc 1 389 0
 1461 00c2 40F20003 		movw	r3, #:lower16:addressTimerI2CReadBytes
 1462 00c6 C0F20003 		movt	r3, #:upper16:addressTimerI2CReadBytes
 1463 00ca FA79     		ldrb	r2, [r7, #7]
 1464 00cc 1A70     		strb	r2, [r3, #0]
 390:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = subAddress;
 1465              		.loc 1 390 0
 1466 00ce 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1467 00d2 C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1468 00d6 BA79     		ldrb	r2, [r7, #6]
 1469 00d8 1A70     		strb	r2, [r3, #0]
 393:../LSM9DS1_drivers.c **** 			subAddressTimerI2CReadBytes = subAddressTimerI2CReadBytes + indexAccel;
 1470              		.loc 1 393 0
 1471 00da 40F20003 		movw	r3, #:lower16:indexAccel
 1472 00de C0F20003 		movt	r3, #:upper16:indexAccel
 1473 00e2 1B68     		ldr	r3, [r3, #0]
 1474 00e4 DAB2     		uxtb	r2, r3
 1475 00e6 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1476 00ea C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1477 00ee 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1478 00f0 D318     		adds	r3, r2, r3
 1479 00f2 DAB2     		uxtb	r2, r3
 1480 00f4 40F20003 		movw	r3, #:lower16:subAddressTimerI2CReadBytes
 1481 00f8 C0F20003 		movt	r3, #:upper16:subAddressTimerI2CReadBytes
 1482 00fc 1A70     		strb	r2, [r3, #0]
 395:../LSM9DS1_drivers.c **** 			if(indexAccel == count)
 1483              		.loc 1 395 0
 1484 00fe 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1485 0100 40F20003 		movw	r3, #:lower16:indexAccel
 1486 0104 C0F20003 		movt	r3, #:upper16:indexAccel
 1487 0108 1B68     		ldr	r3, [r3, #0]
 1488 010a 9A42     		cmp	r2, r3
 1489 010c 23D1     		bne	.L57
 1490              	.LBB4:
 403:../LSM9DS1_drivers.c **** 				int k = 0;
 1491              		.loc 1 403 0
 1492 010e 4FF00003 		mov	r3, #0
 1493 0112 FB60     		str	r3, [r7, #12]
 404:../LSM9DS1_drivers.c **** 				for(k = 0; k < count; k++)
 1494              		.loc 1 404 0
 1495 0114 4FF00003 		mov	r3, #0
 1496 0118 FB60     		str	r3, [r7, #12]
 1497 011a 0FE0     		b	.L58
 1498              	.L59:
 406:../LSM9DS1_drivers.c **** 					dest[k] = (uint8_t)accelerationXYZ[k];
 1499              		.loc 1 406 0 discriminator 2
 1500 011c FB68     		ldr	r3, [r7, #12]
 1501 011e 3A68     		ldr	r2, [r7, #0]
 1502 0120 D218     		adds	r2, r2, r3
 1503 0122 40F20003 		movw	r3, #:lower16:accelerationXYZ
 1504 0126 C0F20003 		movt	r3, #:upper16:accelerationXYZ
 1505 012a F968     		ldr	r1, [r7, #12]
 1506 012c 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1507 0130 DBB2     		uxtb	r3, r3
 1508 0132 1370     		strb	r3, [r2, #0]
 404:../LSM9DS1_drivers.c **** 				for(k = 0; k < count; k++)
 1509              		.loc 1 404 0 discriminator 2
 1510 0134 FB68     		ldr	r3, [r7, #12]
 1511 0136 03F10103 		add	r3, r3, #1
 1512 013a FB60     		str	r3, [r7, #12]
 1513              	.L58:
 404:../LSM9DS1_drivers.c **** 				for(k = 0; k < count; k++)
 1514              		.loc 1 404 0 is_stmt 0 discriminator 1
 1515 013c 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1516 013e FB68     		ldr	r3, [r7, #12]
 1517 0140 9A42     		cmp	r2, r3
 1518 0142 EBDC     		bgt	.L59
 413:../LSM9DS1_drivers.c **** 				indexAccel = 0;
 1519              		.loc 1 413 0 is_stmt 1
 1520 0144 40F20003 		movw	r3, #:lower16:indexAccel
 1521 0148 C0F20003 		movt	r3, #:upper16:indexAccel
 1522 014c 4FF00002 		mov	r2, #0
 1523 0150 1A60     		str	r2, [r3, #0]
 415:../LSM9DS1_drivers.c **** 				break;
 1524              		.loc 1 415 0
 1525 0152 00BF     		nop
 1526 0154 16E0     		b	.L62
 1527              	.L57:
 1528              	.LBE4:
 419:../LSM9DS1_drivers.c **** 				makeTimer(100, SYSTM001_PERIODIC, timerHandlerI2CreadBytes1, NULL, &StatusReadBytes, &TimerIdRe
 1529              		.loc 1 419 0
 1530 0156 40F20003 		movw	r3, #:lower16:StatusReadBytes
 1531 015a C0F20003 		movt	r3, #:upper16:StatusReadBytes
 1532 015e 0093     		str	r3, [sp, #0]
 1533 0160 40F20003 		movw	r3, #:lower16:TimerIdReadBytes
 1534 0164 C0F20003 		movt	r3, #:upper16:TimerIdReadBytes
 1535 0168 0193     		str	r3, [sp, #4]
 1536 016a 4FF06400 		mov	r0, #100
 1537 016e 4FF00101 		mov	r1, #1
 1538 0172 40F20002 		movw	r2, #:lower16:timerHandlerI2CreadBytes1
 1539 0176 C0F20002 		movt	r2, #:upper16:timerHandlerI2CreadBytes1
 1540 017a 4FF00003 		mov	r3, #0
 1541 017e FFF7FEFF 		bl	makeTimer
 1542              		.loc 1 422 0
 1543 0182 69E7     		b	.L63
 1544              	.L62:
 423:../LSM9DS1_drivers.c **** }
 1545              		.loc 1 423 0
 1546 0184 1846     		mov	r0, r3
 1547 0186 07F11007 		add	r7, r7, #16
 1548 018a BD46     		mov	sp, r7
 1549 018c 80BD     		pop	{r7, pc}
 1550              		.cfi_endproc
 1551              	.LFE126:
 1553 018e 00BF     		.section	.text.SPIreadBytes,"ax",%progbits
 1554              		.align	2
 1555              		.global	SPIreadBytes
 1556              		.thumb
 1557              		.thumb_func
 1559              	SPIreadBytes:
 1560              	.LFB127:
 424:../LSM9DS1_drivers.c **** 
 425:../LSM9DS1_drivers.c **** void SPIreadBytes(uint8_t csPin, uint8_t subAddress, uint8_t * dest, uint8_t count)
 426:../LSM9DS1_drivers.c **** {
 1561              		.loc 1 426 0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 8
 1564              		@ frame_needed = 1, uses_anonymous_args = 0
 1565              		@ link register save eliminated.
 1566 0000 80B4     		push	{r7}
 1567              	.LCFI39:
 1568              		.cfi_def_cfa_offset 4
 1569              		.cfi_offset 7, -4
 1570 0002 83B0     		sub	sp, sp, #12
 1571              	.LCFI40:
 1572              		.cfi_def_cfa_offset 16
 1573 0004 00AF     		add	r7, sp, #0
 1574              	.LCFI41:
 1575              		.cfi_def_cfa_register 7
 1576 0006 3A60     		str	r2, [r7, #0]
 1577 0008 0246     		mov	r2, r0
 1578 000a FA71     		strb	r2, [r7, #7]
 1579 000c 0A46     		mov	r2, r1
 1580 000e BA71     		strb	r2, [r7, #6]
 1581 0010 7B71     		strb	r3, [r7, #5]
 427:../LSM9DS1_drivers.c **** 	;
 428:../LSM9DS1_drivers.c **** }
 1582              		.loc 1 428 0
 1583 0012 07F10C07 		add	r7, r7, #12
 1584 0016 BD46     		mov	sp, r7
 1585 0018 80BC     		pop	{r7}
 1586 001a 7047     		bx	lr
 1587              		.cfi_endproc
 1588              	.LFE127:
 1590              		.section	.text.initGyro,"ax",%progbits
 1591              		.align	2
 1592              		.global	initGyro
 1593              		.thumb
 1594              		.thumb_func
 1596              	initGyro:
 1597              	.LFB128:
 429:../LSM9DS1_drivers.c **** 
 430:../LSM9DS1_drivers.c **** void initGyro(void)
 431:../LSM9DS1_drivers.c **** {
 1598              		.loc 1 431 0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 8
 1601              		@ frame_needed = 1, uses_anonymous_args = 0
 1602 0000 80B5     		push	{r7, lr}
 1603              	.LCFI42:
 1604              		.cfi_def_cfa_offset 8
 1605              		.cfi_offset 7, -8
 1606              		.cfi_offset 14, -4
 1607 0002 82B0     		sub	sp, sp, #8
 1608              	.LCFI43:
 1609              		.cfi_def_cfa_offset 16
 1610 0004 00AF     		add	r7, sp, #0
 1611              	.LCFI44:
 1612              		.cfi_def_cfa_register 7
 432:../LSM9DS1_drivers.c **** 	uint8_t tempRegValue = 0;
 1613              		.loc 1 432 0
 1614 0006 4FF00003 		mov	r3, #0
 1615 000a FB71     		strb	r3, [r7, #7]
 433:../LSM9DS1_drivers.c **** 
 434:../LSM9DS1_drivers.c **** 	// CTRL_REG1_G (Default value: 0x00)
 435:../LSM9DS1_drivers.c **** 	// [ODR_G2][ODR_G1][ODR_G0][FS_G1][FS_G0][0][BW_G1][BW_G0]
 436:../LSM9DS1_drivers.c **** 	// ODR_G[2:0] - Output data rate selection
 437:../LSM9DS1_drivers.c **** 	// FS_G[1:0] - Gyroscope full-scale selection
 438:../LSM9DS1_drivers.c **** 	// BW_G[1:0] - Gyroscope bandwidth selection
 439:../LSM9DS1_drivers.c **** 
 440:../LSM9DS1_drivers.c **** 	// To disable gyro, set sample rate bits to 0. We'll only set sample
 441:../LSM9DS1_drivers.c **** 	// rate if the gyro is enabled.
 442:../LSM9DS1_drivers.c **** 	if (settings.gyro.enabled)
 1616              		.loc 1 442 0
 1617 000c 40F20003 		movw	r3, #:lower16:settings
 1618 0010 C0F20003 		movt	r3, #:upper16:settings
 1619 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1620 0016 002B     		cmp	r3, #0
 1621 0018 07D0     		beq	.L66
 443:../LSM9DS1_drivers.c **** 	{
 444:../LSM9DS1_drivers.c **** 		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 1622              		.loc 1 444 0
 1623 001a 40F20003 		movw	r3, #:lower16:settings
 1624 001e C0F20003 		movt	r3, #:upper16:settings
 1625 0022 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1626 0024 4FEA4313 		lsl	r3, r3, #5
 1627 0028 FB71     		strb	r3, [r7, #7]
 1628              	.L66:
 445:../LSM9DS1_drivers.c **** 	}
 446:../LSM9DS1_drivers.c **** 
 447:../LSM9DS1_drivers.c **** 	switch (settings.gyro.scale)
 1629              		.loc 1 447 0
 1630 002a 40F20003 		movw	r3, #:lower16:settings
 1631 002e C0F20003 		movt	r3, #:upper16:settings
 1632 0032 DB88     		ldrh	r3, [r3, #6]
 1633 0034 B3F5FA7F 		cmp	r3, #500
 1634 0038 03D0     		beq	.L68
 1635 003a B3F5FA6F 		cmp	r3, #2000
 1636 003e 05D0     		beq	.L69
 1637 0040 09E0     		b	.L67
 1638              	.L68:
 448:../LSM9DS1_drivers.c **** 	{
 449:../LSM9DS1_drivers.c **** 		case 500:
 450:../LSM9DS1_drivers.c **** 			tempRegValue |= (0x1 << 3);
 1639              		.loc 1 450 0
 1640 0042 FB79     		ldrb	r3, [r7, #7]
 1641 0044 43F00803 		orr	r3, r3, #8
 1642 0048 FB71     		strb	r3, [r7, #7]
 451:../LSM9DS1_drivers.c **** 			break;
 1643              		.loc 1 451 0
 1644 004a 04E0     		b	.L67
 1645              	.L69:
 452:../LSM9DS1_drivers.c **** 		case 2000:
 453:../LSM9DS1_drivers.c **** 			tempRegValue |= (0x3 << 3);
 1646              		.loc 1 453 0
 1647 004c FB79     		ldrb	r3, [r7, #7]
 1648 004e 43F01803 		orr	r3, r3, #24
 1649 0052 FB71     		strb	r3, [r7, #7]
 454:../LSM9DS1_drivers.c **** 			break;
 1650              		.loc 1 454 0
 1651 0054 00BF     		nop
 1652              	.L67:
 455:../LSM9DS1_drivers.c **** 		// Otherwise we'll set it to 245 dps (0x0 << 4)
 456:../LSM9DS1_drivers.c **** 	}
 457:../LSM9DS1_drivers.c **** 	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 1653              		.loc 1 457 0
 1654 0056 40F20003 		movw	r3, #:lower16:settings
 1655 005a C0F20003 		movt	r3, #:upper16:settings
 1656 005e 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 1657 0060 DBB2     		uxtb	r3, r3
 1658 0062 03F00303 		and	r3, r3, #3
 1659 0066 DAB2     		uxtb	r2, r3
 1660 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1661 006a 1343     		orrs	r3, r3, r2
 1662 006c DBB2     		uxtb	r3, r3
 1663 006e FB71     		strb	r3, [r7, #7]
 458:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG1_G, tempRegValue);
 1664              		.loc 1 458 0
 1665 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1666 0072 4FF01000 		mov	r0, #16
 1667 0076 1946     		mov	r1, r3
 1668 0078 FFF7FEFF 		bl	xgWriteByte
 459:../LSM9DS1_drivers.c **** 
 460:../LSM9DS1_drivers.c **** 	// CTRL_REG2_G (Default value: 0x00)
 461:../LSM9DS1_drivers.c **** 	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
 462:../LSM9DS1_drivers.c **** 	// INT_SEL[1:0] - INT selection configuration
 463:../LSM9DS1_drivers.c **** 	// OUT_SEL[1:0] - Out selection configuration
 464:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG2_G, 0x00);
 1669              		.loc 1 464 0
 1670 007c 4FF01100 		mov	r0, #17
 1671 0080 4FF00001 		mov	r1, #0
 1672 0084 FFF7FEFF 		bl	xgWriteByte
 465:../LSM9DS1_drivers.c **** 
 466:../LSM9DS1_drivers.c **** 	// CTRL_REG3_G (Default value: 0x00)
 467:../LSM9DS1_drivers.c **** 	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
 468:../LSM9DS1_drivers.c **** 	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
 469:../LSM9DS1_drivers.c **** 	// HP_EN - HPF enable (0:disabled, 1: enabled)
 470:../LSM9DS1_drivers.c **** 	// HPCF_G[3:0] - HPF cutoff frequency
 471:../LSM9DS1_drivers.c **** 	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 1673              		.loc 1 471 0
 1674 0088 40F20003 		movw	r3, #:lower16:settings
 1675 008c C0F20003 		movt	r3, #:upper16:settings
 1676 0090 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1677 0092 002B     		cmp	r3, #0
 1678 0094 02D0     		beq	.L70
 1679              		.loc 1 471 0 is_stmt 0 discriminator 1
 1680 0096 4FF08003 		mov	r3, #128
 1681 009a 01E0     		b	.L71
 1682              	.L70:
 1683              		.loc 1 471 0 discriminator 2
 1684 009c 4FF00003 		mov	r3, #0
 1685              	.L71:
 1686              		.loc 1 471 0 discriminator 3
 1687 00a0 FB71     		strb	r3, [r7, #7]
 472:../LSM9DS1_drivers.c **** 	if (settings.gyro.HPFEnable)
 1688              		.loc 1 472 0 is_stmt 1 discriminator 3
 1689 00a2 40F20003 		movw	r3, #:lower16:settings
 1690 00a6 C0F20003 		movt	r3, #:upper16:settings
 1691 00aa DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1692 00ac 002B     		cmp	r3, #0
 1693 00ae 0FD0     		beq	.L72
 473:../LSM9DS1_drivers.c **** 	{
 474:../LSM9DS1_drivers.c **** 		tempRegValue |= ((1<<6) | (settings.gyro.HPFCutoff & 0x0F));
 1694              		.loc 1 474 0
 1695 00b0 40F20003 		movw	r3, #:lower16:settings
 1696 00b4 C0F20003 		movt	r3, #:upper16:settings
 1697 00b8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1698 00ba DBB2     		uxtb	r3, r3
 1699 00bc 03F00F03 		and	r3, r3, #15
 1700 00c0 DBB2     		uxtb	r3, r3
 1701 00c2 43F04003 		orr	r3, r3, #64
 1702 00c6 DAB2     		uxtb	r2, r3
 1703 00c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1704 00ca 1343     		orrs	r3, r3, r2
 1705 00cc DBB2     		uxtb	r3, r3
 1706 00ce FB71     		strb	r3, [r7, #7]
 1707              	.L72:
 475:../LSM9DS1_drivers.c **** 	}
 476:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG3_G, tempRegValue);
 1708              		.loc 1 476 0
 1709 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1710 00d2 4FF01200 		mov	r0, #18
 1711 00d6 1946     		mov	r1, r3
 1712 00d8 FFF7FEFF 		bl	xgWriteByte
 477:../LSM9DS1_drivers.c **** 
 478:../LSM9DS1_drivers.c **** 	// CTRL_REG4 (Default value: 0x38)
 479:../LSM9DS1_drivers.c **** 	// [0][0][Zen_G][Yen_G][Xen_G][0][LIR_XL1][4D_XL1]
 480:../LSM9DS1_drivers.c **** 	// Zen_G - Z-axis output enable (0:disable, 1:enable)
 481:../LSM9DS1_drivers.c **** 	// Yen_G - Y-axis output enable (0:disable, 1:enable)
 482:../LSM9DS1_drivers.c **** 	// Xen_G - X-axis output enable (0:disable, 1:enable)
 483:../LSM9DS1_drivers.c **** 	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
 484:../LSM9DS1_drivers.c **** 	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
 485:../LSM9DS1_drivers.c **** 	tempRegValue = 0;
 1713              		.loc 1 485 0
 1714 00dc 4FF00003 		mov	r3, #0
 1715 00e0 FB71     		strb	r3, [r7, #7]
 486:../LSM9DS1_drivers.c **** 	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 1716              		.loc 1 486 0
 1717 00e2 40F20003 		movw	r3, #:lower16:settings
 1718 00e6 C0F20003 		movt	r3, #:upper16:settings
 1719 00ea DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 1720 00ec 002B     		cmp	r3, #0
 1721 00ee 03D0     		beq	.L73
 1722              		.loc 1 486 0 is_stmt 0 discriminator 1
 1723 00f0 FB79     		ldrb	r3, [r7, #7]
 1724 00f2 43F02003 		orr	r3, r3, #32
 1725 00f6 FB71     		strb	r3, [r7, #7]
 1726              	.L73:
 487:../LSM9DS1_drivers.c **** 	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 1727              		.loc 1 487 0 is_stmt 1
 1728 00f8 40F20003 		movw	r3, #:lower16:settings
 1729 00fc C0F20003 		movt	r3, #:upper16:settings
 1730 0100 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1731 0102 002B     		cmp	r3, #0
 1732 0104 03D0     		beq	.L74
 1733              		.loc 1 487 0 is_stmt 0 discriminator 1
 1734 0106 FB79     		ldrb	r3, [r7, #7]
 1735 0108 43F01003 		orr	r3, r3, #16
 1736 010c FB71     		strb	r3, [r7, #7]
 1737              	.L74:
 488:../LSM9DS1_drivers.c **** 	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 1738              		.loc 1 488 0 is_stmt 1
 1739 010e 40F20003 		movw	r3, #:lower16:settings
 1740 0112 C0F20003 		movt	r3, #:upper16:settings
 1741 0116 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1742 0118 002B     		cmp	r3, #0
 1743 011a 03D0     		beq	.L75
 1744              		.loc 1 488 0 is_stmt 0 discriminator 1
 1745 011c FB79     		ldrb	r3, [r7, #7]
 1746 011e 43F00803 		orr	r3, r3, #8
 1747 0122 FB71     		strb	r3, [r7, #7]
 1748              	.L75:
 489:../LSM9DS1_drivers.c **** 	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 1749              		.loc 1 489 0 is_stmt 1
 1750 0124 40F20003 		movw	r3, #:lower16:settings
 1751 0128 C0F20003 		movt	r3, #:upper16:settings
 1752 012c 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1753 012e 002B     		cmp	r3, #0
 1754 0130 03D0     		beq	.L76
 1755              		.loc 1 489 0 is_stmt 0 discriminator 1
 1756 0132 FB79     		ldrb	r3, [r7, #7]
 1757 0134 43F00203 		orr	r3, r3, #2
 1758 0138 FB71     		strb	r3, [r7, #7]
 1759              	.L76:
 490:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG4, tempRegValue);
 1760              		.loc 1 490 0 is_stmt 1
 1761 013a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1762 013c 4FF01E00 		mov	r0, #30
 1763 0140 1946     		mov	r1, r3
 1764 0142 FFF7FEFF 		bl	xgWriteByte
 491:../LSM9DS1_drivers.c **** 
 492:../LSM9DS1_drivers.c **** 	// ORIENT_CFG_G (Default value: 0x00)
 493:../LSM9DS1_drivers.c **** 	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
 494:../LSM9DS1_drivers.c **** 	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
 495:../LSM9DS1_drivers.c **** 	// Orient [2:0] - Directional user orientation selection
 496:../LSM9DS1_drivers.c **** 	tempRegValue = 0;
 1765              		.loc 1 496 0
 1766 0146 4FF00003 		mov	r3, #0
 1767 014a FB71     		strb	r3, [r7, #7]
 497:../LSM9DS1_drivers.c **** 	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 1768              		.loc 1 497 0
 1769 014c 40F20003 		movw	r3, #:lower16:settings
 1770 0150 C0F20003 		movt	r3, #:upper16:settings
 1771 0154 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 1772 0156 002B     		cmp	r3, #0
 1773 0158 03D0     		beq	.L77
 1774              		.loc 1 497 0 is_stmt 0 discriminator 1
 1775 015a FB79     		ldrb	r3, [r7, #7]
 1776 015c 43F02003 		orr	r3, r3, #32
 1777 0160 FB71     		strb	r3, [r7, #7]
 1778              	.L77:
 498:../LSM9DS1_drivers.c **** 	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 1779              		.loc 1 498 0 is_stmt 1
 1780 0162 40F20003 		movw	r3, #:lower16:settings
 1781 0166 C0F20003 		movt	r3, #:upper16:settings
 1782 016a 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1783 016c 002B     		cmp	r3, #0
 1784 016e 03D0     		beq	.L78
 1785              		.loc 1 498 0 is_stmt 0 discriminator 1
 1786 0170 FB79     		ldrb	r3, [r7, #7]
 1787 0172 43F01003 		orr	r3, r3, #16
 1788 0176 FB71     		strb	r3, [r7, #7]
 1789              	.L78:
 499:../LSM9DS1_drivers.c **** 	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 1790              		.loc 1 499 0 is_stmt 1
 1791 0178 40F20003 		movw	r3, #:lower16:settings
 1792 017c C0F20003 		movt	r3, #:upper16:settings
 1793 0180 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 1794 0182 002B     		cmp	r3, #0
 1795 0184 03D0     		beq	.L79
 1796              		.loc 1 499 0 is_stmt 0 discriminator 1
 1797 0186 FB79     		ldrb	r3, [r7, #7]
 1798 0188 43F00803 		orr	r3, r3, #8
 1799 018c FB71     		strb	r3, [r7, #7]
 1800              	.L79:
 500:../LSM9DS1_drivers.c **** 	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 1801              		.loc 1 500 0 is_stmt 1
 1802 018e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1803 0190 4FF01300 		mov	r0, #19
 1804 0194 1946     		mov	r1, r3
 1805 0196 FFF7FEFF 		bl	xgWriteByte
 501:../LSM9DS1_drivers.c **** }
 1806              		.loc 1 501 0
 1807 019a 07F10807 		add	r7, r7, #8
 1808 019e BD46     		mov	sp, r7
 1809 01a0 80BD     		pop	{r7, pc}
 1810              		.cfi_endproc
 1811              	.LFE128:
 1813 01a2 00BF     		.section	.text.xgWriteByte,"ax",%progbits
 1814              		.align	2
 1815              		.global	xgWriteByte
 1816              		.thumb
 1817              		.thumb_func
 1819              	xgWriteByte:
 1820              	.LFB129:
 502:../LSM9DS1_drivers.c **** 
 503:../LSM9DS1_drivers.c **** 
 504:../LSM9DS1_drivers.c **** void xgWriteByte(uint8_t subAddress, uint8_t data)
 505:../LSM9DS1_drivers.c **** {
 1821              		.loc 1 505 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 8
 1824              		@ frame_needed = 1, uses_anonymous_args = 0
 1825 0000 80B5     		push	{r7, lr}
 1826              	.LCFI45:
 1827              		.cfi_def_cfa_offset 8
 1828              		.cfi_offset 7, -8
 1829              		.cfi_offset 14, -4
 1830 0002 82B0     		sub	sp, sp, #8
 1831              	.LCFI46:
 1832              		.cfi_def_cfa_offset 16
 1833 0004 00AF     		add	r7, sp, #0
 1834              	.LCFI47:
 1835              		.cfi_def_cfa_register 7
 1836 0006 0246     		mov	r2, r0
 1837 0008 0B46     		mov	r3, r1
 1838 000a FA71     		strb	r2, [r7, #7]
 1839 000c BB71     		strb	r3, [r7, #6]
 506:../LSM9DS1_drivers.c **** 	// Whether we're using I2C or SPI, write a byte using the
 507:../LSM9DS1_drivers.c **** 	// gyro-specific I2C address or SPI CS pin.
 508:../LSM9DS1_drivers.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 1840              		.loc 1 508 0
 1841 000e 40F20003 		movw	r3, #:lower16:settings
 1842 0012 C0F20003 		movt	r3, #:upper16:settings
 1843 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1844 0018 012B     		cmp	r3, #1
 1845 001a 0BD1     		bne	.L80
 509:../LSM9DS1_drivers.c **** 	{
 510:../LSM9DS1_drivers.c **** 		I2CwriteByte(_xgAddress, subAddress, data);
 1846              		.loc 1 510 0
 1847 001c 40F20003 		movw	r3, #:lower16:_xgAddress
 1848 0020 C0F20003 		movt	r3, #:upper16:_xgAddress
 1849 0024 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1850 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1851 0028 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1852 002a 0846     		mov	r0, r1
 1853 002c 1146     		mov	r1, r2
 1854 002e 1A46     		mov	r2, r3
 1855 0030 FFF7FEFF 		bl	I2CwriteByte
 1856              	.L80:
 511:../LSM9DS1_drivers.c **** 	}
 512:../LSM9DS1_drivers.c **** }
 1857              		.loc 1 512 0
 1858 0034 07F10807 		add	r7, r7, #8
 1859 0038 BD46     		mov	sp, r7
 1860 003a 80BD     		pop	{r7, pc}
 1861              		.cfi_endproc
 1862              	.LFE129:
 1864              		.section	.text.I2CwriteByte,"ax",%progbits
 1865              		.align	2
 1866              		.global	I2CwriteByte
 1867              		.thumb
 1868              		.thumb_func
 1870              	I2CwriteByte:
 1871              	.LFB130:
 513:../LSM9DS1_drivers.c **** 
 514:../LSM9DS1_drivers.c **** void I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
 515:../LSM9DS1_drivers.c **** {
 1872              		.loc 1 515 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 8
 1875              		@ frame_needed = 1, uses_anonymous_args = 0
 1876 0000 80B5     		push	{r7, lr}
 1877              	.LCFI48:
 1878              		.cfi_def_cfa_offset 8
 1879              		.cfi_offset 7, -8
 1880              		.cfi_offset 14, -4
 1881 0002 84B0     		sub	sp, sp, #16
 1882              	.LCFI49:
 1883              		.cfi_def_cfa_offset 24
 1884 0004 02AF     		add	r7, sp, #8
 1885              	.LCFI50:
 1886              		.cfi_def_cfa 7, 16
 1887 0006 1346     		mov	r3, r2
 1888 0008 0246     		mov	r2, r0
 1889 000a FA71     		strb	r2, [r7, #7]
 1890 000c 0A46     		mov	r2, r1
 1891 000e BA71     		strb	r2, [r7, #6]
 1892 0010 7B71     		strb	r3, [r7, #5]
 516:../LSM9DS1_drivers.c **** 	addressTimerWrite = address;
 1893              		.loc 1 516 0
 1894 0012 40F20003 		movw	r3, #:lower16:addressTimerWrite
 1895 0016 C0F20003 		movt	r3, #:upper16:addressTimerWrite
 1896 001a FA79     		ldrb	r2, [r7, #7]
 1897 001c 1A70     		strb	r2, [r3, #0]
 517:../LSM9DS1_drivers.c **** 	subAddressTimerWrite = subAddress;
 1898              		.loc 1 517 0
 1899 001e 40F20003 		movw	r3, #:lower16:subAddressTimerWrite
 1900 0022 C0F20003 		movt	r3, #:upper16:subAddressTimerWrite
 1901 0026 BA79     		ldrb	r2, [r7, #6]
 1902 0028 1A70     		strb	r2, [r3, #0]
 518:../LSM9DS1_drivers.c **** 	dataWrite = data;
 1903              		.loc 1 518 0
 1904 002a 40F20003 		movw	r3, #:lower16:dataWrite
 1905 002e C0F20003 		movt	r3, #:upper16:dataWrite
 1906 0032 7A79     		ldrb	r2, [r7, #5]
 1907 0034 1A70     		strb	r2, [r3, #0]
 519:../LSM9DS1_drivers.c **** 
 520:../LSM9DS1_drivers.c **** 	makeTimer(50, SYSTM001_PERIODIC, timerHandlerI2CwriteByte, NULL, &WriteTimerStatus, &WriteTimerId)
 1908              		.loc 1 520 0
 1909 0036 40F20003 		movw	r3, #:lower16:WriteTimerStatus
 1910 003a C0F20003 		movt	r3, #:upper16:WriteTimerStatus
 1911 003e 0093     		str	r3, [sp, #0]
 1912 0040 40F20003 		movw	r3, #:lower16:WriteTimerId
 1913 0044 C0F20003 		movt	r3, #:upper16:WriteTimerId
 1914 0048 0193     		str	r3, [sp, #4]
 1915 004a 4FF03200 		mov	r0, #50
 1916 004e 4FF00101 		mov	r1, #1
 1917 0052 40F20002 		movw	r2, #:lower16:timerHandlerI2CwriteByte
 1918 0056 C0F20002 		movt	r2, #:upper16:timerHandlerI2CwriteByte
 1919 005a 4FF00003 		mov	r3, #0
 1920 005e FFF7FEFF 		bl	makeTimer
 1921 0062 00E0     		b	.L85
 1922              	.L86:
 521:../LSM9DS1_drivers.c **** 
 522:../LSM9DS1_drivers.c **** 	while(1)
 523:../LSM9DS1_drivers.c **** 	{
 524:../LSM9DS1_drivers.c **** 		if(4 == indexI2CwriteByte)
 525:../LSM9DS1_drivers.c **** 		{
 526:../LSM9DS1_drivers.c **** 			removeTimer(&WriteTimerStatus, &WriteTimerId);
 527:../LSM9DS1_drivers.c **** 			indexI2CwriteByte = 0;
 528:../LSM9DS1_drivers.c **** 			addressTimerWrite = 0;
 529:../LSM9DS1_drivers.c **** 			subAddressTimerWrite = 0;
 530:../LSM9DS1_drivers.c **** 			WriteTimerStatus = SYSTM001_ERROR;
 531:../LSM9DS1_drivers.c **** 			WriteTimerId = 0;
 532:../LSM9DS1_drivers.c **** 			break;
 533:../LSM9DS1_drivers.c **** 		}
 534:../LSM9DS1_drivers.c **** 	}
 1923              		.loc 1 534 0
 1924 0064 00BF     		nop
 1925              	.L85:
 524:../LSM9DS1_drivers.c **** 		if(4 == indexI2CwriteByte)
 1926              		.loc 1 524 0
 1927 0066 40F20003 		movw	r3, #:lower16:indexI2CwriteByte
 1928 006a C0F20003 		movt	r3, #:upper16:indexI2CwriteByte
 1929 006e 1B68     		ldr	r3, [r3, #0]
 1930 0070 042B     		cmp	r3, #4
 1931 0072 F7D1     		bne	.L86
 526:../LSM9DS1_drivers.c **** 			removeTimer(&WriteTimerStatus, &WriteTimerId);
 1932              		.loc 1 526 0
 1933 0074 40F20000 		movw	r0, #:lower16:WriteTimerStatus
 1934 0078 C0F20000 		movt	r0, #:upper16:WriteTimerStatus
 1935 007c 40F20001 		movw	r1, #:lower16:WriteTimerId
 1936 0080 C0F20001 		movt	r1, #:upper16:WriteTimerId
 1937 0084 FFF7FEFF 		bl	removeTimer
 527:../LSM9DS1_drivers.c **** 			indexI2CwriteByte = 0;
 1938              		.loc 1 527 0
 1939 0088 40F20003 		movw	r3, #:lower16:indexI2CwriteByte
 1940 008c C0F20003 		movt	r3, #:upper16:indexI2CwriteByte
 1941 0090 4FF00002 		mov	r2, #0
 1942 0094 1A60     		str	r2, [r3, #0]
 528:../LSM9DS1_drivers.c **** 			addressTimerWrite = 0;
 1943              		.loc 1 528 0
 1944 0096 40F20003 		movw	r3, #:lower16:addressTimerWrite
 1945 009a C0F20003 		movt	r3, #:upper16:addressTimerWrite
 1946 009e 4FF00002 		mov	r2, #0
 1947 00a2 1A70     		strb	r2, [r3, #0]
 529:../LSM9DS1_drivers.c **** 			subAddressTimerWrite = 0;
 1948              		.loc 1 529 0
 1949 00a4 40F20003 		movw	r3, #:lower16:subAddressTimerWrite
 1950 00a8 C0F20003 		movt	r3, #:upper16:subAddressTimerWrite
 1951 00ac 4FF00002 		mov	r2, #0
 1952 00b0 1A70     		strb	r2, [r3, #0]
 530:../LSM9DS1_drivers.c **** 			WriteTimerStatus = SYSTM001_ERROR;
 1953              		.loc 1 530 0
 1954 00b2 40F20003 		movw	r3, #:lower16:WriteTimerStatus
 1955 00b6 C0F20003 		movt	r3, #:upper16:WriteTimerStatus
 1956 00ba 4FF00202 		mov	r2, #2
 1957 00be 1A60     		str	r2, [r3, #0]
 531:../LSM9DS1_drivers.c **** 			WriteTimerId = 0;
 1958              		.loc 1 531 0
 1959 00c0 40F20003 		movw	r3, #:lower16:WriteTimerId
 1960 00c4 C0F20003 		movt	r3, #:upper16:WriteTimerId
 1961 00c8 4FF00002 		mov	r2, #0
 1962 00cc 1A60     		str	r2, [r3, #0]
 532:../LSM9DS1_drivers.c **** 			break;
 1963              		.loc 1 532 0
 1964 00ce 00BF     		nop
 535:../LSM9DS1_drivers.c **** }
 1965              		.loc 1 535 0
 1966 00d0 07F10807 		add	r7, r7, #8
 1967 00d4 BD46     		mov	sp, r7
 1968 00d6 80BD     		pop	{r7, pc}
 1969              		.cfi_endproc
 1970              	.LFE130:
 1972              		.section	.text.initAccel,"ax",%progbits
 1973              		.align	2
 1974              		.global	initAccel
 1975              		.thumb
 1976              		.thumb_func
 1978              	initAccel:
 1979              	.LFB131:
 536:../LSM9DS1_drivers.c **** 
 537:../LSM9DS1_drivers.c **** void initAccel(void)
 538:../LSM9DS1_drivers.c **** {
 1980              		.loc 1 538 0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 8
 1983              		@ frame_needed = 1, uses_anonymous_args = 0
 1984 0000 80B5     		push	{r7, lr}
 1985              	.LCFI51:
 1986              		.cfi_def_cfa_offset 8
 1987              		.cfi_offset 7, -8
 1988              		.cfi_offset 14, -4
 1989 0002 82B0     		sub	sp, sp, #8
 1990              	.LCFI52:
 1991              		.cfi_def_cfa_offset 16
 1992 0004 00AF     		add	r7, sp, #0
 1993              	.LCFI53:
 1994              		.cfi_def_cfa_register 7
 539:../LSM9DS1_drivers.c **** 	uint8_t tempRegValue = 0;
 1995              		.loc 1 539 0
 1996 0006 4FF00003 		mov	r3, #0
 1997 000a FB71     		strb	r3, [r7, #7]
 540:../LSM9DS1_drivers.c **** 
 541:../LSM9DS1_drivers.c **** 	//	CTRL_REG5_XL (0x1F) (Default value: 0x38)
 542:../LSM9DS1_drivers.c **** 	//	[DEC_1][DEC_0][Zen_XL][Yen_XL][Zen_XL][0][0][0]
 543:../LSM9DS1_drivers.c **** 	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
 544:../LSM9DS1_drivers.c **** 	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
 545:../LSM9DS1_drivers.c **** 	//	Zen_XL - Z-axis output enabled
 546:../LSM9DS1_drivers.c **** 	//	Yen_XL - Y-axis output enabled
 547:../LSM9DS1_drivers.c **** 	//	Xen_XL - X-axis output enabled
 548:../LSM9DS1_drivers.c **** 	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 1998              		.loc 1 548 0
 1999 000c 40F20003 		movw	r3, #:lower16:settings
 2000 0010 C0F20003 		movt	r3, #:upper16:settings
 2001 0014 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 2002 0016 002B     		cmp	r3, #0
 2003 0018 03D0     		beq	.L88
 2004              		.loc 1 548 0 is_stmt 0 discriminator 1
 2005 001a FB79     		ldrb	r3, [r7, #7]
 2006 001c 43F02003 		orr	r3, r3, #32
 2007 0020 FB71     		strb	r3, [r7, #7]
 2008              	.L88:
 549:../LSM9DS1_drivers.c **** 	if (settings.accel.enableY) tempRegValue |= (1<<4);
 2009              		.loc 1 549 0 is_stmt 1
 2010 0022 40F20003 		movw	r3, #:lower16:settings
 2011 0026 C0F20003 		movt	r3, #:upper16:settings
 2012 002a 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 2013 002c 002B     		cmp	r3, #0
 2014 002e 03D0     		beq	.L89
 2015              		.loc 1 549 0 is_stmt 0 discriminator 1
 2016 0030 FB79     		ldrb	r3, [r7, #7]
 2017 0032 43F01003 		orr	r3, r3, #16
 2018 0036 FB71     		strb	r3, [r7, #7]
 2019              	.L89:
 550:../LSM9DS1_drivers.c **** 	if (settings.accel.enableX) tempRegValue |= (1<<3);
 2020              		.loc 1 550 0 is_stmt 1
 2021 0038 40F20003 		movw	r3, #:lower16:settings
 2022 003c C0F20003 		movt	r3, #:upper16:settings
 2023 0040 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 2024 0042 002B     		cmp	r3, #0
 2025 0044 03D0     		beq	.L90
 2026              		.loc 1 550 0 is_stmt 0 discriminator 1
 2027 0046 FB79     		ldrb	r3, [r7, #7]
 2028 0048 43F00803 		orr	r3, r3, #8
 2029 004c FB71     		strb	r3, [r7, #7]
 2030              	.L90:
 551:../LSM9DS1_drivers.c **** 
 552:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 2031              		.loc 1 552 0 is_stmt 1
 2032 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2033 0050 4FF01F00 		mov	r0, #31
 2034 0054 1946     		mov	r1, r3
 2035 0056 FFF7FEFF 		bl	xgWriteByte
 553:../LSM9DS1_drivers.c **** 
 554:../LSM9DS1_drivers.c **** 	// CTRL_REG6_XL (0x20) (Default value: 0x00)
 555:../LSM9DS1_drivers.c **** 	// [ODR_XL2][ODR_XL1][ODR_XL0][FS1_XL][FS0_XL][BW_SCAL_ODR][BW_XL1][BW_XL0]
 556:../LSM9DS1_drivers.c **** 	// ODR_XL[2:0] - Output data rate & power mode selection
 557:../LSM9DS1_drivers.c **** 	// FS_XL[1:0] - Full-scale selection
 558:../LSM9DS1_drivers.c **** 	// BW_SCAL_ODR - Bandwidth selection
 559:../LSM9DS1_drivers.c **** 	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
 560:../LSM9DS1_drivers.c **** 	tempRegValue = 0;
 2036              		.loc 1 560 0
 2037 005a 4FF00003 		mov	r3, #0
 2038 005e FB71     		strb	r3, [r7, #7]
 561:../LSM9DS1_drivers.c **** 	// To disable the accel, set the sampleRate bits to 0.
 562:../LSM9DS1_drivers.c **** 	if (settings.accel.enabled)
 2039              		.loc 1 562 0
 2040 0060 40F20003 		movw	r3, #:lower16:settings
 2041 0064 C0F20003 		movt	r3, #:upper16:settings
 2042 0068 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2043 006a 002B     		cmp	r3, #0
 2044 006c 0BD0     		beq	.L91
 563:../LSM9DS1_drivers.c **** 	{
 564:../LSM9DS1_drivers.c **** 		tempRegValue |= ((settings.accel.sampleRate & 0x07) << 5);
 2045              		.loc 1 564 0
 2046 006e 40F20003 		movw	r3, #:lower16:settings
 2047 0072 C0F20003 		movt	r3, #:upper16:settings
 2048 0076 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 2049 0078 4FEA4313 		lsl	r3, r3, #5
 2050 007c DAB2     		uxtb	r2, r3
 2051 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2052 0080 1343     		orrs	r3, r3, r2
 2053 0082 DBB2     		uxtb	r3, r3
 2054 0084 FB71     		strb	r3, [r7, #7]
 2055              	.L91:
 565:../LSM9DS1_drivers.c **** 	}
 566:../LSM9DS1_drivers.c **** 	switch (settings.accel.scale)
 2056              		.loc 1 566 0
 2057 0086 40F20003 		movw	r3, #:lower16:settings
 2058 008a C0F20003 		movt	r3, #:upper16:settings
 2059 008e DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 2060 0090 082B     		cmp	r3, #8
 2061 0092 08D0     		beq	.L94
 2062 0094 102B     		cmp	r3, #16
 2063 0096 0BD0     		beq	.L95
 2064 0098 042B     		cmp	r3, #4
 2065 009a 0ED1     		bne	.L92
 2066              	.L93:
 567:../LSM9DS1_drivers.c **** 	{
 568:../LSM9DS1_drivers.c **** 		case 4:
 569:../LSM9DS1_drivers.c **** 			tempRegValue |= (0x2 << 3);
 2067              		.loc 1 569 0
 2068 009c FB79     		ldrb	r3, [r7, #7]
 2069 009e 43F01003 		orr	r3, r3, #16
 2070 00a2 FB71     		strb	r3, [r7, #7]
 570:../LSM9DS1_drivers.c **** 			break;
 2071              		.loc 1 570 0
 2072 00a4 09E0     		b	.L92
 2073              	.L94:
 571:../LSM9DS1_drivers.c **** 		case 8:
 572:../LSM9DS1_drivers.c **** 			tempRegValue |= (0x3 << 3);
 2074              		.loc 1 572 0
 2075 00a6 FB79     		ldrb	r3, [r7, #7]
 2076 00a8 43F01803 		orr	r3, r3, #24
 2077 00ac FB71     		strb	r3, [r7, #7]
 573:../LSM9DS1_drivers.c **** 			break;
 2078              		.loc 1 573 0
 2079 00ae 04E0     		b	.L92
 2080              	.L95:
 574:../LSM9DS1_drivers.c **** 		case 16:
 575:../LSM9DS1_drivers.c **** 			tempRegValue |= (0x1 << 3);
 2081              		.loc 1 575 0
 2082 00b0 FB79     		ldrb	r3, [r7, #7]
 2083 00b2 43F00803 		orr	r3, r3, #8
 2084 00b6 FB71     		strb	r3, [r7, #7]
 576:../LSM9DS1_drivers.c **** 			break;
 2085              		.loc 1 576 0
 2086 00b8 00BF     		nop
 2087              	.L92:
 577:../LSM9DS1_drivers.c **** 		// Otherwise it'll be set to 2g (0x0 << 3)
 578:../LSM9DS1_drivers.c **** 	}
 579:../LSM9DS1_drivers.c **** 	if (settings.accel.bandwidth >= 0)
 2088              		.loc 1 579 0
 2089 00ba 40F20003 		movw	r3, #:lower16:settings
 2090 00be C0F20003 		movt	r3, #:upper16:settings
 2091 00c2 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2092 00c4 5BB2     		sxtb	r3, r3
 2093 00c6 002B     		cmp	r3, #0
 2094 00c8 0FDB     		blt	.L96
 580:../LSM9DS1_drivers.c **** 	{
 581:../LSM9DS1_drivers.c **** 		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
 2095              		.loc 1 581 0
 2096 00ca FB79     		ldrb	r3, [r7, #7]
 2097 00cc 43F00403 		orr	r3, r3, #4
 2098 00d0 FB71     		strb	r3, [r7, #7]
 582:../LSM9DS1_drivers.c **** 		tempRegValue |= (settings.accel.bandwidth & 0x03);
 2099              		.loc 1 582 0
 2100 00d2 40F20003 		movw	r3, #:lower16:settings
 2101 00d6 C0F20003 		movt	r3, #:upper16:settings
 2102 00da 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2103 00dc 03F00303 		and	r3, r3, #3
 2104 00e0 DAB2     		uxtb	r2, r3
 2105 00e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2106 00e4 1343     		orrs	r3, r3, r2
 2107 00e6 DBB2     		uxtb	r3, r3
 2108 00e8 FB71     		strb	r3, [r7, #7]
 2109              	.L96:
 583:../LSM9DS1_drivers.c **** 	}
 584:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 2110              		.loc 1 584 0
 2111 00ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2112 00ec 4FF02000 		mov	r0, #32
 2113 00f0 1946     		mov	r1, r3
 2114 00f2 FFF7FEFF 		bl	xgWriteByte
 585:../LSM9DS1_drivers.c **** 
 586:../LSM9DS1_drivers.c **** 	// CTRL_REG7_XL (0x21) (Default value: 0x00)
 587:../LSM9DS1_drivers.c **** 	// [HR][DCF1][DCF0][0][0][FDS][0][HPIS1]
 588:../LSM9DS1_drivers.c **** 	// HR - High resolution mode (0: disable, 1: enable)
 589:../LSM9DS1_drivers.c **** 	// DCF[1:0] - Digital filter cutoff frequency
 590:../LSM9DS1_drivers.c **** 	// FDS - Filtered data selection
 591:../LSM9DS1_drivers.c **** 	// HPIS1 - HPF enabled for interrupt function
 592:../LSM9DS1_drivers.c **** 	tempRegValue = 0;
 2115              		.loc 1 592 0
 2116 00f6 4FF00003 		mov	r3, #0
 2117 00fa FB71     		strb	r3, [r7, #7]
 593:../LSM9DS1_drivers.c **** 	if (settings.accel.highResEnable)
 2118              		.loc 1 593 0
 2119 00fc 40F20003 		movw	r3, #:lower16:settings
 2120 0100 C0F20003 		movt	r3, #:upper16:settings
 2121 0104 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 2122 0106 002B     		cmp	r3, #0
 2123 0108 11D0     		beq	.L97
 594:../LSM9DS1_drivers.c **** 	{
 595:../LSM9DS1_drivers.c **** 		tempRegValue |= (1<<7); // Set HR bit
 2124              		.loc 1 595 0
 2125 010a FB79     		ldrb	r3, [r7, #7]
 2126 010c 63F07F03 		orn	r3, r3, #127
 2127 0110 FB71     		strb	r3, [r7, #7]
 596:../LSM9DS1_drivers.c **** 		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 2128              		.loc 1 596 0
 2129 0112 40F20003 		movw	r3, #:lower16:settings
 2130 0116 C0F20003 		movt	r3, #:upper16:settings
 2131 011a 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 2132 011c 03F00303 		and	r3, r3, #3
 2133 0120 4FEA4313 		lsl	r3, r3, #5
 2134 0124 DAB2     		uxtb	r2, r3
 2135 0126 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2136 0128 1343     		orrs	r3, r3, r2
 2137 012a DBB2     		uxtb	r3, r3
 2138 012c FB71     		strb	r3, [r7, #7]
 2139              	.L97:
 597:../LSM9DS1_drivers.c **** 	}
 598:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 2140              		.loc 1 598 0
 2141 012e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2142 0130 4FF02100 		mov	r0, #33
 2143 0134 1946     		mov	r1, r3
 2144 0136 FFF7FEFF 		bl	xgWriteByte
 599:../LSM9DS1_drivers.c **** }
 2145              		.loc 1 599 0
 2146 013a 07F10807 		add	r7, r7, #8
 2147 013e BD46     		mov	sp, r7
 2148 0140 80BD     		pop	{r7, pc}
 2149              		.cfi_endproc
 2150              	.LFE131:
 2152 0142 00BF     		.section	.text.initMag,"ax",%progbits
 2153              		.align	2
 2154              		.global	initMag
 2155              		.thumb
 2156              		.thumb_func
 2158              	initMag:
 2159              	.LFB132:
 600:../LSM9DS1_drivers.c **** 
 601:../LSM9DS1_drivers.c **** void initMag(void)
 602:../LSM9DS1_drivers.c **** {
 2160              		.loc 1 602 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 8
 2163              		@ frame_needed = 1, uses_anonymous_args = 0
 2164 0000 80B5     		push	{r7, lr}
 2165              	.LCFI54:
 2166              		.cfi_def_cfa_offset 8
 2167              		.cfi_offset 7, -8
 2168              		.cfi_offset 14, -4
 2169 0002 82B0     		sub	sp, sp, #8
 2170              	.LCFI55:
 2171              		.cfi_def_cfa_offset 16
 2172 0004 00AF     		add	r7, sp, #0
 2173              	.LCFI56:
 2174              		.cfi_def_cfa_register 7
 603:../LSM9DS1_drivers.c **** 	uint8_t tempRegValue = 0;
 2175              		.loc 1 603 0
 2176 0006 4FF00003 		mov	r3, #0
 2177 000a FB71     		strb	r3, [r7, #7]
 604:../LSM9DS1_drivers.c **** 
 605:../LSM9DS1_drivers.c **** 	// CTRL_REG1_M (Default value: 0x10)
 606:../LSM9DS1_drivers.c **** 	// [TEMP_COMP][OM1][OM0][DO2][DO1][DO0][0][ST]
 607:../LSM9DS1_drivers.c **** 	// TEMP_COMP - Temperature compensation
 608:../LSM9DS1_drivers.c **** 	// OM[1:0] - X & Y axes op mode selection
 609:../LSM9DS1_drivers.c **** 	//	00:low-power, 01:medium performance
 610:../LSM9DS1_drivers.c **** 	//	10: high performance, 11:ultra-high performance
 611:../LSM9DS1_drivers.c **** 	// DO[2:0] - Output data rate selection
 612:../LSM9DS1_drivers.c **** 	// ST - Self-test enable
 613:../LSM9DS1_drivers.c **** 	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 2178              		.loc 1 613 0
 2179 000c 40F20003 		movw	r3, #:lower16:settings
 2180 0010 C0F20003 		movt	r3, #:upper16:settings
 2181 0014 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 2182 0018 002B     		cmp	r3, #0
 2183 001a 03D0     		beq	.L99
 2184              		.loc 1 613 0 is_stmt 0 discriminator 1
 2185 001c FB79     		ldrb	r3, [r7, #7]
 2186 001e 63F07F03 		orn	r3, r3, #127
 2187 0022 FB71     		strb	r3, [r7, #7]
 2188              	.L99:
 614:../LSM9DS1_drivers.c **** 	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
 2189              		.loc 1 614 0 is_stmt 1
 2190 0024 40F20003 		movw	r3, #:lower16:settings
 2191 0028 C0F20003 		movt	r3, #:upper16:settings
 2192 002c 93F82330 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 2193 0030 03F00303 		and	r3, r3, #3
 2194 0034 4FEA4313 		lsl	r3, r3, #5
 2195 0038 DAB2     		uxtb	r2, r3
 2196 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2197 003c 1343     		orrs	r3, r3, r2
 2198 003e DBB2     		uxtb	r3, r3
 2199 0040 FB71     		strb	r3, [r7, #7]
 615:../LSM9DS1_drivers.c **** 	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 2200              		.loc 1 615 0
 2201 0042 40F20003 		movw	r3, #:lower16:settings
 2202 0046 C0F20003 		movt	r3, #:upper16:settings
 2203 004a 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 2204 004e 03F00703 		and	r3, r3, #7
 2205 0052 4FEA8303 		lsl	r3, r3, #2
 2206 0056 DAB2     		uxtb	r2, r3
 2207 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2208 005a 1343     		orrs	r3, r3, r2
 2209 005c DBB2     		uxtb	r3, r3
 2210 005e FB71     		strb	r3, [r7, #7]
 616:../LSM9DS1_drivers.c **** 	mWriteByte(CTRL_REG1_M, tempRegValue);
 2211              		.loc 1 616 0
 2212 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2213 0062 4FF02000 		mov	r0, #32
 2214 0066 1946     		mov	r1, r3
 2215 0068 FFF7FEFF 		bl	mWriteByte
 617:../LSM9DS1_drivers.c **** 
 618:../LSM9DS1_drivers.c **** 	// CTRL_REG2_M (Default value 0x00)
 619:../LSM9DS1_drivers.c **** 	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
 620:../LSM9DS1_drivers.c **** 	// FS[1:0] - Full-scale configuration
 621:../LSM9DS1_drivers.c **** 	// REBOOT - Reboot memory content (0:normal, 1:reboot)
 622:../LSM9DS1_drivers.c **** 	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
 623:../LSM9DS1_drivers.c **** 	tempRegValue = 0;
 2216              		.loc 1 623 0
 2217 006c 4FF00003 		mov	r3, #0
 2218 0070 FB71     		strb	r3, [r7, #7]
 624:../LSM9DS1_drivers.c **** 	switch (settings.mag.scale)
 2219              		.loc 1 624 0
 2220 0072 40F20003 		movw	r3, #:lower16:settings
 2221 0076 C0F20003 		movt	r3, #:upper16:settings
 2222 007a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2223 007e 0C2B     		cmp	r3, #12
 2224 0080 08D0     		beq	.L102
 2225 0082 102B     		cmp	r3, #16
 2226 0084 0BD0     		beq	.L103
 2227 0086 082B     		cmp	r3, #8
 2228 0088 0ED1     		bne	.L100
 2229              	.L101:
 625:../LSM9DS1_drivers.c **** 	{
 626:../LSM9DS1_drivers.c **** 	case 8:
 627:../LSM9DS1_drivers.c **** 		tempRegValue |= (0x1 << 5);
 2230              		.loc 1 627 0
 2231 008a FB79     		ldrb	r3, [r7, #7]
 2232 008c 43F02003 		orr	r3, r3, #32
 2233 0090 FB71     		strb	r3, [r7, #7]
 628:../LSM9DS1_drivers.c **** 		break;
 2234              		.loc 1 628 0
 2235 0092 09E0     		b	.L100
 2236              	.L102:
 629:../LSM9DS1_drivers.c **** 	case 12:
 630:../LSM9DS1_drivers.c **** 		tempRegValue |= (0x2 << 5);
 2237              		.loc 1 630 0
 2238 0094 FB79     		ldrb	r3, [r7, #7]
 2239 0096 43F04003 		orr	r3, r3, #64
 2240 009a FB71     		strb	r3, [r7, #7]
 631:../LSM9DS1_drivers.c **** 		break;
 2241              		.loc 1 631 0
 2242 009c 04E0     		b	.L100
 2243              	.L103:
 632:../LSM9DS1_drivers.c **** 	case 16:
 633:../LSM9DS1_drivers.c **** 		tempRegValue |= (0x3 << 5);
 2244              		.loc 1 633 0
 2245 009e FB79     		ldrb	r3, [r7, #7]
 2246 00a0 43F06003 		orr	r3, r3, #96
 2247 00a4 FB71     		strb	r3, [r7, #7]
 634:../LSM9DS1_drivers.c **** 		break;
 2248              		.loc 1 634 0
 2249 00a6 00BF     		nop
 2250              	.L100:
 635:../LSM9DS1_drivers.c **** 	// Otherwise we'll default to 4 gauss (00)
 636:../LSM9DS1_drivers.c **** 	}
 637:../LSM9DS1_drivers.c **** 	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 2251              		.loc 1 637 0
 2252 00a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2253 00aa 4FF02100 		mov	r0, #33
 2254 00ae 1946     		mov	r1, r3
 2255 00b0 FFF7FEFF 		bl	mWriteByte
 638:../LSM9DS1_drivers.c **** 
 639:../LSM9DS1_drivers.c **** 	// CTRL_REG3_M (Default value: 0x03)
 640:../LSM9DS1_drivers.c **** 	// [I2C_DISABLE][0][LP][0][0][SIM][MD1][MD0]
 641:../LSM9DS1_drivers.c **** 	// I2C_DISABLE - Disable I2C interace (0:enable, 1:disable)
 642:../LSM9DS1_drivers.c **** 	// LP - Low-power mode cofiguration (1:enable)
 643:../LSM9DS1_drivers.c **** 	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
 644:../LSM9DS1_drivers.c **** 	// MD[1:0] - Operating mode
 645:../LSM9DS1_drivers.c **** 	//	00:continuous conversion, 01:single-conversion,
 646:../LSM9DS1_drivers.c **** 	//  10,11: Power-down
 647:../LSM9DS1_drivers.c **** 	tempRegValue = 0;
 2256              		.loc 1 647 0
 2257 00b4 4FF00003 		mov	r3, #0
 2258 00b8 FB71     		strb	r3, [r7, #7]
 648:../LSM9DS1_drivers.c **** 	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 2259              		.loc 1 648 0
 2260 00ba 40F20003 		movw	r3, #:lower16:settings
 2261 00be C0F20003 		movt	r3, #:upper16:settings
 2262 00c2 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 2263 00c6 002B     		cmp	r3, #0
 2264 00c8 03D0     		beq	.L104
 2265              		.loc 1 648 0 is_stmt 0 discriminator 1
 2266 00ca FB79     		ldrb	r3, [r7, #7]
 2267 00cc 43F02003 		orr	r3, r3, #32
 2268 00d0 FB71     		strb	r3, [r7, #7]
 2269              	.L104:
 649:../LSM9DS1_drivers.c **** 	tempRegValue |= (settings.mag.operatingMode & 0x3);
 2270              		.loc 1 649 0 is_stmt 1
 2271 00d2 40F20003 		movw	r3, #:lower16:settings
 2272 00d6 C0F20003 		movt	r3, #:upper16:settings
 2273 00da 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 2274 00de DBB2     		uxtb	r3, r3
 2275 00e0 03F00303 		and	r3, r3, #3
 2276 00e4 DAB2     		uxtb	r2, r3
 2277 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2278 00e8 1343     		orrs	r3, r3, r2
 2279 00ea DBB2     		uxtb	r3, r3
 2280 00ec FB71     		strb	r3, [r7, #7]
 650:../LSM9DS1_drivers.c **** 	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 2281              		.loc 1 650 0
 2282 00ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2283 00f0 4FF02200 		mov	r0, #34
 2284 00f4 1946     		mov	r1, r3
 2285 00f6 FFF7FEFF 		bl	mWriteByte
 651:../LSM9DS1_drivers.c **** 
 652:../LSM9DS1_drivers.c **** 	// CTRL_REG4_M (Default value: 0x00)
 653:../LSM9DS1_drivers.c **** 	// [0][0][0][0][OMZ1][OMZ0][BLE][0]
 654:../LSM9DS1_drivers.c **** 	// OMZ[1:0] - Z-axis operative mode selection
 655:../LSM9DS1_drivers.c **** 	//	00:low-power mode, 01:medium performance
 656:../LSM9DS1_drivers.c **** 	//	10:high performance, 10:ultra-high performance
 657:../LSM9DS1_drivers.c **** 	// BLE - Big/little endian data
 658:../LSM9DS1_drivers.c **** 	tempRegValue = 0;
 2286              		.loc 1 658 0
 2287 00fa 4FF00003 		mov	r3, #0
 2288 00fe FB71     		strb	r3, [r7, #7]
 659:../LSM9DS1_drivers.c **** 	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
 2289              		.loc 1 659 0
 2290 0100 40F20003 		movw	r3, #:lower16:settings
 2291 0104 C0F20003 		movt	r3, #:upper16:settings
 2292 0108 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2293 010c 03F00303 		and	r3, r3, #3
 2294 0110 DBB2     		uxtb	r3, r3
 2295 0112 4FEA8303 		lsl	r3, r3, #2
 2296 0116 FB71     		strb	r3, [r7, #7]
 660:../LSM9DS1_drivers.c **** 	mWriteByte(CTRL_REG4_M, tempRegValue);
 2297              		.loc 1 660 0
 2298 0118 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2299 011a 4FF02300 		mov	r0, #35
 2300 011e 1946     		mov	r1, r3
 2301 0120 FFF7FEFF 		bl	mWriteByte
 661:../LSM9DS1_drivers.c **** 
 662:../LSM9DS1_drivers.c **** 	// CTRL_REG5_M (Default value: 0x00)
 663:../LSM9DS1_drivers.c **** 	// [0][BDU][0][0][0][0][0][0]
 664:../LSM9DS1_drivers.c **** 	// BDU - Block data update for magnetic data
 665:../LSM9DS1_drivers.c **** 	//	0:continuous, 1:not updated until MSB/LSB are read
 666:../LSM9DS1_drivers.c **** 	tempRegValue = 0;
 2302              		.loc 1 666 0
 2303 0124 4FF00003 		mov	r3, #0
 2304 0128 FB71     		strb	r3, [r7, #7]
 667:../LSM9DS1_drivers.c **** 	mWriteByte(CTRL_REG5_M, tempRegValue);
 2305              		.loc 1 667 0
 2306 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2307 012c 4FF02400 		mov	r0, #36
 2308 0130 1946     		mov	r1, r3
 2309 0132 FFF7FEFF 		bl	mWriteByte
 668:../LSM9DS1_drivers.c **** }
 2310              		.loc 1 668 0
 2311 0136 07F10807 		add	r7, r7, #8
 2312 013a BD46     		mov	sp, r7
 2313 013c 80BD     		pop	{r7, pc}
 2314              		.cfi_endproc
 2315              	.LFE132:
 2317 013e 00BF     		.section	.text.mWriteByte,"ax",%progbits
 2318              		.align	2
 2319              		.global	mWriteByte
 2320              		.thumb
 2321              		.thumb_func
 2323              	mWriteByte:
 2324              	.LFB133:
 669:../LSM9DS1_drivers.c **** 
 670:../LSM9DS1_drivers.c **** void mWriteByte(uint8_t subAddress, uint8_t data)
 671:../LSM9DS1_drivers.c **** {
 2325              		.loc 1 671 0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 8
 2328              		@ frame_needed = 1, uses_anonymous_args = 0
 2329 0000 80B5     		push	{r7, lr}
 2330              	.LCFI57:
 2331              		.cfi_def_cfa_offset 8
 2332              		.cfi_offset 7, -8
 2333              		.cfi_offset 14, -4
 2334 0002 82B0     		sub	sp, sp, #8
 2335              	.LCFI58:
 2336              		.cfi_def_cfa_offset 16
 2337 0004 00AF     		add	r7, sp, #0
 2338              	.LCFI59:
 2339              		.cfi_def_cfa_register 7
 2340 0006 0246     		mov	r2, r0
 2341 0008 0B46     		mov	r3, r1
 2342 000a FA71     		strb	r2, [r7, #7]
 2343 000c BB71     		strb	r3, [r7, #6]
 672:../LSM9DS1_drivers.c **** 	// Whether we're using I2C or SPI, write a byte using the
 673:../LSM9DS1_drivers.c **** 	// accelerometer-specific I2C address or SPI CS pin.
 674:../LSM9DS1_drivers.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 2344              		.loc 1 674 0
 2345 000e 40F20003 		movw	r3, #:lower16:settings
 2346 0012 C0F20003 		movt	r3, #:upper16:settings
 2347 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2348 0018 012B     		cmp	r3, #1
 2349 001a 0CD1     		bne	.L105
 675:../LSM9DS1_drivers.c **** 	{
 676:../LSM9DS1_drivers.c **** 		return I2CwriteByte(_mAddress, subAddress, data);
 2350              		.loc 1 676 0
 2351 001c 40F20003 		movw	r3, #:lower16:_mAddress
 2352 0020 C0F20003 		movt	r3, #:upper16:_mAddress
 2353 0024 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2354 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2355 0028 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2356 002a 0846     		mov	r0, r1
 2357 002c 1146     		mov	r1, r2
 2358 002e 1A46     		mov	r2, r3
 2359 0030 FFF7FEFF 		bl	I2CwriteByte
 2360 0034 00BF     		nop
 2361              	.L105:
 677:../LSM9DS1_drivers.c **** 	}
 678:../LSM9DS1_drivers.c **** }
 2362              		.loc 1 678 0
 2363 0036 07F10807 		add	r7, r7, #8
 2364 003a BD46     		mov	sp, r7
 2365 003c 80BD     		pop	{r7, pc}
 2366              		.cfi_endproc
 2367              	.LFE133:
 2369 003e 00BF     		.section	.text.enableFIFO,"ax",%progbits
 2370              		.align	2
 2371              		.global	enableFIFO
 2372              		.thumb
 2373              		.thumb_func
 2375              	enableFIFO:
 2376              	.LFB134:
 679:../LSM9DS1_drivers.c **** 
 680:../LSM9DS1_drivers.c **** void enableFIFO(bool enable)
 681:../LSM9DS1_drivers.c **** {
 2377              		.loc 1 681 0
 2378              		.cfi_startproc
 2379              		@ args = 0, pretend = 0, frame = 16
 2380              		@ frame_needed = 1, uses_anonymous_args = 0
 2381 0000 80B5     		push	{r7, lr}
 2382              	.LCFI60:
 2383              		.cfi_def_cfa_offset 8
 2384              		.cfi_offset 7, -8
 2385              		.cfi_offset 14, -4
 2386 0002 84B0     		sub	sp, sp, #16
 2387              	.LCFI61:
 2388              		.cfi_def_cfa_offset 24
 2389 0004 00AF     		add	r7, sp, #0
 2390              	.LCFI62:
 2391              		.cfi_def_cfa_register 7
 2392 0006 0346     		mov	r3, r0
 2393 0008 FB71     		strb	r3, [r7, #7]
 682:../LSM9DS1_drivers.c **** 	uint8_t temp = xgReadByte(CTRL_REG9);
 2394              		.loc 1 682 0
 2395 000a 4FF02300 		mov	r0, #35
 2396 000e FFF7FEFF 		bl	xgReadByte
 2397 0012 0346     		mov	r3, r0
 2398 0014 FB73     		strb	r3, [r7, #15]
 683:../LSM9DS1_drivers.c **** 	if(enable)
 2399              		.loc 1 683 0
 2400 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2401 0018 002B     		cmp	r3, #0
 2402 001a 04D0     		beq	.L108
 684:../LSM9DS1_drivers.c **** 	{
 685:../LSM9DS1_drivers.c **** 		temp |= (1<<1);
 2403              		.loc 1 685 0
 2404 001c FB7B     		ldrb	r3, [r7, #15]
 2405 001e 43F00203 		orr	r3, r3, #2
 2406 0022 FB73     		strb	r3, [r7, #15]
 2407 0024 03E0     		b	.L109
 2408              	.L108:
 686:../LSM9DS1_drivers.c **** 	}
 687:../LSM9DS1_drivers.c **** 	else
 688:../LSM9DS1_drivers.c **** 	{
 689:../LSM9DS1_drivers.c **** 		temp &= ~(1<<1);
 2409              		.loc 1 689 0
 2410 0026 FB7B     		ldrb	r3, [r7, #15]
 2411 0028 23F00203 		bic	r3, r3, #2
 2412 002c FB73     		strb	r3, [r7, #15]
 2413              	.L109:
 690:../LSM9DS1_drivers.c **** 	}
 691:../LSM9DS1_drivers.c **** 
 692:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG9, temp);
 2414              		.loc 1 692 0
 2415 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2416 0030 4FF02300 		mov	r0, #35
 2417 0034 1946     		mov	r1, r3
 2418 0036 FFF7FEFF 		bl	xgWriteByte
 693:../LSM9DS1_drivers.c **** }
 2419              		.loc 1 693 0
 2420 003a 07F11007 		add	r7, r7, #16
 2421 003e BD46     		mov	sp, r7
 2422 0040 80BD     		pop	{r7, pc}
 2423              		.cfi_endproc
 2424              	.LFE134:
 2426 0042 00BF     		.section	.text.setFIFO,"ax",%progbits
 2427              		.align	2
 2428              		.global	setFIFO
 2429              		.thumb
 2430              		.thumb_func
 2432              	setFIFO:
 2433              	.LFB135:
 694:../LSM9DS1_drivers.c **** 
 695:../LSM9DS1_drivers.c **** void setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
 696:../LSM9DS1_drivers.c **** {
 2434              		.loc 1 696 0
 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 16
 2437              		@ frame_needed = 1, uses_anonymous_args = 0
 2438 0000 80B5     		push	{r7, lr}
 2439              	.LCFI63:
 2440              		.cfi_def_cfa_offset 8
 2441              		.cfi_offset 7, -8
 2442              		.cfi_offset 14, -4
 2443 0002 84B0     		sub	sp, sp, #16
 2444              	.LCFI64:
 2445              		.cfi_def_cfa_offset 24
 2446 0004 00AF     		add	r7, sp, #0
 2447              	.LCFI65:
 2448              		.cfi_def_cfa_register 7
 2449 0006 0246     		mov	r2, r0
 2450 0008 0B46     		mov	r3, r1
 2451 000a FA71     		strb	r2, [r7, #7]
 2452 000c BB71     		strb	r3, [r7, #6]
 697:../LSM9DS1_drivers.c **** 	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
 698:../LSM9DS1_drivers.c **** 	// limit it to the maximum.
 699:../LSM9DS1_drivers.c **** 	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
 2453              		.loc 1 699 0
 2454 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2455 0010 1F2B     		cmp	r3, #31
 2456 0012 28BF     		it	cs
 2457 0014 1F23     		movcs	r3, #31
 2458 0016 FB73     		strb	r3, [r7, #15]
 700:../LSM9DS1_drivers.c **** 	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 2459              		.loc 1 700 0
 2460 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2461 001a 4FEA4313 		lsl	r3, r3, #5
 2462 001e DAB2     		uxtb	r2, r3
 2463 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2464 0022 03F01F03 		and	r3, r3, #31
 2465 0026 DBB2     		uxtb	r3, r3
 2466 0028 1343     		orrs	r3, r3, r2
 2467 002a DBB2     		uxtb	r3, r3
 2468 002c DBB2     		uxtb	r3, r3
 2469 002e 4FF02E00 		mov	r0, #46
 2470 0032 1946     		mov	r1, r3
 2471 0034 FFF7FEFF 		bl	xgWriteByte
 701:../LSM9DS1_drivers.c **** }
 2472              		.loc 1 701 0
 2473 0038 07F11007 		add	r7, r7, #16
 2474 003c BD46     		mov	sp, r7
 2475 003e 80BD     		pop	{r7, pc}
 2476              		.cfi_endproc
 2477              	.LFE135:
 2479              		.section	.text.readGyro1,"ax",%progbits
 2480              		.align	2
 2481              		.global	readGyro1
 2482              		.thumb
 2483              		.thumb_func
 2485              	readGyro1:
 2486              	.LFB136:
 702:../LSM9DS1_drivers.c **** 
 703:../LSM9DS1_drivers.c **** void readGyro1(void)
 704:../LSM9DS1_drivers.c **** {
 2487              		.loc 1 704 0
 2488              		.cfi_startproc
 2489              		@ args = 0, pretend = 0, frame = 16
 2490              		@ frame_needed = 1, uses_anonymous_args = 0
 2491 0000 80B5     		push	{r7, lr}
 2492              	.LCFI66:
 2493              		.cfi_def_cfa_offset 8
 2494              		.cfi_offset 7, -8
 2495              		.cfi_offset 14, -4
 2496 0002 84B0     		sub	sp, sp, #16
 2497              	.LCFI67:
 2498              		.cfi_def_cfa_offset 24
 2499 0004 00AF     		add	r7, sp, #0
 2500              	.LCFI68:
 2501              		.cfi_def_cfa_register 7
 705:../LSM9DS1_drivers.c **** 	/*for(int g = 0; g < 3; g++){*/
 706:../LSM9DS1_drivers.c **** 	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
 707:../LSM9DS1_drivers.c **** 	xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 2502              		.loc 1 707 0
 2503 0006 07F10403 		add	r3, r7, #4
 2504 000a 4FF01800 		mov	r0, #24
 2505 000e 1946     		mov	r1, r3
 2506 0010 4FF00602 		mov	r2, #6
 2507 0014 FFF7FEFF 		bl	xgReadBytes
 708:../LSM9DS1_drivers.c **** 	gx = ((int8_t)temp[1] << 8) | (int8_t)temp[0]; // Store x-axis values into gx
 2508              		.loc 1 708 0
 2509 0018 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2510 001a DBB2     		uxtb	r3, r3
 2511 001c 5BB2     		sxtb	r3, r3
 2512 001e 4FEA0323 		lsl	r3, r3, #8
 2513 0022 9AB2     		uxth	r2, r3
 2514 0024 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 2515 0026 DBB2     		uxtb	r3, r3
 2516 0028 5BB2     		sxtb	r3, r3
 2517 002a 9BB2     		uxth	r3, r3
 2518 002c 1343     		orrs	r3, r3, r2
 2519 002e 9AB2     		uxth	r2, r3
 2520 0030 40F20003 		movw	r3, #:lower16:gx
 2521 0034 C0F20003 		movt	r3, #:upper16:gx
 2522 0038 1A80     		strh	r2, [r3, #0]	@ movhi
 709:../LSM9DS1_drivers.c **** 
 710:../LSM9DS1_drivers.c **** 	//gx = ((int8_t)temp[0] << 8) | (int8_t)temp[1]; // Store x-axis values into gx
 711:../LSM9DS1_drivers.c **** 
 712:../LSM9DS1_drivers.c **** 
 713:../LSM9DS1_drivers.c **** 	gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 2523              		.loc 1 713 0
 2524 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2525 003c 4FEA0323 		lsl	r3, r3, #8
 2526 0040 9AB2     		uxth	r2, r3
 2527 0042 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2528 0044 1343     		orrs	r3, r3, r2
 2529 0046 9AB2     		uxth	r2, r3
 2530 0048 40F20003 		movw	r3, #:lower16:gy
 2531 004c C0F20003 		movt	r3, #:upper16:gy
 2532 0050 1A80     		strh	r2, [r3, #0]	@ movhi
 714:../LSM9DS1_drivers.c **** 
 715:../LSM9DS1_drivers.c **** 	//gy = (temp[2] << 8) | temp[3];
 716:../LSM9DS1_drivers.c **** 
 717:../LSM9DS1_drivers.c **** 	gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 2533              		.loc 1 717 0
 2534 0052 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 2535 0054 4FEA0323 		lsl	r3, r3, #8
 2536 0058 9AB2     		uxth	r2, r3
 2537 005a 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 2538 005c 1343     		orrs	r3, r3, r2
 2539 005e 9AB2     		uxth	r2, r3
 2540 0060 40F20003 		movw	r3, #:lower16:gz
 2541 0064 C0F20003 		movt	r3, #:upper16:gz
 2542 0068 1A80     		strh	r2, [r3, #0]	@ movhi
 718:../LSM9DS1_drivers.c **** 
 719:../LSM9DS1_drivers.c **** 	//gz = (temp[4] << 8) | temp[5];
 720:../LSM9DS1_drivers.c **** 
 721:../LSM9DS1_drivers.c **** 	/*if(g == 2)
 722:../LSM9DS1_drivers.c **** 	{
 723:../LSM9DS1_drivers.c **** 
 724:../LSM9DS1_drivers.c **** 		int flu = 0;
 725:../LSM9DS1_drivers.c **** 	}*/
 726:../LSM9DS1_drivers.c **** 
 727:../LSM9DS1_drivers.c **** 	if (_autoCalc)
 2543              		.loc 1 727 0
 2544 006a 40F20003 		movw	r3, #:lower16:_autoCalc
 2545 006e C0F20003 		movt	r3, #:upper16:_autoCalc
 2546 0072 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2547 0074 002B     		cmp	r3, #0
 2548 0076 3BD0     		beq	.L112
 728:../LSM9DS1_drivers.c **** 	{
 729:../LSM9DS1_drivers.c **** 		gx -= gBiasRaw[X_AXIS];
 2549              		.loc 1 729 0
 2550 0078 40F20003 		movw	r3, #:lower16:gx
 2551 007c C0F20003 		movt	r3, #:upper16:gx
 2552 0080 1B88     		ldrh	r3, [r3, #0]
 2553 0082 9AB2     		uxth	r2, r3
 2554 0084 40F20003 		movw	r3, #:lower16:gBiasRaw
 2555 0088 C0F20003 		movt	r3, #:upper16:gBiasRaw
 2556 008c 1B88     		ldrh	r3, [r3, #0]
 2557 008e 9BB2     		uxth	r3, r3
 2558 0090 D31A     		subs	r3, r2, r3
 2559 0092 9BB2     		uxth	r3, r3
 2560 0094 9AB2     		uxth	r2, r3
 2561 0096 40F20003 		movw	r3, #:lower16:gx
 2562 009a C0F20003 		movt	r3, #:upper16:gx
 2563 009e 1A80     		strh	r2, [r3, #0]	@ movhi
 730:../LSM9DS1_drivers.c **** 		gy -= gBiasRaw[Y_AXIS];
 2564              		.loc 1 730 0
 2565 00a0 40F20003 		movw	r3, #:lower16:gy
 2566 00a4 C0F20003 		movt	r3, #:upper16:gy
 2567 00a8 1B88     		ldrh	r3, [r3, #0]
 2568 00aa 9AB2     		uxth	r2, r3
 2569 00ac 40F20003 		movw	r3, #:lower16:gBiasRaw
 2570 00b0 C0F20003 		movt	r3, #:upper16:gBiasRaw
 2571 00b4 5B88     		ldrh	r3, [r3, #2]
 2572 00b6 9BB2     		uxth	r3, r3
 2573 00b8 D31A     		subs	r3, r2, r3
 2574 00ba 9BB2     		uxth	r3, r3
 2575 00bc 9AB2     		uxth	r2, r3
 2576 00be 40F20003 		movw	r3, #:lower16:gy
 2577 00c2 C0F20003 		movt	r3, #:upper16:gy
 2578 00c6 1A80     		strh	r2, [r3, #0]	@ movhi
 731:../LSM9DS1_drivers.c **** 		gz -= gBiasRaw[Z_AXIS];
 2579              		.loc 1 731 0
 2580 00c8 40F20003 		movw	r3, #:lower16:gz
 2581 00cc C0F20003 		movt	r3, #:upper16:gz
 2582 00d0 1B88     		ldrh	r3, [r3, #0]
 2583 00d2 9AB2     		uxth	r2, r3
 2584 00d4 40F20003 		movw	r3, #:lower16:gBiasRaw
 2585 00d8 C0F20003 		movt	r3, #:upper16:gBiasRaw
 2586 00dc 9B88     		ldrh	r3, [r3, #4]
 2587 00de 9BB2     		uxth	r3, r3
 2588 00e0 D31A     		subs	r3, r2, r3
 2589 00e2 9BB2     		uxth	r3, r3
 2590 00e4 9AB2     		uxth	r2, r3
 2591 00e6 40F20003 		movw	r3, #:lower16:gz
 2592 00ea C0F20003 		movt	r3, #:upper16:gz
 2593 00ee 1A80     		strh	r2, [r3, #0]	@ movhi
 2594              	.L112:
 732:../LSM9DS1_drivers.c **** 	}
 733:../LSM9DS1_drivers.c **** 	gx = calcGyro(gx);
 2595              		.loc 1 733 0
 2596 00f0 40F20003 		movw	r3, #:lower16:gx
 2597 00f4 C0F20003 		movt	r3, #:upper16:gx
 2598 00f8 1B88     		ldrh	r3, [r3, #0]
 2599 00fa 1BB2     		sxth	r3, r3
 2600 00fc 1846     		mov	r0, r3
 2601 00fe FFF7FEFF 		bl	calcGyro
 2602 0102 07EE900A 		fmsr	s15, r0
 2603 0106 FDEEE77A 		ftosizs	s15, s15
 2604 010a 17EE903A 		fmrs	r3, s15	@ int
 2605 010e 9AB2     		uxth	r2, r3
 2606 0110 40F20003 		movw	r3, #:lower16:gx
 2607 0114 C0F20003 		movt	r3, #:upper16:gx
 2608 0118 1A80     		strh	r2, [r3, #0]	@ movhi
 734:../LSM9DS1_drivers.c **** 	gy = calcGyro(gy);
 2609              		.loc 1 734 0
 2610 011a 40F20003 		movw	r3, #:lower16:gy
 2611 011e C0F20003 		movt	r3, #:upper16:gy
 2612 0122 1B88     		ldrh	r3, [r3, #0]
 2613 0124 1BB2     		sxth	r3, r3
 2614 0126 1846     		mov	r0, r3
 2615 0128 FFF7FEFF 		bl	calcGyro
 2616 012c 07EE900A 		fmsr	s15, r0
 2617 0130 FDEEE77A 		ftosizs	s15, s15
 2618 0134 17EE903A 		fmrs	r3, s15	@ int
 2619 0138 9AB2     		uxth	r2, r3
 2620 013a 40F20003 		movw	r3, #:lower16:gy
 2621 013e C0F20003 		movt	r3, #:upper16:gy
 2622 0142 1A80     		strh	r2, [r3, #0]	@ movhi
 735:../LSM9DS1_drivers.c **** 	gz = calcGyro(gz);
 2623              		.loc 1 735 0
 2624 0144 40F20003 		movw	r3, #:lower16:gz
 2625 0148 C0F20003 		movt	r3, #:upper16:gz
 2626 014c 1B88     		ldrh	r3, [r3, #0]
 2627 014e 1BB2     		sxth	r3, r3
 2628 0150 1846     		mov	r0, r3
 2629 0152 FFF7FEFF 		bl	calcGyro
 2630 0156 07EE900A 		fmsr	s15, r0
 2631 015a FDEEE77A 		ftosizs	s15, s15
 2632 015e 17EE903A 		fmrs	r3, s15	@ int
 2633 0162 9AB2     		uxth	r2, r3
 2634 0164 40F20003 		movw	r3, #:lower16:gz
 2635 0168 C0F20003 		movt	r3, #:upper16:gz
 2636 016c 1A80     		strh	r2, [r3, #0]	@ movhi
 2637              	.LBB5:
 736:../LSM9DS1_drivers.c **** 
 737:../LSM9DS1_drivers.c **** 	/*poms.gxs[g] = gx;
 738:../LSM9DS1_drivers.c **** 	poms.gys[g] = gy;
 739:../LSM9DS1_drivers.c **** 	poms.gzs[g] = gz;*/
 740:../LSM9DS1_drivers.c **** 
 741:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 2638              		.loc 1 741 0
 2639 016e 4FF00003 		mov	r3, #0
 2640 0172 FB60     		str	r3, [r7, #12]
 2641 0174 0CE0     		b	.L113
 2642              	.L114:
 742:../LSM9DS1_drivers.c **** 	{
 743:../LSM9DS1_drivers.c **** 		accelerationXYZ[k] = 0;
 2643              		.loc 1 743 0 discriminator 2
 2644 0176 40F20003 		movw	r3, #:lower16:accelerationXYZ
 2645 017a C0F20003 		movt	r3, #:upper16:accelerationXYZ
 2646 017e FA68     		ldr	r2, [r7, #12]
 2647 0180 4FF00001 		mov	r1, #0
 2648 0184 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 741:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 2649              		.loc 1 741 0 discriminator 2
 2650 0188 FB68     		ldr	r3, [r7, #12]
 2651 018a 03F10103 		add	r3, r3, #1
 2652 018e FB60     		str	r3, [r7, #12]
 2653              	.L113:
 741:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 2654              		.loc 1 741 0 is_stmt 0 discriminator 1
 2655 0190 FB68     		ldr	r3, [r7, #12]
 2656 0192 052B     		cmp	r3, #5
 2657 0194 EFDD     		ble	.L114
 2658              	.LBE5:
 744:../LSM9DS1_drivers.c **** 	}
 745:../LSM9DS1_drivers.c **** 	//}
 746:../LSM9DS1_drivers.c **** }
 2659              		.loc 1 746 0 is_stmt 1
 2660 0196 07F11007 		add	r7, r7, #16
 2661 019a BD46     		mov	sp, r7
 2662 019c 80BD     		pop	{r7, pc}
 2663              		.cfi_endproc
 2664              	.LFE136:
 2666 019e 00BF     		.section	.text.readAccel1,"ax",%progbits
 2667              		.align	2
 2668              		.global	readAccel1
 2669              		.thumb
 2670              		.thumb_func
 2672              	readAccel1:
 2673              	.LFB137:
 747:../LSM9DS1_drivers.c **** 
 748:../LSM9DS1_drivers.c **** void readAccel1(void)
 749:../LSM9DS1_drivers.c **** {
 2674              		.loc 1 749 0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 16
 2677              		@ frame_needed = 1, uses_anonymous_args = 0
 2678 0000 80B5     		push	{r7, lr}
 2679              	.LCFI69:
 2680              		.cfi_def_cfa_offset 8
 2681              		.cfi_offset 7, -8
 2682              		.cfi_offset 14, -4
 2683 0002 84B0     		sub	sp, sp, #16
 2684              	.LCFI70:
 2685              		.cfi_def_cfa_offset 24
 2686 0004 00AF     		add	r7, sp, #0
 2687              	.LCFI71:
 2688              		.cfi_def_cfa_register 7
 750:../LSM9DS1_drivers.c **** 	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp
 751:../LSM9DS1_drivers.c **** 	int index = 0;
 2689              		.loc 1 751 0
 2690 0006 4FF00003 		mov	r3, #0
 2691 000a 3B60     		str	r3, [r7, #0]
 752:../LSM9DS1_drivers.c **** 
 753:../LSM9DS1_drivers.c **** 	xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 2692              		.loc 1 753 0
 2693 000c 07F10403 		add	r3, r7, #4
 2694 0010 4FF02800 		mov	r0, #40
 2695 0014 1946     		mov	r1, r3
 2696 0016 4FF00602 		mov	r2, #6
 2697 001a FFF7FEFF 		bl	xgReadBytes
 754:../LSM9DS1_drivers.c **** 
 755:../LSM9DS1_drivers.c **** 	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 2698              		.loc 1 755 0
 2699 001e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2700 0020 4FEA0323 		lsl	r3, r3, #8
 2701 0024 9AB2     		uxth	r2, r3
 2702 0026 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 2703 0028 1343     		orrs	r3, r3, r2
 2704 002a 9AB2     		uxth	r2, r3
 2705 002c 40F20003 		movw	r3, #:lower16:ax
 2706 0030 C0F20003 		movt	r3, #:upper16:ax
 2707 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 756:../LSM9DS1_drivers.c **** 	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 2708              		.loc 1 756 0
 2709 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2710 0038 4FEA0323 		lsl	r3, r3, #8
 2711 003c 9AB2     		uxth	r2, r3
 2712 003e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2713 0040 1343     		orrs	r3, r3, r2
 2714 0042 9AB2     		uxth	r2, r3
 2715 0044 40F20003 		movw	r3, #:lower16:ay
 2716 0048 C0F20003 		movt	r3, #:upper16:ay
 2717 004c 1A80     		strh	r2, [r3, #0]	@ movhi
 757:../LSM9DS1_drivers.c **** 	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 2718              		.loc 1 757 0
 2719 004e 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 2720 0050 4FEA0323 		lsl	r3, r3, #8
 2721 0054 9AB2     		uxth	r2, r3
 2722 0056 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 2723 0058 1343     		orrs	r3, r3, r2
 2724 005a 9AB2     		uxth	r2, r3
 2725 005c 40F20003 		movw	r3, #:lower16:az
 2726 0060 C0F20003 		movt	r3, #:upper16:az
 2727 0064 1A80     		strh	r2, [r3, #0]	@ movhi
 758:../LSM9DS1_drivers.c **** 
 759:../LSM9DS1_drivers.c **** 	if (_autoCalc)
 2728              		.loc 1 759 0
 2729 0066 40F20003 		movw	r3, #:lower16:_autoCalc
 2730 006a C0F20003 		movt	r3, #:upper16:_autoCalc
 2731 006e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2732 0070 002B     		cmp	r3, #0
 2733 0072 3BD0     		beq	.L116
 760:../LSM9DS1_drivers.c **** 	{
 761:../LSM9DS1_drivers.c **** 		ax -= aBiasRaw[X_AXIS];
 2734              		.loc 1 761 0
 2735 0074 40F20003 		movw	r3, #:lower16:ax
 2736 0078 C0F20003 		movt	r3, #:upper16:ax
 2737 007c 1B88     		ldrh	r3, [r3, #0]
 2738 007e 9AB2     		uxth	r2, r3
 2739 0080 40F20003 		movw	r3, #:lower16:aBiasRaw
 2740 0084 C0F20003 		movt	r3, #:upper16:aBiasRaw
 2741 0088 1B88     		ldrh	r3, [r3, #0]
 2742 008a 9BB2     		uxth	r3, r3
 2743 008c D31A     		subs	r3, r2, r3
 2744 008e 9BB2     		uxth	r3, r3
 2745 0090 9AB2     		uxth	r2, r3
 2746 0092 40F20003 		movw	r3, #:lower16:ax
 2747 0096 C0F20003 		movt	r3, #:upper16:ax
 2748 009a 1A80     		strh	r2, [r3, #0]	@ movhi
 762:../LSM9DS1_drivers.c **** 		ay -= aBiasRaw[Y_AXIS];
 2749              		.loc 1 762 0
 2750 009c 40F20003 		movw	r3, #:lower16:ay
 2751 00a0 C0F20003 		movt	r3, #:upper16:ay
 2752 00a4 1B88     		ldrh	r3, [r3, #0]
 2753 00a6 9AB2     		uxth	r2, r3
 2754 00a8 40F20003 		movw	r3, #:lower16:aBiasRaw
 2755 00ac C0F20003 		movt	r3, #:upper16:aBiasRaw
 2756 00b0 5B88     		ldrh	r3, [r3, #2]
 2757 00b2 9BB2     		uxth	r3, r3
 2758 00b4 D31A     		subs	r3, r2, r3
 2759 00b6 9BB2     		uxth	r3, r3
 2760 00b8 9AB2     		uxth	r2, r3
 2761 00ba 40F20003 		movw	r3, #:lower16:ay
 2762 00be C0F20003 		movt	r3, #:upper16:ay
 2763 00c2 1A80     		strh	r2, [r3, #0]	@ movhi
 763:../LSM9DS1_drivers.c **** 		az -= aBiasRaw[Z_AXIS];
 2764              		.loc 1 763 0
 2765 00c4 40F20003 		movw	r3, #:lower16:az
 2766 00c8 C0F20003 		movt	r3, #:upper16:az
 2767 00cc 1B88     		ldrh	r3, [r3, #0]
 2768 00ce 9AB2     		uxth	r2, r3
 2769 00d0 40F20003 		movw	r3, #:lower16:aBiasRaw
 2770 00d4 C0F20003 		movt	r3, #:upper16:aBiasRaw
 2771 00d8 9B88     		ldrh	r3, [r3, #4]
 2772 00da 9BB2     		uxth	r3, r3
 2773 00dc D31A     		subs	r3, r2, r3
 2774 00de 9BB2     		uxth	r3, r3
 2775 00e0 9AB2     		uxth	r2, r3
 2776 00e2 40F20003 		movw	r3, #:lower16:az
 2777 00e6 C0F20003 		movt	r3, #:upper16:az
 2778 00ea 1A80     		strh	r2, [r3, #0]	@ movhi
 2779              	.L116:
 764:../LSM9DS1_drivers.c **** 	}
 765:../LSM9DS1_drivers.c **** 
 766:../LSM9DS1_drivers.c **** 	ax = calcAccel(ax);
 2780              		.loc 1 766 0
 2781 00ec 40F20003 		movw	r3, #:lower16:ax
 2782 00f0 C0F20003 		movt	r3, #:upper16:ax
 2783 00f4 1B88     		ldrh	r3, [r3, #0]
 2784 00f6 1BB2     		sxth	r3, r3
 2785 00f8 1846     		mov	r0, r3
 2786 00fa FFF7FEFF 		bl	calcAccel
 2787 00fe 07EE900A 		fmsr	s15, r0
 2788 0102 FDEEE77A 		ftosizs	s15, s15
 2789 0106 17EE903A 		fmrs	r3, s15	@ int
 2790 010a 9AB2     		uxth	r2, r3
 2791 010c 40F20003 		movw	r3, #:lower16:ax
 2792 0110 C0F20003 		movt	r3, #:upper16:ax
 2793 0114 1A80     		strh	r2, [r3, #0]	@ movhi
 767:../LSM9DS1_drivers.c **** 	ay = calcAccel(ay);
 2794              		.loc 1 767 0
 2795 0116 40F20003 		movw	r3, #:lower16:ay
 2796 011a C0F20003 		movt	r3, #:upper16:ay
 2797 011e 1B88     		ldrh	r3, [r3, #0]
 2798 0120 1BB2     		sxth	r3, r3
 2799 0122 1846     		mov	r0, r3
 2800 0124 FFF7FEFF 		bl	calcAccel
 2801 0128 07EE900A 		fmsr	s15, r0
 2802 012c FDEEE77A 		ftosizs	s15, s15
 2803 0130 17EE903A 		fmrs	r3, s15	@ int
 2804 0134 9AB2     		uxth	r2, r3
 2805 0136 40F20003 		movw	r3, #:lower16:ay
 2806 013a C0F20003 		movt	r3, #:upper16:ay
 2807 013e 1A80     		strh	r2, [r3, #0]	@ movhi
 768:../LSM9DS1_drivers.c **** 	az = calcAccel(az);
 2808              		.loc 1 768 0
 2809 0140 40F20003 		movw	r3, #:lower16:az
 2810 0144 C0F20003 		movt	r3, #:upper16:az
 2811 0148 1B88     		ldrh	r3, [r3, #0]
 2812 014a 1BB2     		sxth	r3, r3
 2813 014c 1846     		mov	r0, r3
 2814 014e FFF7FEFF 		bl	calcAccel
 2815 0152 07EE900A 		fmsr	s15, r0
 2816 0156 FDEEE77A 		ftosizs	s15, s15
 2817 015a 17EE903A 		fmrs	r3, s15	@ int
 2818 015e 9AB2     		uxth	r2, r3
 2819 0160 40F20003 		movw	r3, #:lower16:az
 2820 0164 C0F20003 		movt	r3, #:upper16:az
 2821 0168 1A80     		strh	r2, [r3, #0]	@ movhi
 769:../LSM9DS1_drivers.c **** 
 770:../LSM9DS1_drivers.c **** 	/*a[accelMeasurementsNum].ax = ax;
 771:../LSM9DS1_drivers.c **** 	a[accelMeasurementsNum].ay = ay;
 772:../LSM9DS1_drivers.c **** 	a[accelMeasurementsNum].az = az;
 773:../LSM9DS1_drivers.c **** 
 774:../LSM9DS1_drivers.c **** 	accelMeasurementsNum++;*/
 775:../LSM9DS1_drivers.c **** 
 776:../LSM9DS1_drivers.c **** 	toAscii(ax, &index);
 2822              		.loc 1 776 0
 2823 016a 40F20003 		movw	r3, #:lower16:ax
 2824 016e C0F20003 		movt	r3, #:upper16:ax
 2825 0172 1B88     		ldrh	r3, [r3, #0]
 2826 0174 1AB2     		sxth	r2, r3
 2827 0176 3B46     		mov	r3, r7
 2828 0178 1046     		mov	r0, r2
 2829 017a 1946     		mov	r1, r3
 2830 017c FFF7FEFF 		bl	toAscii
 777:../LSM9DS1_drivers.c **** 	toAscii(ay, &index);
 2831              		.loc 1 777 0
 2832 0180 40F20003 		movw	r3, #:lower16:ay
 2833 0184 C0F20003 		movt	r3, #:upper16:ay
 2834 0188 1B88     		ldrh	r3, [r3, #0]
 2835 018a 1AB2     		sxth	r2, r3
 2836 018c 3B46     		mov	r3, r7
 2837 018e 1046     		mov	r0, r2
 2838 0190 1946     		mov	r1, r3
 2839 0192 FFF7FEFF 		bl	toAscii
 778:../LSM9DS1_drivers.c **** 	toAscii(az, &index);
 2840              		.loc 1 778 0
 2841 0196 40F20003 		movw	r3, #:lower16:az
 2842 019a C0F20003 		movt	r3, #:upper16:az
 2843 019e 1B88     		ldrh	r3, [r3, #0]
 2844 01a0 1AB2     		sxth	r2, r3
 2845 01a2 3B46     		mov	r3, r7
 2846 01a4 1046     		mov	r0, r2
 2847 01a6 1946     		mov	r1, r3
 2848 01a8 FFF7FEFF 		bl	toAscii
 2849              	.LBB6:
 779:../LSM9DS1_drivers.c **** 
 780:../LSM9DS1_drivers.c **** 	/*lk[0] = '0' + ax;
 781:../LSM9DS1_drivers.c **** 	lk[1] = '0' + ay;
 782:../LSM9DS1_drivers.c **** 	lk[2] = '0' + az;*/
 783:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 2850              		.loc 1 783 0
 2851 01ac 4FF00003 		mov	r3, #0
 2852 01b0 FB60     		str	r3, [r7, #12]
 2853 01b2 0CE0     		b	.L117
 2854              	.L118:
 784:../LSM9DS1_drivers.c **** 	{
 785:../LSM9DS1_drivers.c **** 		accelerationXYZ[k] = 0;
 2855              		.loc 1 785 0 discriminator 2
 2856 01b4 40F20003 		movw	r3, #:lower16:accelerationXYZ
 2857 01b8 C0F20003 		movt	r3, #:upper16:accelerationXYZ
 2858 01bc FA68     		ldr	r2, [r7, #12]
 2859 01be 4FF00001 		mov	r1, #0
 2860 01c2 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 783:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 2861              		.loc 1 783 0 discriminator 2
 2862 01c6 FB68     		ldr	r3, [r7, #12]
 2863 01c8 03F10103 		add	r3, r3, #1
 2864 01cc FB60     		str	r3, [r7, #12]
 2865              	.L117:
 783:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 2866              		.loc 1 783 0 is_stmt 0 discriminator 1
 2867 01ce FB68     		ldr	r3, [r7, #12]
 2868 01d0 052B     		cmp	r3, #5
 2869 01d2 EFDD     		ble	.L118
 2870              	.LBE6:
 786:../LSM9DS1_drivers.c **** 	}
 787:../LSM9DS1_drivers.c **** 
 788:../LSM9DS1_drivers.c **** }
 2871              		.loc 1 788 0 is_stmt 1
 2872 01d4 07F11007 		add	r7, r7, #16
 2873 01d8 BD46     		mov	sp, r7
 2874 01da 80BD     		pop	{r7, pc}
 2875              		.cfi_endproc
 2876              	.LFE137:
 2878              		.section	.text.readAccel1v1,"ax",%progbits
 2879              		.align	2
 2880              		.global	readAccel1v1
 2881              		.thumb
 2882              		.thumb_func
 2884              	readAccel1v1:
 2885              	.LFB138:
 789:../LSM9DS1_drivers.c **** 
 790:../LSM9DS1_drivers.c **** 
 791:../LSM9DS1_drivers.c **** void readAccel1v1(accel *a)
 792:../LSM9DS1_drivers.c **** {
 2886              		.loc 1 792 0
 2887              		.cfi_startproc
 2888              		@ args = 0, pretend = 0, frame = 24
 2889              		@ frame_needed = 1, uses_anonymous_args = 0
 2890 0000 80B5     		push	{r7, lr}
 2891              	.LCFI72:
 2892              		.cfi_def_cfa_offset 8
 2893              		.cfi_offset 7, -8
 2894              		.cfi_offset 14, -4
 2895 0002 86B0     		sub	sp, sp, #24
 2896              	.LCFI73:
 2897              		.cfi_def_cfa_offset 32
 2898 0004 00AF     		add	r7, sp, #0
 2899              	.LCFI74:
 2900              		.cfi_def_cfa_register 7
 2901 0006 7860     		str	r0, [r7, #4]
 793:../LSM9DS1_drivers.c **** 	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp
 794:../LSM9DS1_drivers.c **** 	int index = 0;
 2902              		.loc 1 794 0
 2903 0008 4FF00003 		mov	r3, #0
 2904 000c BB60     		str	r3, [r7, #8]
 795:../LSM9DS1_drivers.c **** 
 796:../LSM9DS1_drivers.c **** 	xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 2905              		.loc 1 796 0
 2906 000e 07F10C03 		add	r3, r7, #12
 2907 0012 4FF02800 		mov	r0, #40
 2908 0016 1946     		mov	r1, r3
 2909 0018 4FF00602 		mov	r2, #6
 2910 001c FFF7FEFF 		bl	xgReadBytes
 797:../LSM9DS1_drivers.c **** 
 798:../LSM9DS1_drivers.c **** 	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 2911              		.loc 1 798 0
 2912 0020 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2913 0022 4FEA0323 		lsl	r3, r3, #8
 2914 0026 9AB2     		uxth	r2, r3
 2915 0028 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 2916 002a 1343     		orrs	r3, r3, r2
 2917 002c 9AB2     		uxth	r2, r3
 2918 002e 40F20003 		movw	r3, #:lower16:ax
 2919 0032 C0F20003 		movt	r3, #:upper16:ax
 2920 0036 1A80     		strh	r2, [r3, #0]	@ movhi
 799:../LSM9DS1_drivers.c **** 	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 2921              		.loc 1 799 0
 2922 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2923 003a 4FEA0323 		lsl	r3, r3, #8
 2924 003e 9AB2     		uxth	r2, r3
 2925 0040 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2926 0042 1343     		orrs	r3, r3, r2
 2927 0044 9AB2     		uxth	r2, r3
 2928 0046 40F20003 		movw	r3, #:lower16:ay
 2929 004a C0F20003 		movt	r3, #:upper16:ay
 2930 004e 1A80     		strh	r2, [r3, #0]	@ movhi
 800:../LSM9DS1_drivers.c **** 	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 2931              		.loc 1 800 0
 2932 0050 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 2933 0052 4FEA0323 		lsl	r3, r3, #8
 2934 0056 9AB2     		uxth	r2, r3
 2935 0058 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 2936 005a 1343     		orrs	r3, r3, r2
 2937 005c 9AB2     		uxth	r2, r3
 2938 005e 40F20003 		movw	r3, #:lower16:az
 2939 0062 C0F20003 		movt	r3, #:upper16:az
 2940 0066 1A80     		strh	r2, [r3, #0]	@ movhi
 801:../LSM9DS1_drivers.c **** 
 802:../LSM9DS1_drivers.c **** 	if (_autoCalc)
 2941              		.loc 1 802 0
 2942 0068 40F20003 		movw	r3, #:lower16:_autoCalc
 2943 006c C0F20003 		movt	r3, #:upper16:_autoCalc
 2944 0070 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2945 0072 002B     		cmp	r3, #0
 2946 0074 3BD0     		beq	.L120
 803:../LSM9DS1_drivers.c **** 	{
 804:../LSM9DS1_drivers.c **** 		ax -= aBiasRaw[X_AXIS];
 2947              		.loc 1 804 0
 2948 0076 40F20003 		movw	r3, #:lower16:ax
 2949 007a C0F20003 		movt	r3, #:upper16:ax
 2950 007e 1B88     		ldrh	r3, [r3, #0]
 2951 0080 9AB2     		uxth	r2, r3
 2952 0082 40F20003 		movw	r3, #:lower16:aBiasRaw
 2953 0086 C0F20003 		movt	r3, #:upper16:aBiasRaw
 2954 008a 1B88     		ldrh	r3, [r3, #0]
 2955 008c 9BB2     		uxth	r3, r3
 2956 008e D31A     		subs	r3, r2, r3
 2957 0090 9BB2     		uxth	r3, r3
 2958 0092 9AB2     		uxth	r2, r3
 2959 0094 40F20003 		movw	r3, #:lower16:ax
 2960 0098 C0F20003 		movt	r3, #:upper16:ax
 2961 009c 1A80     		strh	r2, [r3, #0]	@ movhi
 805:../LSM9DS1_drivers.c **** 		ay -= aBiasRaw[Y_AXIS];
 2962              		.loc 1 805 0
 2963 009e 40F20003 		movw	r3, #:lower16:ay
 2964 00a2 C0F20003 		movt	r3, #:upper16:ay
 2965 00a6 1B88     		ldrh	r3, [r3, #0]
 2966 00a8 9AB2     		uxth	r2, r3
 2967 00aa 40F20003 		movw	r3, #:lower16:aBiasRaw
 2968 00ae C0F20003 		movt	r3, #:upper16:aBiasRaw
 2969 00b2 5B88     		ldrh	r3, [r3, #2]
 2970 00b4 9BB2     		uxth	r3, r3
 2971 00b6 D31A     		subs	r3, r2, r3
 2972 00b8 9BB2     		uxth	r3, r3
 2973 00ba 9AB2     		uxth	r2, r3
 2974 00bc 40F20003 		movw	r3, #:lower16:ay
 2975 00c0 C0F20003 		movt	r3, #:upper16:ay
 2976 00c4 1A80     		strh	r2, [r3, #0]	@ movhi
 806:../LSM9DS1_drivers.c **** 		az -= aBiasRaw[Z_AXIS];
 2977              		.loc 1 806 0
 2978 00c6 40F20003 		movw	r3, #:lower16:az
 2979 00ca C0F20003 		movt	r3, #:upper16:az
 2980 00ce 1B88     		ldrh	r3, [r3, #0]
 2981 00d0 9AB2     		uxth	r2, r3
 2982 00d2 40F20003 		movw	r3, #:lower16:aBiasRaw
 2983 00d6 C0F20003 		movt	r3, #:upper16:aBiasRaw
 2984 00da 9B88     		ldrh	r3, [r3, #4]
 2985 00dc 9BB2     		uxth	r3, r3
 2986 00de D31A     		subs	r3, r2, r3
 2987 00e0 9BB2     		uxth	r3, r3
 2988 00e2 9AB2     		uxth	r2, r3
 2989 00e4 40F20003 		movw	r3, #:lower16:az
 2990 00e8 C0F20003 		movt	r3, #:upper16:az
 2991 00ec 1A80     		strh	r2, [r3, #0]	@ movhi
 2992              	.L120:
 807:../LSM9DS1_drivers.c **** 	}
 808:../LSM9DS1_drivers.c **** 
 809:../LSM9DS1_drivers.c **** 	ax = calcAccel(ax);
 2993              		.loc 1 809 0
 2994 00ee 40F20003 		movw	r3, #:lower16:ax
 2995 00f2 C0F20003 		movt	r3, #:upper16:ax
 2996 00f6 1B88     		ldrh	r3, [r3, #0]
 2997 00f8 1BB2     		sxth	r3, r3
 2998 00fa 1846     		mov	r0, r3
 2999 00fc FFF7FEFF 		bl	calcAccel
 3000 0100 07EE900A 		fmsr	s15, r0
 3001 0104 FDEEE77A 		ftosizs	s15, s15
 3002 0108 17EE903A 		fmrs	r3, s15	@ int
 3003 010c 9AB2     		uxth	r2, r3
 3004 010e 40F20003 		movw	r3, #:lower16:ax
 3005 0112 C0F20003 		movt	r3, #:upper16:ax
 3006 0116 1A80     		strh	r2, [r3, #0]	@ movhi
 810:../LSM9DS1_drivers.c **** 	ay = calcAccel(ay);
 3007              		.loc 1 810 0
 3008 0118 40F20003 		movw	r3, #:lower16:ay
 3009 011c C0F20003 		movt	r3, #:upper16:ay
 3010 0120 1B88     		ldrh	r3, [r3, #0]
 3011 0122 1BB2     		sxth	r3, r3
 3012 0124 1846     		mov	r0, r3
 3013 0126 FFF7FEFF 		bl	calcAccel
 3014 012a 07EE900A 		fmsr	s15, r0
 3015 012e FDEEE77A 		ftosizs	s15, s15
 3016 0132 17EE903A 		fmrs	r3, s15	@ int
 3017 0136 9AB2     		uxth	r2, r3
 3018 0138 40F20003 		movw	r3, #:lower16:ay
 3019 013c C0F20003 		movt	r3, #:upper16:ay
 3020 0140 1A80     		strh	r2, [r3, #0]	@ movhi
 811:../LSM9DS1_drivers.c **** 	az = calcAccel(az);
 3021              		.loc 1 811 0
 3022 0142 40F20003 		movw	r3, #:lower16:az
 3023 0146 C0F20003 		movt	r3, #:upper16:az
 3024 014a 1B88     		ldrh	r3, [r3, #0]
 3025 014c 1BB2     		sxth	r3, r3
 3026 014e 1846     		mov	r0, r3
 3027 0150 FFF7FEFF 		bl	calcAccel
 3028 0154 07EE900A 		fmsr	s15, r0
 3029 0158 FDEEE77A 		ftosizs	s15, s15
 3030 015c 17EE903A 		fmrs	r3, s15	@ int
 3031 0160 9AB2     		uxth	r2, r3
 3032 0162 40F20003 		movw	r3, #:lower16:az
 3033 0166 C0F20003 		movt	r3, #:upper16:az
 3034 016a 1A80     		strh	r2, [r3, #0]	@ movhi
 812:../LSM9DS1_drivers.c **** 
 813:../LSM9DS1_drivers.c **** 
 814:../LSM9DS1_drivers.c **** 	if(accelMeasurementsNum > 99)
 3035              		.loc 1 814 0
 3036 016c 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3037 0170 C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3038 0174 1B68     		ldr	r3, [r3, #0]
 3039 0176 632B     		cmp	r3, #99
 3040 0178 3BDD     		ble	.L121
 815:../LSM9DS1_drivers.c **** 	{
 816:../LSM9DS1_drivers.c **** 		a[accelMeasurementsNum].ax = ax;
 3041              		.loc 1 816 0
 3042 017a 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3043 017e C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3044 0182 1B68     		ldr	r3, [r3, #0]
 3045 0184 1A46     		mov	r2, r3
 3046 0186 1346     		mov	r3, r2
 3047 0188 4FEA4303 		lsl	r3, r3, #1
 3048 018c 9B18     		adds	r3, r3, r2
 3049 018e 4FEA4303 		lsl	r3, r3, #1
 3050 0192 7A68     		ldr	r2, [r7, #4]
 3051 0194 D218     		adds	r2, r2, r3
 3052 0196 40F20003 		movw	r3, #:lower16:ax
 3053 019a C0F20003 		movt	r3, #:upper16:ax
 3054 019e 1B88     		ldrh	r3, [r3, #0]
 3055 01a0 1380     		strh	r3, [r2, #0]	@ movhi
 817:../LSM9DS1_drivers.c **** 		a[accelMeasurementsNum].ay = ay;
 3056              		.loc 1 817 0
 3057 01a2 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3058 01a6 C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3059 01aa 1B68     		ldr	r3, [r3, #0]
 3060 01ac 1A46     		mov	r2, r3
 3061 01ae 1346     		mov	r3, r2
 3062 01b0 4FEA4303 		lsl	r3, r3, #1
 3063 01b4 9B18     		adds	r3, r3, r2
 3064 01b6 4FEA4303 		lsl	r3, r3, #1
 3065 01ba 7A68     		ldr	r2, [r7, #4]
 3066 01bc D218     		adds	r2, r2, r3
 3067 01be 40F20003 		movw	r3, #:lower16:ay
 3068 01c2 C0F20003 		movt	r3, #:upper16:ay
 3069 01c6 1B88     		ldrh	r3, [r3, #0]
 3070 01c8 5380     		strh	r3, [r2, #2]	@ movhi
 818:../LSM9DS1_drivers.c **** 		a[accelMeasurementsNum].az = az;
 3071              		.loc 1 818 0
 3072 01ca 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3073 01ce C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3074 01d2 1B68     		ldr	r3, [r3, #0]
 3075 01d4 1A46     		mov	r2, r3
 3076 01d6 1346     		mov	r3, r2
 3077 01d8 4FEA4303 		lsl	r3, r3, #1
 3078 01dc 9B18     		adds	r3, r3, r2
 3079 01de 4FEA4303 		lsl	r3, r3, #1
 3080 01e2 7A68     		ldr	r2, [r7, #4]
 3081 01e4 D218     		adds	r2, r2, r3
 3082 01e6 40F20003 		movw	r3, #:lower16:az
 3083 01ea C0F20003 		movt	r3, #:upper16:az
 3084 01ee 1B88     		ldrh	r3, [r3, #0]
 3085 01f0 9380     		strh	r3, [r2, #4]	@ movhi
 3086              	.L121:
 819:../LSM9DS1_drivers.c **** 	}
 820:../LSM9DS1_drivers.c **** 
 821:../LSM9DS1_drivers.c **** 	a[accelMeasurementsNum].ax = ax;
 3087              		.loc 1 821 0
 3088 01f2 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3089 01f6 C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3090 01fa 1B68     		ldr	r3, [r3, #0]
 3091 01fc 1A46     		mov	r2, r3
 3092 01fe 1346     		mov	r3, r2
 3093 0200 4FEA4303 		lsl	r3, r3, #1
 3094 0204 9B18     		adds	r3, r3, r2
 3095 0206 4FEA4303 		lsl	r3, r3, #1
 3096 020a 7A68     		ldr	r2, [r7, #4]
 3097 020c D218     		adds	r2, r2, r3
 3098 020e 40F20003 		movw	r3, #:lower16:ax
 3099 0212 C0F20003 		movt	r3, #:upper16:ax
 3100 0216 1B88     		ldrh	r3, [r3, #0]
 3101 0218 1380     		strh	r3, [r2, #0]	@ movhi
 822:../LSM9DS1_drivers.c **** 	a[accelMeasurementsNum].ay = ay;
 3102              		.loc 1 822 0
 3103 021a 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3104 021e C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3105 0222 1B68     		ldr	r3, [r3, #0]
 3106 0224 1A46     		mov	r2, r3
 3107 0226 1346     		mov	r3, r2
 3108 0228 4FEA4303 		lsl	r3, r3, #1
 3109 022c 9B18     		adds	r3, r3, r2
 3110 022e 4FEA4303 		lsl	r3, r3, #1
 3111 0232 7A68     		ldr	r2, [r7, #4]
 3112 0234 D218     		adds	r2, r2, r3
 3113 0236 40F20003 		movw	r3, #:lower16:ay
 3114 023a C0F20003 		movt	r3, #:upper16:ay
 3115 023e 1B88     		ldrh	r3, [r3, #0]
 3116 0240 5380     		strh	r3, [r2, #2]	@ movhi
 823:../LSM9DS1_drivers.c **** 	a[accelMeasurementsNum].az = az;
 3117              		.loc 1 823 0
 3118 0242 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3119 0246 C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3120 024a 1B68     		ldr	r3, [r3, #0]
 3121 024c 1A46     		mov	r2, r3
 3122 024e 1346     		mov	r3, r2
 3123 0250 4FEA4303 		lsl	r3, r3, #1
 3124 0254 9B18     		adds	r3, r3, r2
 3125 0256 4FEA4303 		lsl	r3, r3, #1
 3126 025a 7A68     		ldr	r2, [r7, #4]
 3127 025c D218     		adds	r2, r2, r3
 3128 025e 40F20003 		movw	r3, #:lower16:az
 3129 0262 C0F20003 		movt	r3, #:upper16:az
 3130 0266 1B88     		ldrh	r3, [r3, #0]
 3131 0268 9380     		strh	r3, [r2, #4]	@ movhi
 824:../LSM9DS1_drivers.c **** 
 825:../LSM9DS1_drivers.c **** 	accelMeasurementsNum++;
 3132              		.loc 1 825 0
 3133 026a 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3134 026e C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3135 0272 1B68     		ldr	r3, [r3, #0]
 3136 0274 03F10102 		add	r2, r3, #1
 3137 0278 40F20003 		movw	r3, #:lower16:accelMeasurementsNum
 3138 027c C0F20003 		movt	r3, #:upper16:accelMeasurementsNum
 3139 0280 1A60     		str	r2, [r3, #0]
 826:../LSM9DS1_drivers.c **** 	/*a[accelMeasurementsNum].ax = ax;
 827:../LSM9DS1_drivers.c **** 	a[accelMeasurementsNum].ay = ay;
 828:../LSM9DS1_drivers.c **** 	a[accelMeasurementsNum].az = az;
 829:../LSM9DS1_drivers.c **** 
 830:../LSM9DS1_drivers.c **** 	accelMeasurementsNum++;*/
 831:../LSM9DS1_drivers.c **** 
 832:../LSM9DS1_drivers.c **** 	toAscii(ax, &index);
 3140              		.loc 1 832 0
 3141 0282 40F20003 		movw	r3, #:lower16:ax
 3142 0286 C0F20003 		movt	r3, #:upper16:ax
 3143 028a 1B88     		ldrh	r3, [r3, #0]
 3144 028c 1AB2     		sxth	r2, r3
 3145 028e 07F10803 		add	r3, r7, #8
 3146 0292 1046     		mov	r0, r2
 3147 0294 1946     		mov	r1, r3
 3148 0296 FFF7FEFF 		bl	toAscii
 833:../LSM9DS1_drivers.c **** 	toAscii(ay, &index);
 3149              		.loc 1 833 0
 3150 029a 40F20003 		movw	r3, #:lower16:ay
 3151 029e C0F20003 		movt	r3, #:upper16:ay
 3152 02a2 1B88     		ldrh	r3, [r3, #0]
 3153 02a4 1AB2     		sxth	r2, r3
 3154 02a6 07F10803 		add	r3, r7, #8
 3155 02aa 1046     		mov	r0, r2
 3156 02ac 1946     		mov	r1, r3
 3157 02ae FFF7FEFF 		bl	toAscii
 834:../LSM9DS1_drivers.c **** 	toAscii(az, &index);
 3158              		.loc 1 834 0
 3159 02b2 40F20003 		movw	r3, #:lower16:az
 3160 02b6 C0F20003 		movt	r3, #:upper16:az
 3161 02ba 1B88     		ldrh	r3, [r3, #0]
 3162 02bc 1AB2     		sxth	r2, r3
 3163 02be 07F10803 		add	r3, r7, #8
 3164 02c2 1046     		mov	r0, r2
 3165 02c4 1946     		mov	r1, r3
 3166 02c6 FFF7FEFF 		bl	toAscii
 3167              	.LBB7:
 835:../LSM9DS1_drivers.c **** 
 836:../LSM9DS1_drivers.c **** 	/*lk[0] = '0' + ax;
 837:../LSM9DS1_drivers.c **** 	lk[1] = '0' + ay;
 838:../LSM9DS1_drivers.c **** 	lk[2] = '0' + az;*/
 839:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 3168              		.loc 1 839 0
 3169 02ca 4FF00003 		mov	r3, #0
 3170 02ce 7B61     		str	r3, [r7, #20]
 3171 02d0 0CE0     		b	.L122
 3172              	.L123:
 840:../LSM9DS1_drivers.c **** 	{
 841:../LSM9DS1_drivers.c **** 		accelerationXYZ[k] = 0;
 3173              		.loc 1 841 0 discriminator 2
 3174 02d2 40F20003 		movw	r3, #:lower16:accelerationXYZ
 3175 02d6 C0F20003 		movt	r3, #:upper16:accelerationXYZ
 3176 02da 7A69     		ldr	r2, [r7, #20]
 3177 02dc 4FF00001 		mov	r1, #0
 3178 02e0 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 839:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 3179              		.loc 1 839 0 discriminator 2
 3180 02e4 7B69     		ldr	r3, [r7, #20]
 3181 02e6 03F10103 		add	r3, r3, #1
 3182 02ea 7B61     		str	r3, [r7, #20]
 3183              	.L122:
 839:../LSM9DS1_drivers.c **** 	for(int k = 0; k < 6; k++)
 3184              		.loc 1 839 0 is_stmt 0 discriminator 1
 3185 02ec 7B69     		ldr	r3, [r7, #20]
 3186 02ee 052B     		cmp	r3, #5
 3187 02f0 EFDD     		ble	.L123
 3188              	.LBE7:
 842:../LSM9DS1_drivers.c **** 	}
 843:../LSM9DS1_drivers.c **** }
 3189              		.loc 1 843 0 is_stmt 1
 3190 02f2 07F11807 		add	r7, r7, #24
 3191 02f6 BD46     		mov	sp, r7
 3192 02f8 80BD     		pop	{r7, pc}
 3193              		.cfi_endproc
 3194              	.LFE138:
 3196 02fa 00BF     		.section	.text.toAscii,"ax",%progbits
 3197              		.align	2
 3198              		.global	toAscii
 3199              		.thumb
 3200              		.thumb_func
 3202              	toAscii:
 3203              	.LFB139:
 844:../LSM9DS1_drivers.c **** 
 845:../LSM9DS1_drivers.c **** 
 846:../LSM9DS1_drivers.c **** 
 847:../LSM9DS1_drivers.c **** void toAscii(int16_t accel, int *index)
 848:../LSM9DS1_drivers.c **** {
 3204              		.loc 1 848 0
 3205              		.cfi_startproc
 3206              		@ args = 0, pretend = 0, frame = 16
 3207              		@ frame_needed = 1, uses_anonymous_args = 0
 3208              		@ link register save eliminated.
 3209 0000 80B4     		push	{r7}
 3210              	.LCFI75:
 3211              		.cfi_def_cfa_offset 4
 3212              		.cfi_offset 7, -4
 3213 0002 85B0     		sub	sp, sp, #20
 3214              	.LCFI76:
 3215              		.cfi_def_cfa_offset 24
 3216 0004 00AF     		add	r7, sp, #0
 3217              	.LCFI77:
 3218              		.cfi_def_cfa_register 7
 3219 0006 0346     		mov	r3, r0
 3220 0008 3960     		str	r1, [r7, #0]
 3221 000a FB80     		strh	r3, [r7, #6]	@ movhi
 849:../LSM9DS1_drivers.c **** 	int i  = *index;
 3222              		.loc 1 849 0
 3223 000c 3B68     		ldr	r3, [r7, #0]
 3224 000e 1B68     		ldr	r3, [r3, #0]
 3225 0010 FB60     		str	r3, [r7, #12]
 850:../LSM9DS1_drivers.c **** 
 851:../LSM9DS1_drivers.c **** 	if(accel < 0)
 3226              		.loc 1 851 0
 3227 0012 B7F90630 		ldrsh	r3, [r7, #6]
 3228 0016 002B     		cmp	r3, #0
 3229 0018 21DA     		bge	.L125
 852:../LSM9DS1_drivers.c **** 	{
 853:../LSM9DS1_drivers.c **** 		lk[i] = '-';
 3230              		.loc 1 853 0
 3231 001a 40F20003 		movw	r3, #:lower16:lk
 3232 001e C0F20003 		movt	r3, #:upper16:lk
 3233 0022 FA68     		ldr	r2, [r7, #12]
 3234 0024 9B18     		adds	r3, r3, r2
 3235 0026 4FF02D02 		mov	r2, #45
 3236 002a 1A70     		strb	r2, [r3, #0]
 854:../LSM9DS1_drivers.c **** 
 855:../LSM9DS1_drivers.c **** 		i++;
 3237              		.loc 1 855 0
 3238 002c FB68     		ldr	r3, [r7, #12]
 3239 002e 03F10103 		add	r3, r3, #1
 3240 0032 FB60     		str	r3, [r7, #12]
 856:../LSM9DS1_drivers.c **** 
 857:../LSM9DS1_drivers.c **** 		lk[i] = '0' + abs(accel);
 3241              		.loc 1 857 0
 3242 0034 B7F90630 		ldrsh	r3, [r7, #6]
 3243 0038 002B     		cmp	r3, #0
 3244 003a B8BF     		it	lt
 3245 003c 5B42     		rsblt	r3, r3, #0
 3246 003e DBB2     		uxtb	r3, r3
 3247 0040 03F13003 		add	r3, r3, #48
 3248 0044 DAB2     		uxtb	r2, r3
 3249 0046 40F20003 		movw	r3, #:lower16:lk
 3250 004a C0F20003 		movt	r3, #:upper16:lk
 3251 004e F968     		ldr	r1, [r7, #12]
 3252 0050 5B18     		adds	r3, r3, r1
 3253 0052 1A70     		strb	r2, [r3, #0]
 858:../LSM9DS1_drivers.c **** 
 859:../LSM9DS1_drivers.c **** 		i++;
 3254              		.loc 1 859 0
 3255 0054 FB68     		ldr	r3, [r7, #12]
 3256 0056 03F10103 		add	r3, r3, #1
 3257 005a FB60     		str	r3, [r7, #12]
 3258 005c 13E0     		b	.L126
 3259              	.L125:
 860:../LSM9DS1_drivers.c **** 	}
 861:../LSM9DS1_drivers.c **** 	else
 862:../LSM9DS1_drivers.c **** 	{
 863:../LSM9DS1_drivers.c **** 		lk[i] = '0' + abs(accel);
 3260              		.loc 1 863 0
 3261 005e B7F90630 		ldrsh	r3, [r7, #6]
 3262 0062 002B     		cmp	r3, #0
 3263 0064 B8BF     		it	lt
 3264 0066 5B42     		rsblt	r3, r3, #0
 3265 0068 DBB2     		uxtb	r3, r3
 3266 006a 03F13003 		add	r3, r3, #48
 3267 006e DAB2     		uxtb	r2, r3
 3268 0070 40F20003 		movw	r3, #:lower16:lk
 3269 0074 C0F20003 		movt	r3, #:upper16:lk
 3270 0078 F968     		ldr	r1, [r7, #12]
 3271 007a 5B18     		adds	r3, r3, r1
 3272 007c 1A70     		strb	r2, [r3, #0]
 864:../LSM9DS1_drivers.c **** 
 865:../LSM9DS1_drivers.c **** 		i++;
 3273              		.loc 1 865 0
 3274 007e FB68     		ldr	r3, [r7, #12]
 3275 0080 03F10103 		add	r3, r3, #1
 3276 0084 FB60     		str	r3, [r7, #12]
 3277              	.L126:
 866:../LSM9DS1_drivers.c **** 	}
 867:../LSM9DS1_drivers.c **** 	*index = i;
 3278              		.loc 1 867 0
 3279 0086 3B68     		ldr	r3, [r7, #0]
 3280 0088 FA68     		ldr	r2, [r7, #12]
 3281 008a 1A60     		str	r2, [r3, #0]
 868:../LSM9DS1_drivers.c **** }
 3282              		.loc 1 868 0
 3283 008c 07F11407 		add	r7, r7, #20
 3284 0090 BD46     		mov	sp, r7
 3285 0092 80BC     		pop	{r7}
 3286 0094 7047     		bx	lr
 3287              		.cfi_endproc
 3288              	.LFE139:
 3290              		.global	__aeabi_f2d
 3291              		.global	__aeabi_ddiv
 3292              		.global	__aeabi_d2iz
 3293 0096 00BF     		.section	.text.calibrate,"ax",%progbits
 3294              		.align	2
 3295              		.global	calibrate
 3296              		.thumb
 3297              		.thumb_func
 3299              	calibrate:
 3300              	.LFB140:
 869:../LSM9DS1_drivers.c **** 
 870:../LSM9DS1_drivers.c **** void calibrate(bool autoCalc)
 871:../LSM9DS1_drivers.c **** {
 3301              		.loc 1 871 0
 3302              		.cfi_startproc
 3303              		@ args = 0, pretend = 0, frame = 48
 3304              		@ frame_needed = 1, uses_anonymous_args = 0
 3305 0000 B0B5     		push	{r4, r5, r7, lr}
 3306              	.LCFI78:
 3307              		.cfi_def_cfa_offset 16
 3308              		.cfi_offset 4, -16
 3309              		.cfi_offset 5, -12
 3310              		.cfi_offset 7, -8
 3311              		.cfi_offset 14, -4
 3312 0002 8CB0     		sub	sp, sp, #48
 3313              	.LCFI79:
 3314              		.cfi_def_cfa_offset 64
 3315 0004 00AF     		add	r7, sp, #0
 3316              	.LCFI80:
 3317              		.cfi_def_cfa_register 7
 3318 0006 0346     		mov	r3, r0
 3319 0008 FB71     		strb	r3, [r7, #7]
 872:../LSM9DS1_drivers.c **** 	uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 3320              		.loc 1 872 0
 3321 000a 4FF00003 		mov	r3, #0
 3322 000e 87F82430 		strb	r3, [r7, #36]
 3323 0012 4FF00003 		mov	r3, #0
 3324 0016 87F82530 		strb	r3, [r7, #37]
 3325 001a 4FF00003 		mov	r3, #0
 3326 001e 87F82630 		strb	r3, [r7, #38]
 3327 0022 4FF00003 		mov	r3, #0
 3328 0026 87F82730 		strb	r3, [r7, #39]
 3329 002a 4FF00003 		mov	r3, #0
 3330 002e 87F82830 		strb	r3, [r7, #40]
 3331 0032 4FF00003 		mov	r3, #0
 3332 0036 87F82930 		strb	r3, [r7, #41]
 873:../LSM9DS1_drivers.c **** 	uint8_t samples = 0;
 3333              		.loc 1 873 0
 3334 003a 4FF00003 		mov	r3, #0
 3335 003e 87F82B30 		strb	r3, [r7, #43]
 874:../LSM9DS1_drivers.c **** 	int ii;
 875:../LSM9DS1_drivers.c **** 	int32_t aBiasRawTemp[3] = {0, 0, 0};
 3336              		.loc 1 875 0
 3337 0042 4FF00003 		mov	r3, #0
 3338 0046 BB61     		str	r3, [r7, #24]
 3339 0048 4FF00003 		mov	r3, #0
 3340 004c FB61     		str	r3, [r7, #28]
 3341 004e 4FF00003 		mov	r3, #0
 3342 0052 3B62     		str	r3, [r7, #32]
 876:../LSM9DS1_drivers.c **** 	int32_t gBiasRawTemp[3] = {0, 0, 0};
 3343              		.loc 1 876 0
 3344 0054 4FF00003 		mov	r3, #0
 3345 0058 FB60     		str	r3, [r7, #12]
 3346 005a 4FF00003 		mov	r3, #0
 3347 005e 3B61     		str	r3, [r7, #16]
 3348 0060 4FF00003 		mov	r3, #0
 3349 0064 7B61     		str	r3, [r7, #20]
 877:../LSM9DS1_drivers.c **** 
 878:../LSM9DS1_drivers.c **** 	// Turn on FIFO and set threshold to 32 samples
 879:../LSM9DS1_drivers.c **** 	enableFIFO(TRUE);
 3350              		.loc 1 879 0
 3351 0066 4FF00100 		mov	r0, #1
 3352 006a FFF7FEFF 		bl	enableFIFO
 880:../LSM9DS1_drivers.c **** 	setFIFO(FIFO_THS, 0x1F);
 3353              		.loc 1 880 0
 3354 006e 4FF00100 		mov	r0, #1
 3355 0072 4FF01F01 		mov	r1, #31
 3356 0076 FFF7FEFF 		bl	setFIFO
 881:../LSM9DS1_drivers.c **** 	/*while (samples < 29)
 882:../LSM9DS1_drivers.c **** 	{*/
 883:../LSM9DS1_drivers.c **** 		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 3357              		.loc 1 883 0
 3358 007a 4FF02F00 		mov	r0, #47
 3359 007e FFF7FEFF 		bl	xgReadByte
 3360 0082 0346     		mov	r3, r0
 3361 0084 03F03F03 		and	r3, r3, #63
 3362 0088 87F82B30 		strb	r3, [r7, #43]
 884:../LSM9DS1_drivers.c **** 		samples = 10;
 3363              		.loc 1 884 0
 3364 008c 4FF00A03 		mov	r3, #10
 3365 0090 87F82B30 		strb	r3, [r7, #43]
 885:../LSM9DS1_drivers.c **** 	//}
 886:../LSM9DS1_drivers.c **** 	for(ii = 0; ii < samples ; ii++)
 3366              		.loc 1 886 0
 3367 0094 4FF00003 		mov	r3, #0
 3368 0098 FB62     		str	r3, [r7, #44]
 3369 009a 59E0     		b	.L128
 3370              	.L129:
 887:../LSM9DS1_drivers.c **** 	{	// Read the gyro data stored in the FIFO
 888:../LSM9DS1_drivers.c **** 		readGyro1();
 3371              		.loc 1 888 0 discriminator 2
 3372 009c FFF7FEFF 		bl	readGyro1
 889:../LSM9DS1_drivers.c **** 		gBiasRawTemp[0] += gx;
 3373              		.loc 1 889 0 discriminator 2
 3374 00a0 FA68     		ldr	r2, [r7, #12]
 3375 00a2 40F20003 		movw	r3, #:lower16:gx
 3376 00a6 C0F20003 		movt	r3, #:upper16:gx
 3377 00aa 1B88     		ldrh	r3, [r3, #0]
 3378 00ac 1BB2     		sxth	r3, r3
 3379 00ae D318     		adds	r3, r2, r3
 3380 00b0 FB60     		str	r3, [r7, #12]
 890:../LSM9DS1_drivers.c **** 		gBiasRawTemp[1] += gy;
 3381              		.loc 1 890 0 discriminator 2
 3382 00b2 3A69     		ldr	r2, [r7, #16]
 3383 00b4 40F20003 		movw	r3, #:lower16:gy
 3384 00b8 C0F20003 		movt	r3, #:upper16:gy
 3385 00bc 1B88     		ldrh	r3, [r3, #0]
 3386 00be 1BB2     		sxth	r3, r3
 3387 00c0 D318     		adds	r3, r2, r3
 3388 00c2 3B61     		str	r3, [r7, #16]
 891:../LSM9DS1_drivers.c **** 		gBiasRawTemp[2] += gz;
 3389              		.loc 1 891 0 discriminator 2
 3390 00c4 7A69     		ldr	r2, [r7, #20]
 3391 00c6 40F20003 		movw	r3, #:lower16:gz
 3392 00ca C0F20003 		movt	r3, #:upper16:gz
 3393 00ce 1B88     		ldrh	r3, [r3, #0]
 3394 00d0 1BB2     		sxth	r3, r3
 3395 00d2 D318     		adds	r3, r2, r3
 3396 00d4 7B61     		str	r3, [r7, #20]
 892:../LSM9DS1_drivers.c **** 
 893:../LSM9DS1_drivers.c **** 		readAccel1();
 3397              		.loc 1 893 0 discriminator 2
 3398 00d6 FFF7FEFF 		bl	readAccel1
 894:../LSM9DS1_drivers.c **** 		aBiasRawTemp[0] += ax;
 3399              		.loc 1 894 0 discriminator 2
 3400 00da BA69     		ldr	r2, [r7, #24]
 3401 00dc 40F20003 		movw	r3, #:lower16:ax
 3402 00e0 C0F20003 		movt	r3, #:upper16:ax
 3403 00e4 1B88     		ldrh	r3, [r3, #0]
 3404 00e6 1BB2     		sxth	r3, r3
 3405 00e8 D318     		adds	r3, r2, r3
 3406 00ea BB61     		str	r3, [r7, #24]
 895:../LSM9DS1_drivers.c **** 		aBiasRawTemp[1] += ay;
 3407              		.loc 1 895 0 discriminator 2
 3408 00ec FA69     		ldr	r2, [r7, #28]
 3409 00ee 40F20003 		movw	r3, #:lower16:ay
 3410 00f2 C0F20003 		movt	r3, #:upper16:ay
 3411 00f6 1B88     		ldrh	r3, [r3, #0]
 3412 00f8 1BB2     		sxth	r3, r3
 3413 00fa D318     		adds	r3, r2, r3
 3414 00fc FB61     		str	r3, [r7, #28]
 896:../LSM9DS1_drivers.c **** 		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 3415              		.loc 1 896 0 discriminator 2
 3416 00fe 3C6A     		ldr	r4, [r7, #32]
 3417 0100 40F20003 		movw	r3, #:lower16:az
 3418 0104 C0F20003 		movt	r3, #:upper16:az
 3419 0108 1B88     		ldrh	r3, [r3, #0]
 3420 010a 1DB2     		sxth	r5, r3
 3421 010c 40F20003 		movw	r3, #:lower16:aRes
 3422 0110 C0F20003 		movt	r3, #:upper16:aRes
 3423 0114 1B68     		ldr	r3, [r3, #0]	@ float
 3424 0116 1846     		mov	r0, r3	@ float
 3425 0118 FFF7FEFF 		bl	__aeabi_f2d
 3426 011c 0246     		mov	r2, r0
 3427 011e 0B46     		mov	r3, r1
 3428 0120 4FF00000 		mov	r0, #0
 3429 0124 4FF00001 		mov	r1, #0
 3430 0128 C3F6F071 		movt	r1, 16368
 3431 012c FFF7FEFF 		bl	__aeabi_ddiv
 3432 0130 0246     		mov	r2, r0
 3433 0132 0B46     		mov	r3, r1
 3434 0134 1046     		mov	r0, r2
 3435 0136 1946     		mov	r1, r3
 3436 0138 FFF7FEFF 		bl	__aeabi_d2iz
 3437 013c 0346     		mov	r3, r0
 3438 013e 9BB2     		uxth	r3, r3
 3439 0140 1BB2     		sxth	r3, r3
 3440 0142 EB1A     		subs	r3, r5, r3
 3441 0144 E318     		adds	r3, r4, r3
 3442 0146 3B62     		str	r3, [r7, #32]
 886:../LSM9DS1_drivers.c **** 	for(ii = 0; ii < samples ; ii++)
 3443              		.loc 1 886 0 discriminator 2
 3444 0148 FB6A     		ldr	r3, [r7, #44]
 3445 014a 03F10103 		add	r3, r3, #1
 3446 014e FB62     		str	r3, [r7, #44]
 3447              	.L128:
 886:../LSM9DS1_drivers.c **** 	for(ii = 0; ii < samples ; ii++)
 3448              		.loc 1 886 0 is_stmt 0 discriminator 1
 3449 0150 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 3450 0154 FB6A     		ldr	r3, [r7, #44]
 3451 0156 9A42     		cmp	r2, r3
 3452 0158 A0DC     		bgt	.L129
 897:../LSM9DS1_drivers.c **** 	}
 898:../LSM9DS1_drivers.c **** 	for (ii = 0; ii < 3; ii++)
 3453              		.loc 1 898 0 is_stmt 1
 3454 015a 4FF00003 		mov	r3, #0
 3455 015e FB62     		str	r3, [r7, #44]
 3456 0160 55E0     		b	.L130
 3457              	.L131:
 899:../LSM9DS1_drivers.c **** 	{
 900:../LSM9DS1_drivers.c **** 		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 3458              		.loc 1 900 0 discriminator 2
 3459 0162 FB6A     		ldr	r3, [r7, #44]
 3460 0164 4FEA8303 		lsl	r3, r3, #2
 3461 0168 07F13002 		add	r2, r7, #48
 3462 016c D318     		adds	r3, r2, r3
 3463 016e 53F8242C 		ldr	r2, [r3, #-36]
 3464 0172 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 3465 0176 92FBF3F3 		sdiv	r3, r2, r3
 3466 017a 99B2     		uxth	r1, r3
 3467 017c 40F20003 		movw	r3, #:lower16:gBiasRaw
 3468 0180 C0F20003 		movt	r3, #:upper16:gBiasRaw
 3469 0184 FA6A     		ldr	r2, [r7, #44]
 3470 0186 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 901:../LSM9DS1_drivers.c **** 		gBias[ii] = calcGyro(gBiasRaw[ii]);
 3471              		.loc 1 901 0 discriminator 2
 3472 018a 40F20003 		movw	r3, #:lower16:gBiasRaw
 3473 018e C0F20003 		movt	r3, #:upper16:gBiasRaw
 3474 0192 FA6A     		ldr	r2, [r7, #44]
 3475 0194 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3476 0198 1BB2     		sxth	r3, r3
 3477 019a 1846     		mov	r0, r3
 3478 019c FFF7FEFF 		bl	calcGyro
 3479 01a0 0246     		mov	r2, r0	@ float
 3480 01a2 40F20003 		movw	r3, #:lower16:gBias
 3481 01a6 C0F20003 		movt	r3, #:upper16:gBias
 3482 01aa F96A     		ldr	r1, [r7, #44]
 3483 01ac 4FEA8101 		lsl	r1, r1, #2
 3484 01b0 5B18     		adds	r3, r3, r1
 3485 01b2 1A60     		str	r2, [r3, #0]	@ float
 902:../LSM9DS1_drivers.c **** 		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 3486              		.loc 1 902 0 discriminator 2
 3487 01b4 FB6A     		ldr	r3, [r7, #44]
 3488 01b6 4FEA8303 		lsl	r3, r3, #2
 3489 01ba 07F13002 		add	r2, r7, #48
 3490 01be D318     		adds	r3, r2, r3
 3491 01c0 53F8182C 		ldr	r2, [r3, #-24]
 3492 01c4 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 3493 01c8 92FBF3F3 		sdiv	r3, r2, r3
 3494 01cc 99B2     		uxth	r1, r3
 3495 01ce 40F20003 		movw	r3, #:lower16:aBiasRaw
 3496 01d2 C0F20003 		movt	r3, #:upper16:aBiasRaw
 3497 01d6 FA6A     		ldr	r2, [r7, #44]
 3498 01d8 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 903:../LSM9DS1_drivers.c **** 		aBias[ii] = calcAccel(aBiasRaw[ii]);
 3499              		.loc 1 903 0 discriminator 2
 3500 01dc 40F20003 		movw	r3, #:lower16:aBiasRaw
 3501 01e0 C0F20003 		movt	r3, #:upper16:aBiasRaw
 3502 01e4 FA6A     		ldr	r2, [r7, #44]
 3503 01e6 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3504 01ea 1BB2     		sxth	r3, r3
 3505 01ec 1846     		mov	r0, r3
 3506 01ee FFF7FEFF 		bl	calcAccel
 3507 01f2 0246     		mov	r2, r0	@ float
 3508 01f4 40F20003 		movw	r3, #:lower16:aBias
 3509 01f8 C0F20003 		movt	r3, #:upper16:aBias
 3510 01fc F96A     		ldr	r1, [r7, #44]
 3511 01fe 4FEA8101 		lsl	r1, r1, #2
 3512 0202 5B18     		adds	r3, r3, r1
 3513 0204 1A60     		str	r2, [r3, #0]	@ float
 898:../LSM9DS1_drivers.c **** 	for (ii = 0; ii < 3; ii++)
 3514              		.loc 1 898 0 discriminator 2
 3515 0206 FB6A     		ldr	r3, [r7, #44]
 3516 0208 03F10103 		add	r3, r3, #1
 3517 020c FB62     		str	r3, [r7, #44]
 3518              	.L130:
 898:../LSM9DS1_drivers.c **** 	for (ii = 0; ii < 3; ii++)
 3519              		.loc 1 898 0 is_stmt 0 discriminator 1
 3520 020e FB6A     		ldr	r3, [r7, #44]
 3521 0210 022B     		cmp	r3, #2
 3522 0212 A6DD     		ble	.L131
 904:../LSM9DS1_drivers.c **** 	}
 905:../LSM9DS1_drivers.c **** 
 906:../LSM9DS1_drivers.c **** 	enableFIFO(FALSE);
 3523              		.loc 1 906 0 is_stmt 1
 3524 0214 4FF00000 		mov	r0, #0
 3525 0218 FFF7FEFF 		bl	enableFIFO
 907:../LSM9DS1_drivers.c **** 	setFIFO(FIFO_OFF, 0x00);
 3526              		.loc 1 907 0
 3527 021c 4FF00000 		mov	r0, #0
 3528 0220 4FF00001 		mov	r1, #0
 3529 0224 FFF7FEFF 		bl	setFIFO
 908:../LSM9DS1_drivers.c **** 
 909:../LSM9DS1_drivers.c **** 	if (autoCalc) _autoCalc = TRUE;
 3530              		.loc 1 909 0
 3531 0228 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3532 022a 002B     		cmp	r3, #0
 3533 022c 06D0     		beq	.L127
 3534              		.loc 1 909 0 is_stmt 0 discriminator 1
 3535 022e 40F20003 		movw	r3, #:lower16:_autoCalc
 3536 0232 C0F20003 		movt	r3, #:upper16:_autoCalc
 3537 0236 4FF00102 		mov	r2, #1
 3538 023a 1A70     		strb	r2, [r3, #0]
 3539              	.L127:
 910:../LSM9DS1_drivers.c **** }
 3540              		.loc 1 910 0 is_stmt 1
 3541 023c 07F13007 		add	r7, r7, #48
 3542 0240 BD46     		mov	sp, r7
 3543 0242 B0BD     		pop	{r4, r5, r7, pc}
 3544              		.cfi_endproc
 3545              	.LFE140:
 3547              		.section	.text.magAvailable,"ax",%progbits
 3548              		.align	2
 3549              		.global	magAvailable
 3550              		.thumb
 3551              		.thumb_func
 3553              	magAvailable:
 3554              	.LFB141:
 911:../LSM9DS1_drivers.c **** 
 912:../LSM9DS1_drivers.c **** uint8_t magAvailable(lsm9ds1_axis axis)
 913:../LSM9DS1_drivers.c **** {
 3555              		.loc 1 913 0
 3556              		.cfi_startproc
 3557              		@ args = 0, pretend = 0, frame = 16
 3558              		@ frame_needed = 1, uses_anonymous_args = 0
 3559 0000 80B5     		push	{r7, lr}
 3560              	.LCFI81:
 3561              		.cfi_def_cfa_offset 8
 3562              		.cfi_offset 7, -8
 3563              		.cfi_offset 14, -4
 3564 0002 84B0     		sub	sp, sp, #16
 3565              	.LCFI82:
 3566              		.cfi_def_cfa_offset 24
 3567 0004 00AF     		add	r7, sp, #0
 3568              	.LCFI83:
 3569              		.cfi_def_cfa_register 7
 3570 0006 0346     		mov	r3, r0
 3571 0008 FB71     		strb	r3, [r7, #7]
 914:../LSM9DS1_drivers.c **** 	uint8_t status;
 915:../LSM9DS1_drivers.c **** 	status = mReadByte(STATUS_REG_M);
 3572              		.loc 1 915 0
 3573 000a 4FF02700 		mov	r0, #39
 3574 000e FFF7FEFF 		bl	mReadByte
 3575 0012 0346     		mov	r3, r0
 3576 0014 FB73     		strb	r3, [r7, #15]
 916:../LSM9DS1_drivers.c **** 
 917:../LSM9DS1_drivers.c **** 	return ((status & (1<<axis)) >> axis);
 3577              		.loc 1 917 0
 3578 0016 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 3579 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3580 001a 4FF00101 		mov	r1, #1
 3581 001e 01FA03F3 		lsl	r3, r1, r3
 3582 0022 1A40     		ands	r2, r2, r3
 3583 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3584 0026 42FA03F3 		asr	r3, r2, r3
 3585 002a DBB2     		uxtb	r3, r3
 918:../LSM9DS1_drivers.c **** }
 3586              		.loc 1 918 0
 3587 002c 1846     		mov	r0, r3
 3588 002e 07F11007 		add	r7, r7, #16
 3589 0032 BD46     		mov	sp, r7
 3590 0034 80BD     		pop	{r7, pc}
 3591              		.cfi_endproc
 3592              	.LFE141:
 3594 0036 00BF     		.section	.text.readMag1,"ax",%progbits
 3595              		.align	2
 3596              		.global	readMag1
 3597              		.thumb
 3598              		.thumb_func
 3600              	readMag1:
 3601              	.LFB142:
 919:../LSM9DS1_drivers.c **** 
 920:../LSM9DS1_drivers.c **** void readMag1(void)
 921:../LSM9DS1_drivers.c **** {
 3602              		.loc 1 921 0
 3603              		.cfi_startproc
 3604              		@ args = 0, pretend = 0, frame = 8
 3605              		@ frame_needed = 1, uses_anonymous_args = 0
 3606 0000 80B5     		push	{r7, lr}
 3607              	.LCFI84:
 3608              		.cfi_def_cfa_offset 8
 3609              		.cfi_offset 7, -8
 3610              		.cfi_offset 14, -4
 3611 0002 82B0     		sub	sp, sp, #8
 3612              	.LCFI85:
 3613              		.cfi_def_cfa_offset 16
 3614 0004 00AF     		add	r7, sp, #0
 3615              	.LCFI86:
 3616              		.cfi_def_cfa_register 7
 922:../LSM9DS1_drivers.c **** 	//for(int kl = 0; kl < 10; kl++){
 923:../LSM9DS1_drivers.c **** 	uint8_t temp[6]; // We'll read six bytes from the mag into temp
 924:../LSM9DS1_drivers.c **** 	mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 3617              		.loc 1 924 0
 3618 0006 3B46     		mov	r3, r7
 3619 0008 4FF02800 		mov	r0, #40
 3620 000c 1946     		mov	r1, r3
 3621 000e 4FF00602 		mov	r2, #6
 3622 0012 FFF7FEFF 		bl	mReadBytes
 925:../LSM9DS1_drivers.c **** 	mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 3623              		.loc 1 925 0
 3624 0016 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3625 0018 4FEA0323 		lsl	r3, r3, #8
 3626 001c 9AB2     		uxth	r2, r3
 3627 001e 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 3628 0020 1343     		orrs	r3, r3, r2
 3629 0022 9AB2     		uxth	r2, r3
 3630 0024 40F20003 		movw	r3, #:lower16:mx
 3631 0028 C0F20003 		movt	r3, #:upper16:mx
 3632 002c 1A80     		strh	r2, [r3, #0]	@ movhi
 926:../LSM9DS1_drivers.c **** 	my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 3633              		.loc 1 926 0
 3634 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3635 0030 4FEA0323 		lsl	r3, r3, #8
 3636 0034 9AB2     		uxth	r2, r3
 3637 0036 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 3638 0038 1343     		orrs	r3, r3, r2
 3639 003a 9AB2     		uxth	r2, r3
 3640 003c 40F20003 		movw	r3, #:lower16:my
 3641 0040 C0F20003 		movt	r3, #:upper16:my
 3642 0044 1A80     		strh	r2, [r3, #0]	@ movhi
 927:../LSM9DS1_drivers.c **** 	mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 3643              		.loc 1 927 0
 3644 0046 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 3645 0048 4FEA0323 		lsl	r3, r3, #8
 3646 004c 9AB2     		uxth	r2, r3
 3647 004e 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 3648 0050 1343     		orrs	r3, r3, r2
 3649 0052 9AB2     		uxth	r2, r3
 3650 0054 40F20003 		movw	r3, #:lower16:mz
 3651 0058 C0F20003 		movt	r3, #:upper16:mz
 3652 005c 1A80     		strh	r2, [r3, #0]	@ movhi
 928:../LSM9DS1_drivers.c **** 
 929:../LSM9DS1_drivers.c **** 	mx = calcMag(mx);
 3653              		.loc 1 929 0
 3654 005e 40F20003 		movw	r3, #:lower16:mx
 3655 0062 C0F20003 		movt	r3, #:upper16:mx
 3656 0066 1B88     		ldrh	r3, [r3, #0]
 3657 0068 1BB2     		sxth	r3, r3
 3658 006a 1846     		mov	r0, r3
 3659 006c FFF7FEFF 		bl	calcMag
 3660 0070 07EE900A 		fmsr	s15, r0
 3661 0074 FDEEE77A 		ftosizs	s15, s15
 3662 0078 17EE903A 		fmrs	r3, s15	@ int
 3663 007c 9AB2     		uxth	r2, r3
 3664 007e 40F20003 		movw	r3, #:lower16:mx
 3665 0082 C0F20003 		movt	r3, #:upper16:mx
 3666 0086 1A80     		strh	r2, [r3, #0]	@ movhi
 930:../LSM9DS1_drivers.c **** 	my = calcMag(my);
 3667              		.loc 1 930 0
 3668 0088 40F20003 		movw	r3, #:lower16:my
 3669 008c C0F20003 		movt	r3, #:upper16:my
 3670 0090 1B88     		ldrh	r3, [r3, #0]
 3671 0092 1BB2     		sxth	r3, r3
 3672 0094 1846     		mov	r0, r3
 3673 0096 FFF7FEFF 		bl	calcMag
 3674 009a 07EE900A 		fmsr	s15, r0
 3675 009e FDEEE77A 		ftosizs	s15, s15
 3676 00a2 17EE903A 		fmrs	r3, s15	@ int
 3677 00a6 9AB2     		uxth	r2, r3
 3678 00a8 40F20003 		movw	r3, #:lower16:my
 3679 00ac C0F20003 		movt	r3, #:upper16:my
 3680 00b0 1A80     		strh	r2, [r3, #0]	@ movhi
 931:../LSM9DS1_drivers.c **** 	mz = calcMag(mz);
 3681              		.loc 1 931 0
 3682 00b2 40F20003 		movw	r3, #:lower16:mz
 3683 00b6 C0F20003 		movt	r3, #:upper16:mz
 3684 00ba 1B88     		ldrh	r3, [r3, #0]
 3685 00bc 1BB2     		sxth	r3, r3
 3686 00be 1846     		mov	r0, r3
 3687 00c0 FFF7FEFF 		bl	calcMag
 3688 00c4 07EE900A 		fmsr	s15, r0
 3689 00c8 FDEEE77A 		ftosizs	s15, s15
 3690 00cc 17EE903A 		fmrs	r3, s15	@ int
 3691 00d0 9AB2     		uxth	r2, r3
 3692 00d2 40F20003 		movw	r3, #:lower16:mz
 3693 00d6 C0F20003 		movt	r3, #:upper16:mz
 3694 00da 1A80     		strh	r2, [r3, #0]	@ movhi
 932:../LSM9DS1_drivers.c **** 	/*}*/
 933:../LSM9DS1_drivers.c **** 
 934:../LSM9DS1_drivers.c **** 
 935:../LSM9DS1_drivers.c **** }
 3695              		.loc 1 935 0
 3696 00dc 07F10807 		add	r7, r7, #8
 3697 00e0 BD46     		mov	sp, r7
 3698 00e2 80BD     		pop	{r7, pc}
 3699              		.cfi_endproc
 3700              	.LFE142:
 3702              		.section	.text.calibrateMag,"ax",%progbits
 3703              		.align	2
 3704              		.global	calibrateMag
 3705              		.thumb
 3706              		.thumb_func
 3708              	calibrateMag:
 3709              	.LFB143:
 936:../LSM9DS1_drivers.c **** 
 937:../LSM9DS1_drivers.c **** void calibrateMag(bool loadIn)
 938:../LSM9DS1_drivers.c **** {
 3710              		.loc 1 938 0
 3711              		.cfi_startproc
 3712              		@ args = 0, pretend = 0, frame = 40
 3713              		@ frame_needed = 1, uses_anonymous_args = 0
 3714 0000 80B5     		push	{r7, lr}
 3715              	.LCFI87:
 3716              		.cfi_def_cfa_offset 8
 3717              		.cfi_offset 7, -8
 3718              		.cfi_offset 14, -4
 3719 0002 8AB0     		sub	sp, sp, #40
 3720              	.LCFI88:
 3721              		.cfi_def_cfa_offset 48
 3722 0004 00AF     		add	r7, sp, #0
 3723              	.LCFI89:
 3724              		.cfi_def_cfa_register 7
 3725 0006 0346     		mov	r3, r0
 3726 0008 FB71     		strb	r3, [r7, #7]
 939:../LSM9DS1_drivers.c **** 	int i, j;
 940:../LSM9DS1_drivers.c **** 	int16_t magMin[3] = {0, 0, 0};
 3727              		.loc 1 940 0
 3728 000a 4FF00003 		mov	r3, #0
 3729 000e 3B83     		strh	r3, [r7, #24]	@ movhi
 3730 0010 4FF00003 		mov	r3, #0
 3731 0014 7B83     		strh	r3, [r7, #26]	@ movhi
 3732 0016 4FF00003 		mov	r3, #0
 3733 001a BB83     		strh	r3, [r7, #28]	@ movhi
 941:../LSM9DS1_drivers.c **** 	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 3734              		.loc 1 941 0
 3735 001c 4FF00003 		mov	r3, #0
 3736 0020 3B82     		strh	r3, [r7, #16]	@ movhi
 3737 0022 4FF00003 		mov	r3, #0
 3738 0026 7B82     		strh	r3, [r7, #18]	@ movhi
 3739 0028 4FF00003 		mov	r3, #0
 3740 002c BB82     		strh	r3, [r7, #20]	@ movhi
 942:../LSM9DS1_drivers.c **** 
 943:../LSM9DS1_drivers.c **** 	for (i=0; i<128; i++)
 3741              		.loc 1 943 0
 3742 002e 4FF00003 		mov	r3, #0
 3743 0032 7B62     		str	r3, [r7, #36]
 3744 0034 7CE0     		b	.L137
 3745              	.L147:
 3746              	.LBB8:
 944:../LSM9DS1_drivers.c **** 	{
 945:../LSM9DS1_drivers.c **** 		//tu nie wiem
 946:../LSM9DS1_drivers.c **** 		while (!magAvailable(i))
 3747              		.loc 1 946 0
 3748 0036 00BF     		nop
 3749              	.L138:
 3750              		.loc 1 946 0 is_stmt 0 discriminator 1
 3751 0038 7B6A     		ldr	r3, [r7, #36]
 3752 003a DBB2     		uxtb	r3, r3
 3753 003c 1846     		mov	r0, r3
 3754 003e FFF7FEFF 		bl	magAvailable
 3755 0042 0346     		mov	r3, r0
 3756 0044 002B     		cmp	r3, #0
 3757 0046 F7D0     		beq	.L138
 947:../LSM9DS1_drivers.c **** 			;
 948:../LSM9DS1_drivers.c **** 		readMag1();
 3758              		.loc 1 948 0 is_stmt 1
 3759 0048 FFF7FEFF 		bl	readMag1
 949:../LSM9DS1_drivers.c **** 		int16_t magTemp[3] = {0, 0, 0};
 3760              		.loc 1 949 0
 3761 004c 4FF00003 		mov	r3, #0
 3762 0050 3B81     		strh	r3, [r7, #8]	@ movhi
 3763 0052 4FF00003 		mov	r3, #0
 3764 0056 7B81     		strh	r3, [r7, #10]	@ movhi
 3765 0058 4FF00003 		mov	r3, #0
 3766 005c BB81     		strh	r3, [r7, #12]	@ movhi
 950:../LSM9DS1_drivers.c **** 		magTemp[0] = mx;
 3767              		.loc 1 950 0
 3768 005e 40F20003 		movw	r3, #:lower16:mx
 3769 0062 C0F20003 		movt	r3, #:upper16:mx
 3770 0066 1B88     		ldrh	r3, [r3, #0]
 3771 0068 3B81     		strh	r3, [r7, #8]	@ movhi
 951:../LSM9DS1_drivers.c **** 		magTemp[1] = my;
 3772              		.loc 1 951 0
 3773 006a 40F20003 		movw	r3, #:lower16:my
 3774 006e C0F20003 		movt	r3, #:upper16:my
 3775 0072 1B88     		ldrh	r3, [r3, #0]
 3776 0074 7B81     		strh	r3, [r7, #10]	@ movhi
 952:../LSM9DS1_drivers.c **** 		magTemp[2] = mz;
 3777              		.loc 1 952 0
 3778 0076 40F20003 		movw	r3, #:lower16:mz
 3779 007a C0F20003 		movt	r3, #:upper16:mz
 3780 007e 1B88     		ldrh	r3, [r3, #0]
 3781 0080 BB81     		strh	r3, [r7, #12]	@ movhi
 953:../LSM9DS1_drivers.c **** 		for (j = 0; j < 3; j++)
 3782              		.loc 1 953 0
 3783 0082 4FF00003 		mov	r3, #0
 3784 0086 3B62     		str	r3, [r7, #32]
 3785 0088 4BE0     		b	.L139
 3786              	.L142:
 954:../LSM9DS1_drivers.c **** 		{
 955:../LSM9DS1_drivers.c **** 			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 3787              		.loc 1 955 0
 3788 008a 3B6A     		ldr	r3, [r7, #32]
 3789 008c 4FEA4303 		lsl	r3, r3, #1
 3790 0090 07F12801 		add	r1, r7, #40
 3791 0094 CB18     		adds	r3, r1, r3
 3792 0096 33F8202C 		ldrh	r2, [r3, #-32]
 3793 009a 3B6A     		ldr	r3, [r7, #32]
 3794 009c 4FEA4303 		lsl	r3, r3, #1
 3795 00a0 07F12801 		add	r1, r7, #40
 3796 00a4 CB18     		adds	r3, r1, r3
 3797 00a6 33F8183C 		ldrh	r3, [r3, #-24]
 3798 00aa 12B2     		sxth	r2, r2
 3799 00ac 1BB2     		sxth	r3, r3
 3800 00ae 9A42     		cmp	r2, r3
 3801 00b0 0FDD     		ble	.L140
 3802              		.loc 1 955 0 is_stmt 0 discriminator 1
 3803 00b2 3B6A     		ldr	r3, [r7, #32]
 3804 00b4 4FEA4303 		lsl	r3, r3, #1
 3805 00b8 07F12802 		add	r2, r7, #40
 3806 00bc D318     		adds	r3, r2, r3
 3807 00be 33F8202C 		ldrh	r2, [r3, #-32]
 3808 00c2 3B6A     		ldr	r3, [r7, #32]
 3809 00c4 4FEA4303 		lsl	r3, r3, #1
 3810 00c8 07F12801 		add	r1, r7, #40
 3811 00cc CB18     		adds	r3, r1, r3
 3812 00ce 23F8182C 		strh	r2, [r3, #-24]	@ movhi
 3813              	.L140:
 956:../LSM9DS1_drivers.c **** 			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 3814              		.loc 1 956 0 is_stmt 1
 3815 00d2 3B6A     		ldr	r3, [r7, #32]
 3816 00d4 4FEA4303 		lsl	r3, r3, #1
 3817 00d8 07F12802 		add	r2, r7, #40
 3818 00dc D318     		adds	r3, r2, r3
 3819 00de 33F8202C 		ldrh	r2, [r3, #-32]
 3820 00e2 3B6A     		ldr	r3, [r7, #32]
 3821 00e4 4FEA4303 		lsl	r3, r3, #1
 3822 00e8 07F12801 		add	r1, r7, #40
 3823 00ec CB18     		adds	r3, r1, r3
 3824 00ee 33F8103C 		ldrh	r3, [r3, #-16]
 3825 00f2 12B2     		sxth	r2, r2
 3826 00f4 1BB2     		sxth	r3, r3
 3827 00f6 9A42     		cmp	r2, r3
 3828 00f8 0FDA     		bge	.L141
 3829              		.loc 1 956 0 is_stmt 0 discriminator 1
 3830 00fa 3B6A     		ldr	r3, [r7, #32]
 3831 00fc 4FEA4303 		lsl	r3, r3, #1
 3832 0100 07F12802 		add	r2, r7, #40
 3833 0104 D318     		adds	r3, r2, r3
 3834 0106 33F8202C 		ldrh	r2, [r3, #-32]
 3835 010a 3B6A     		ldr	r3, [r7, #32]
 3836 010c 4FEA4303 		lsl	r3, r3, #1
 3837 0110 07F12801 		add	r1, r7, #40
 3838 0114 CB18     		adds	r3, r1, r3
 3839 0116 23F8102C 		strh	r2, [r3, #-16]	@ movhi
 3840              	.L141:
 953:../LSM9DS1_drivers.c **** 		for (j = 0; j < 3; j++)
 3841              		.loc 1 953 0 is_stmt 1
 3842 011a 3B6A     		ldr	r3, [r7, #32]
 3843 011c 03F10103 		add	r3, r3, #1
 3844 0120 3B62     		str	r3, [r7, #32]
 3845              	.L139:
 953:../LSM9DS1_drivers.c **** 		for (j = 0; j < 3; j++)
 3846              		.loc 1 953 0 is_stmt 0 discriminator 1
 3847 0122 3B6A     		ldr	r3, [r7, #32]
 3848 0124 022B     		cmp	r3, #2
 3849 0126 B0DD     		ble	.L142
 3850              	.LBE8:
 943:../LSM9DS1_drivers.c **** 	for (i=0; i<128; i++)
 3851              		.loc 1 943 0 is_stmt 1
 3852 0128 7B6A     		ldr	r3, [r7, #36]
 3853 012a 03F10103 		add	r3, r3, #1
 3854 012e 7B62     		str	r3, [r7, #36]
 3855              	.L137:
 943:../LSM9DS1_drivers.c **** 	for (i=0; i<128; i++)
 3856              		.loc 1 943 0 is_stmt 0 discriminator 1
 3857 0130 7B6A     		ldr	r3, [r7, #36]
 3858 0132 7F2B     		cmp	r3, #127
 3859 0134 7FF77FAF 		ble	.L147
 957:../LSM9DS1_drivers.c **** 		}
 958:../LSM9DS1_drivers.c **** 	}
 959:../LSM9DS1_drivers.c **** 	for (j = 0; j < 3; j++)
 3860              		.loc 1 959 0 is_stmt 1
 3861 0138 4FF00003 		mov	r3, #0
 3862 013c 3B62     		str	r3, [r7, #32]
 3863 013e 49E0     		b	.L144
 3864              	.L146:
 960:../LSM9DS1_drivers.c **** 	{
 961:../LSM9DS1_drivers.c **** 		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 3865              		.loc 1 961 0
 3866 0140 3B6A     		ldr	r3, [r7, #32]
 3867 0142 4FEA4303 		lsl	r3, r3, #1
 3868 0146 07F12802 		add	r2, r7, #40
 3869 014a D318     		adds	r3, r2, r3
 3870 014c 33F8183C 		ldrh	r3, [r3, #-24]
 3871 0150 1AB2     		sxth	r2, r3
 3872 0152 3B6A     		ldr	r3, [r7, #32]
 3873 0154 4FEA4303 		lsl	r3, r3, #1
 3874 0158 07F12801 		add	r1, r7, #40
 3875 015c CB18     		adds	r3, r1, r3
 3876 015e 33F8103C 		ldrh	r3, [r3, #-16]
 3877 0162 1BB2     		sxth	r3, r3
 3878 0164 D318     		adds	r3, r2, r3
 3879 0166 4FEAD372 		lsr	r2, r3, #31
 3880 016a D318     		adds	r3, r2, r3
 3881 016c 4FEA6303 		asr	r3, r3, #1
 3882 0170 99B2     		uxth	r1, r3
 3883 0172 40F20003 		movw	r3, #:lower16:mBiasRaw
 3884 0176 C0F20003 		movt	r3, #:upper16:mBiasRaw
 3885 017a 3A6A     		ldr	r2, [r7, #32]
 3886 017c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 962:../LSM9DS1_drivers.c **** 		mBias[j] = calcMag(mBiasRaw[j]);
 3887              		.loc 1 962 0
 3888 0180 40F20003 		movw	r3, #:lower16:mBiasRaw
 3889 0184 C0F20003 		movt	r3, #:upper16:mBiasRaw
 3890 0188 3A6A     		ldr	r2, [r7, #32]
 3891 018a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3892 018e 1BB2     		sxth	r3, r3
 3893 0190 1846     		mov	r0, r3
 3894 0192 FFF7FEFF 		bl	calcMag
 3895 0196 0246     		mov	r2, r0	@ float
 3896 0198 40F20003 		movw	r3, #:lower16:mBias
 3897 019c C0F20003 		movt	r3, #:upper16:mBias
 3898 01a0 396A     		ldr	r1, [r7, #32]
 3899 01a2 4FEA8101 		lsl	r1, r1, #2
 3900 01a6 5B18     		adds	r3, r3, r1
 3901 01a8 1A60     		str	r2, [r3, #0]	@ float
 963:../LSM9DS1_drivers.c **** 		if (loadIn)
 3902              		.loc 1 963 0
 3903 01aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3904 01ac 002B     		cmp	r3, #0
 3905 01ae 0DD0     		beq	.L145
 964:../LSM9DS1_drivers.c **** 			magOffset(j, mBiasRaw[j]);
 3906              		.loc 1 964 0
 3907 01b0 3B6A     		ldr	r3, [r7, #32]
 3908 01b2 DAB2     		uxtb	r2, r3
 3909 01b4 40F20003 		movw	r3, #:lower16:mBiasRaw
 3910 01b8 C0F20003 		movt	r3, #:upper16:mBiasRaw
 3911 01bc 396A     		ldr	r1, [r7, #32]
 3912 01be 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 3913 01c2 1BB2     		sxth	r3, r3
 3914 01c4 1046     		mov	r0, r2
 3915 01c6 1946     		mov	r1, r3
 3916 01c8 FFF7FEFF 		bl	magOffset
 3917              	.L145:
 959:../LSM9DS1_drivers.c **** 	for (j = 0; j < 3; j++)
 3918              		.loc 1 959 0
 3919 01cc 3B6A     		ldr	r3, [r7, #32]
 3920 01ce 03F10103 		add	r3, r3, #1
 3921 01d2 3B62     		str	r3, [r7, #32]
 3922              	.L144:
 959:../LSM9DS1_drivers.c **** 	for (j = 0; j < 3; j++)
 3923              		.loc 1 959 0 is_stmt 0 discriminator 1
 3924 01d4 3B6A     		ldr	r3, [r7, #32]
 3925 01d6 022B     		cmp	r3, #2
 3926 01d8 B2DD     		ble	.L146
 965:../LSM9DS1_drivers.c **** 	}
 966:../LSM9DS1_drivers.c **** }
 3927              		.loc 1 966 0 is_stmt 1
 3928 01da 07F12807 		add	r7, r7, #40
 3929 01de BD46     		mov	sp, r7
 3930 01e0 80BD     		pop	{r7, pc}
 3931              		.cfi_endproc
 3932              	.LFE143:
 3934              		.global	__aeabi_d2f
 3935 01e2 00BF     		.section	.text.calcMag,"ax",%progbits
 3936              		.align	2
 3937              		.global	calcMag
 3938              		.thumb
 3939              		.thumb_func
 3941              	calcMag:
 3942              	.LFB144:
 967:../LSM9DS1_drivers.c **** 
 968:../LSM9DS1_drivers.c **** float calcMag(int16_t mag)
 969:../LSM9DS1_drivers.c **** {
 3943              		.loc 1 969 0
 3944              		.cfi_startproc
 3945              		@ args = 0, pretend = 0, frame = 8
 3946              		@ frame_needed = 1, uses_anonymous_args = 0
 3947 0000 80B5     		push	{r7, lr}
 3948              	.LCFI90:
 3949              		.cfi_def_cfa_offset 8
 3950              		.cfi_offset 7, -8
 3951              		.cfi_offset 14, -4
 3952 0002 82B0     		sub	sp, sp, #8
 3953              	.LCFI91:
 3954              		.cfi_def_cfa_offset 16
 3955 0004 00AF     		add	r7, sp, #0
 3956              	.LCFI92:
 3957              		.cfi_def_cfa_register 7
 3958 0006 0346     		mov	r3, r0
 3959 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 970:../LSM9DS1_drivers.c **** 	// Return the mag raw reading times our pre-calculated Gs / (ADC tick):
 971:../LSM9DS1_drivers.c **** 	return ceil(mRes * mag);
 3960              		.loc 1 971 0
 3961 000a B7F90630 		ldrsh	r3, [r7, #6]
 3962 000e 07EE903A 		fmsr	s15, r3	@ int
 3963 0012 B8EEE77A 		fsitos	s14, s15
 3964 0016 40F20003 		movw	r3, #:lower16:mRes
 3965 001a C0F20003 		movt	r3, #:upper16:mRes
 3966 001e D3ED007A 		flds	s15, [r3, #0]
 3967 0022 67EE277A 		fmuls	s15, s14, s15
 3968 0026 17EE900A 		fmrs	r0, s15
 3969 002a FFF7FEFF 		bl	__aeabi_f2d
 3970 002e 0246     		mov	r2, r0
 3971 0030 0B46     		mov	r3, r1
 3972 0032 1046     		mov	r0, r2
 3973 0034 1946     		mov	r1, r3
 3974 0036 FFF7FEFF 		bl	ceil
 3975 003a 0246     		mov	r2, r0
 3976 003c 0B46     		mov	r3, r1
 3977 003e 1046     		mov	r0, r2
 3978 0040 1946     		mov	r1, r3
 3979 0042 FFF7FEFF 		bl	__aeabi_d2f
 3980 0046 0346     		mov	r3, r0	@ float
 972:../LSM9DS1_drivers.c **** }
 3981              		.loc 1 972 0
 3982 0048 1846     		mov	r0, r3	@ float
 3983 004a 07F10807 		add	r7, r7, #8
 3984 004e BD46     		mov	sp, r7
 3985 0050 80BD     		pop	{r7, pc}
 3986              		.cfi_endproc
 3987              	.LFE144:
 3989 0052 00BF     		.section	.text.magOffset,"ax",%progbits
 3990              		.align	2
 3991              		.global	magOffset
 3992              		.thumb
 3993              		.thumb_func
 3995              	magOffset:
 3996              	.LFB145:
 973:../LSM9DS1_drivers.c **** 
 974:../LSM9DS1_drivers.c **** void magOffset(uint8_t axis, int16_t offset)
 975:../LSM9DS1_drivers.c **** {
 3997              		.loc 1 975 0
 3998              		.cfi_startproc
 3999              		@ args = 0, pretend = 0, frame = 16
 4000              		@ frame_needed = 1, uses_anonymous_args = 0
 4001 0000 80B5     		push	{r7, lr}
 4002              	.LCFI93:
 4003              		.cfi_def_cfa_offset 8
 4004              		.cfi_offset 7, -8
 4005              		.cfi_offset 14, -4
 4006 0002 84B0     		sub	sp, sp, #16
 4007              	.LCFI94:
 4008              		.cfi_def_cfa_offset 24
 4009 0004 00AF     		add	r7, sp, #0
 4010              	.LCFI95:
 4011              		.cfi_def_cfa_register 7
 4012 0006 0246     		mov	r2, r0
 4013 0008 0B46     		mov	r3, r1
 4014 000a FA71     		strb	r2, [r7, #7]
 4015 000c BB80     		strh	r3, [r7, #4]	@ movhi
 976:../LSM9DS1_drivers.c **** 	if (axis > 2)
 4016              		.loc 1 976 0
 4017 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4018 0010 022B     		cmp	r3, #2
 4019 0012 21D8     		bhi	.L153
 4020              	.L151:
 977:../LSM9DS1_drivers.c **** 		return;
 978:../LSM9DS1_drivers.c **** 	uint8_t msb, lsb;
 979:../LSM9DS1_drivers.c **** 	msb = (offset & 0xFF00) >> 8;
 4021              		.loc 1 979 0
 4022 0014 B7F90430 		ldrsh	r3, [r7, #4]
 4023 0018 03F47F43 		and	r3, r3, #65280
 4024 001c 4FEA2323 		asr	r3, r3, #8
 4025 0020 FB73     		strb	r3, [r7, #15]
 980:../LSM9DS1_drivers.c **** 	lsb = offset & 0x00FF;
 4026              		.loc 1 980 0
 4027 0022 BB88     		ldrh	r3, [r7, #4]	@ movhi
 4028 0024 BB73     		strb	r3, [r7, #14]
 981:../LSM9DS1_drivers.c **** 	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 4029              		.loc 1 981 0
 4030 0026 FB79     		ldrb	r3, [r7, #7]
 4031 0028 4FEA4303 		lsl	r3, r3, #1
 4032 002c DBB2     		uxtb	r3, r3
 4033 002e 03F10503 		add	r3, r3, #5
 4034 0032 DAB2     		uxtb	r2, r3
 4035 0034 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4036 0036 1046     		mov	r0, r2
 4037 0038 1946     		mov	r1, r3
 4038 003a FFF7FEFF 		bl	mWriteByte
 982:../LSM9DS1_drivers.c **** 	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 4039              		.loc 1 982 0
 4040 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4041 0040 03F10303 		add	r3, r3, #3
 4042 0044 DBB2     		uxtb	r3, r3
 4043 0046 4FEA4303 		lsl	r3, r3, #1
 4044 004a DAB2     		uxtb	r2, r3
 4045 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4046 004e 1046     		mov	r0, r2
 4047 0050 1946     		mov	r1, r3
 4048 0052 FFF7FEFF 		bl	mWriteByte
 4049 0056 00E0     		b	.L150
 4050              	.L153:
 977:../LSM9DS1_drivers.c **** 		return;
 4051              		.loc 1 977 0
 4052 0058 00BF     		nop
 4053              	.L150:
 983:../LSM9DS1_drivers.c **** }
 4054              		.loc 1 983 0
 4055 005a 07F11007 		add	r7, r7, #16
 4056 005e BD46     		mov	sp, r7
 4057 0060 80BD     		pop	{r7, pc}
 4058              		.cfi_endproc
 4059              	.LFE145:
 4061 0062 00BF     		.section	.text.accelAvailable,"ax",%progbits
 4062              		.align	2
 4063              		.global	accelAvailable
 4064              		.thumb
 4065              		.thumb_func
 4067              	accelAvailable:
 4068              	.LFB146:
 984:../LSM9DS1_drivers.c **** 
 985:../LSM9DS1_drivers.c **** uint8_t accelAvailable(void)
 986:../LSM9DS1_drivers.c **** {
 4069              		.loc 1 986 0
 4070              		.cfi_startproc
 4071              		@ args = 0, pretend = 0, frame = 8
 4072              		@ frame_needed = 1, uses_anonymous_args = 0
 4073 0000 80B5     		push	{r7, lr}
 4074              	.LCFI96:
 4075              		.cfi_def_cfa_offset 8
 4076              		.cfi_offset 7, -8
 4077              		.cfi_offset 14, -4
 4078 0002 82B0     		sub	sp, sp, #8
 4079              	.LCFI97:
 4080              		.cfi_def_cfa_offset 16
 4081 0004 00AF     		add	r7, sp, #0
 4082              	.LCFI98:
 4083              		.cfi_def_cfa_register 7
 987:../LSM9DS1_drivers.c **** 	uint8_t status = xgReadByte(STATUS_REG_1);
 4084              		.loc 1 987 0
 4085 0006 4FF02700 		mov	r0, #39
 4086 000a FFF7FEFF 		bl	xgReadByte
 4087 000e 0346     		mov	r3, r0
 4088 0010 FB71     		strb	r3, [r7, #7]
 988:../LSM9DS1_drivers.c **** 
 989:../LSM9DS1_drivers.c **** 	return (status & (1<<0));
 4089              		.loc 1 989 0
 4090 0012 FB79     		ldrb	r3, [r7, #7]
 4091 0014 03F00103 		and	r3, r3, #1
 4092 0018 DBB2     		uxtb	r3, r3
 990:../LSM9DS1_drivers.c **** }
 4093              		.loc 1 990 0
 4094 001a 1846     		mov	r0, r3
 4095 001c 07F10807 		add	r7, r7, #8
 4096 0020 BD46     		mov	sp, r7
 4097 0022 80BD     		pop	{r7, pc}
 4098              		.cfi_endproc
 4099              	.LFE146:
 4101              		.section	.text.gyroAvailable,"ax",%progbits
 4102              		.align	2
 4103              		.global	gyroAvailable
 4104              		.thumb
 4105              		.thumb_func
 4107              	gyroAvailable:
 4108              	.LFB147:
 991:../LSM9DS1_drivers.c **** 
 992:../LSM9DS1_drivers.c **** uint8_t gyroAvailable(void)
 993:../LSM9DS1_drivers.c **** {
 4109              		.loc 1 993 0
 4110              		.cfi_startproc
 4111              		@ args = 0, pretend = 0, frame = 8
 4112              		@ frame_needed = 1, uses_anonymous_args = 0
 4113 0000 80B5     		push	{r7, lr}
 4114              	.LCFI99:
 4115              		.cfi_def_cfa_offset 8
 4116              		.cfi_offset 7, -8
 4117              		.cfi_offset 14, -4
 4118 0002 82B0     		sub	sp, sp, #8
 4119              	.LCFI100:
 4120              		.cfi_def_cfa_offset 16
 4121 0004 00AF     		add	r7, sp, #0
 4122              	.LCFI101:
 4123              		.cfi_def_cfa_register 7
 994:../LSM9DS1_drivers.c **** 	uint8_t status = xgReadByte(STATUS_REG_1);
 4124              		.loc 1 994 0
 4125 0006 4FF02700 		mov	r0, #39
 4126 000a FFF7FEFF 		bl	xgReadByte
 4127 000e 0346     		mov	r3, r0
 4128 0010 FB71     		strb	r3, [r7, #7]
 995:../LSM9DS1_drivers.c **** 
 996:../LSM9DS1_drivers.c **** 	return ((status & (1<<1)) >> 1);
 4129              		.loc 1 996 0
 4130 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4131 0014 03F00203 		and	r3, r3, #2
 4132 0018 4FEA6303 		asr	r3, r3, #1
 4133 001c DBB2     		uxtb	r3, r3
 997:../LSM9DS1_drivers.c **** }
 4134              		.loc 1 997 0
 4135 001e 1846     		mov	r0, r3
 4136 0020 07F10807 		add	r7, r7, #8
 4137 0024 BD46     		mov	sp, r7
 4138 0026 80BD     		pop	{r7, pc}
 4139              		.cfi_endproc
 4140              	.LFE147:
 4142              		.section	.text.tempAvailable,"ax",%progbits
 4143              		.align	2
 4144              		.global	tempAvailable
 4145              		.thumb
 4146              		.thumb_func
 4148              	tempAvailable:
 4149              	.LFB148:
 998:../LSM9DS1_drivers.c **** 
 999:../LSM9DS1_drivers.c **** uint8_t tempAvailable(void)
1000:../LSM9DS1_drivers.c **** {
 4150              		.loc 1 1000 0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 8
 4153              		@ frame_needed = 1, uses_anonymous_args = 0
 4154 0000 80B5     		push	{r7, lr}
 4155              	.LCFI102:
 4156              		.cfi_def_cfa_offset 8
 4157              		.cfi_offset 7, -8
 4158              		.cfi_offset 14, -4
 4159 0002 82B0     		sub	sp, sp, #8
 4160              	.LCFI103:
 4161              		.cfi_def_cfa_offset 16
 4162 0004 00AF     		add	r7, sp, #0
 4163              	.LCFI104:
 4164              		.cfi_def_cfa_register 7
1001:../LSM9DS1_drivers.c **** 	uint8_t status = xgReadByte(STATUS_REG_1);
 4165              		.loc 1 1001 0
 4166 0006 4FF02700 		mov	r0, #39
 4167 000a FFF7FEFF 		bl	xgReadByte
 4168 000e 0346     		mov	r3, r0
 4169 0010 FB71     		strb	r3, [r7, #7]
1002:../LSM9DS1_drivers.c **** 
1003:../LSM9DS1_drivers.c **** 	return ((status & (1<<2)) >> 2);
 4170              		.loc 1 1003 0
 4171 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4172 0014 03F00403 		and	r3, r3, #4
 4173 0018 4FEAA303 		asr	r3, r3, #2
 4174 001c DBB2     		uxtb	r3, r3
1004:../LSM9DS1_drivers.c **** }
 4175              		.loc 1 1004 0
 4176 001e 1846     		mov	r0, r3
 4177 0020 07F10807 		add	r7, r7, #8
 4178 0024 BD46     		mov	sp, r7
 4179 0026 80BD     		pop	{r7, pc}
 4180              		.cfi_endproc
 4181              	.LFE148:
 4183              		.section	.text.readAccel,"ax",%progbits
 4184              		.align	2
 4185              		.global	readAccel
 4186              		.thumb
 4187              		.thumb_func
 4189              	readAccel:
 4190              	.LFB149:
1005:../LSM9DS1_drivers.c **** 
1006:../LSM9DS1_drivers.c **** int16_t readAccel(lsm9ds1_axis axis)
1007:../LSM9DS1_drivers.c **** {
 4191              		.loc 1 1007 0
 4192              		.cfi_startproc
 4193              		@ args = 0, pretend = 0, frame = 16
 4194              		@ frame_needed = 1, uses_anonymous_args = 0
 4195 0000 80B5     		push	{r7, lr}
 4196              	.LCFI105:
 4197              		.cfi_def_cfa_offset 8
 4198              		.cfi_offset 7, -8
 4199              		.cfi_offset 14, -4
 4200 0002 84B0     		sub	sp, sp, #16
 4201              	.LCFI106:
 4202              		.cfi_def_cfa_offset 24
 4203 0004 00AF     		add	r7, sp, #0
 4204              	.LCFI107:
 4205              		.cfi_def_cfa_register 7
 4206 0006 0346     		mov	r3, r0
 4207 0008 FB71     		strb	r3, [r7, #7]
1008:../LSM9DS1_drivers.c **** 	uint8_t temp[2];
1009:../LSM9DS1_drivers.c **** 	int16_t value;
1010:../LSM9DS1_drivers.c **** 	xgReadBytes(OUT_X_L_XL + (2 * axis), temp, 2);
 4208              		.loc 1 1010 0
 4209 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4210 000c 03F11403 		add	r3, r3, #20
 4211 0010 DBB2     		uxtb	r3, r3
 4212 0012 4FEA4303 		lsl	r3, r3, #1
 4213 0016 DAB2     		uxtb	r2, r3
 4214 0018 07F10C03 		add	r3, r7, #12
 4215 001c 1046     		mov	r0, r2
 4216 001e 1946     		mov	r1, r3
 4217 0020 4FF00202 		mov	r2, #2
 4218 0024 FFF7FEFF 		bl	xgReadBytes
1011:../LSM9DS1_drivers.c **** 	value = (temp[1] << 8) | temp[0];
 4219              		.loc 1 1011 0
 4220 0028 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 4221 002a 4FEA0323 		lsl	r3, r3, #8
 4222 002e 9AB2     		uxth	r2, r3
 4223 0030 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 4224 0032 1343     		orrs	r3, r3, r2
 4225 0034 FB81     		strh	r3, [r7, #14]	@ movhi
1012:../LSM9DS1_drivers.c **** 
1013:../LSM9DS1_drivers.c **** 	if (_autoCalc)
 4226              		.loc 1 1013 0
 4227 0036 40F20003 		movw	r3, #:lower16:_autoCalc
 4228 003a C0F20003 		movt	r3, #:upper16:_autoCalc
 4229 003e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4230 0040 002B     		cmp	r3, #0
 4231 0042 0BD0     		beq	.L161
1014:../LSM9DS1_drivers.c **** 		value -= aBiasRaw[axis];
 4232              		.loc 1 1014 0
 4233 0044 FA89     		ldrh	r2, [r7, #14]
 4234 0046 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4235 0048 40F20003 		movw	r3, #:lower16:aBiasRaw
 4236 004c C0F20003 		movt	r3, #:upper16:aBiasRaw
 4237 0050 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 4238 0054 9BB2     		uxth	r3, r3
 4239 0056 D31A     		subs	r3, r2, r3
 4240 0058 9BB2     		uxth	r3, r3
 4241 005a FB81     		strh	r3, [r7, #14]	@ movhi
 4242              	.L161:
1015:../LSM9DS1_drivers.c **** 
1016:../LSM9DS1_drivers.c **** 	return value;
 4243              		.loc 1 1016 0
 4244 005c FB89     		ldrh	r3, [r7, #14]
 4245 005e 1BB2     		sxth	r3, r3
1017:../LSM9DS1_drivers.c **** }
 4246              		.loc 1 1017 0
 4247 0060 1846     		mov	r0, r3
 4248 0062 07F11007 		add	r7, r7, #16
 4249 0066 BD46     		mov	sp, r7
 4250 0068 80BD     		pop	{r7, pc}
 4251              		.cfi_endproc
 4252              	.LFE149:
 4254 006a 00BF     		.section	.text.readMag,"ax",%progbits
 4255              		.align	2
 4256              		.global	readMag
 4257              		.thumb
 4258              		.thumb_func
 4260              	readMag:
 4261              	.LFB150:
1018:../LSM9DS1_drivers.c **** 
1019:../LSM9DS1_drivers.c **** int16_t readMag(lsm9ds1_axis axis)
1020:../LSM9DS1_drivers.c **** {
 4262              		.loc 1 1020 0
 4263              		.cfi_startproc
 4264              		@ args = 0, pretend = 0, frame = 16
 4265              		@ frame_needed = 1, uses_anonymous_args = 0
 4266 0000 80B5     		push	{r7, lr}
 4267              	.LCFI108:
 4268              		.cfi_def_cfa_offset 8
 4269              		.cfi_offset 7, -8
 4270              		.cfi_offset 14, -4
 4271 0002 84B0     		sub	sp, sp, #16
 4272              	.LCFI109:
 4273              		.cfi_def_cfa_offset 24
 4274 0004 00AF     		add	r7, sp, #0
 4275              	.LCFI110:
 4276              		.cfi_def_cfa_register 7
 4277 0006 0346     		mov	r3, r0
 4278 0008 FB71     		strb	r3, [r7, #7]
1021:../LSM9DS1_drivers.c **** 	uint8_t temp[2];
1022:../LSM9DS1_drivers.c **** 	mReadBytes(OUT_X_L_M + (2 * axis), temp, 2);
 4279              		.loc 1 1022 0
 4280 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4281 000c 03F11403 		add	r3, r3, #20
 4282 0010 DBB2     		uxtb	r3, r3
 4283 0012 4FEA4303 		lsl	r3, r3, #1
 4284 0016 DAB2     		uxtb	r2, r3
 4285 0018 07F10C03 		add	r3, r7, #12
 4286 001c 1046     		mov	r0, r2
 4287 001e 1946     		mov	r1, r3
 4288 0020 4FF00202 		mov	r2, #2
 4289 0024 FFF7FEFF 		bl	mReadBytes
1023:../LSM9DS1_drivers.c **** 	return (temp[1] << 8) | temp[0];
 4290              		.loc 1 1023 0
 4291 0028 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 4292 002a 4FEA0323 		lsl	r3, r3, #8
 4293 002e 9AB2     		uxth	r2, r3
 4294 0030 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 4295 0032 1343     		orrs	r3, r3, r2
 4296 0034 9BB2     		uxth	r3, r3
 4297 0036 1BB2     		sxth	r3, r3
1024:../LSM9DS1_drivers.c **** }
 4298              		.loc 1 1024 0
 4299 0038 1846     		mov	r0, r3
 4300 003a 07F11007 		add	r7, r7, #16
 4301 003e BD46     		mov	sp, r7
 4302 0040 80BD     		pop	{r7, pc}
 4303              		.cfi_endproc
 4304              	.LFE150:
 4306 0042 00BF     		.section	.text.readTemp,"ax",%progbits
 4307              		.align	2
 4308              		.global	readTemp
 4309              		.thumb
 4310              		.thumb_func
 4312              	readTemp:
 4313              	.LFB151:
1025:../LSM9DS1_drivers.c **** 
1026:../LSM9DS1_drivers.c **** void readTemp(void)
1027:../LSM9DS1_drivers.c **** {
 4314              		.loc 1 1027 0
 4315              		.cfi_startproc
 4316              		@ args = 0, pretend = 0, frame = 8
 4317              		@ frame_needed = 1, uses_anonymous_args = 0
 4318 0000 80B5     		push	{r7, lr}
 4319              	.LCFI111:
 4320              		.cfi_def_cfa_offset 8
 4321              		.cfi_offset 7, -8
 4322              		.cfi_offset 14, -4
 4323 0002 82B0     		sub	sp, sp, #8
 4324              	.LCFI112:
 4325              		.cfi_def_cfa_offset 16
 4326 0004 00AF     		add	r7, sp, #0
 4327              	.LCFI113:
 4328              		.cfi_def_cfa_register 7
1028:../LSM9DS1_drivers.c **** 	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp
1029:../LSM9DS1_drivers.c **** 	xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 4329              		.loc 1 1029 0
 4330 0006 07F10403 		add	r3, r7, #4
 4331 000a 4FF01500 		mov	r0, #21
 4332 000e 1946     		mov	r1, r3
 4333 0010 4FF00202 		mov	r2, #2
 4334 0014 FFF7FEFF 		bl	xgReadBytes
1030:../LSM9DS1_drivers.c **** 	temperature = ((int16_t)temp[1] << 8) | temp[0];
 4335              		.loc 1 1030 0
 4336 0018 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4337 001a 4FEA0323 		lsl	r3, r3, #8
 4338 001e 9AB2     		uxth	r2, r3
 4339 0020 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 4340 0022 1343     		orrs	r3, r3, r2
 4341 0024 9AB2     		uxth	r2, r3
 4342 0026 40F20003 		movw	r3, #:lower16:temperature
 4343 002a C0F20003 		movt	r3, #:upper16:temperature
 4344 002e 1A80     		strh	r2, [r3, #0]	@ movhi
1031:../LSM9DS1_drivers.c **** }
 4345              		.loc 1 1031 0
 4346 0030 07F10807 		add	r7, r7, #8
 4347 0034 BD46     		mov	sp, r7
 4348 0036 80BD     		pop	{r7, pc}
 4349              		.cfi_endproc
 4350              	.LFE151:
 4352              		.section	.text.readGyro,"ax",%progbits
 4353              		.align	2
 4354              		.global	readGyro
 4355              		.thumb
 4356              		.thumb_func
 4358              	readGyro:
 4359              	.LFB152:
1032:../LSM9DS1_drivers.c **** 
1033:../LSM9DS1_drivers.c **** int16_t readGyro(lsm9ds1_axis axis)
1034:../LSM9DS1_drivers.c **** {
 4360              		.loc 1 1034 0
 4361              		.cfi_startproc
 4362              		@ args = 0, pretend = 0, frame = 16
 4363              		@ frame_needed = 1, uses_anonymous_args = 0
 4364 0000 80B5     		push	{r7, lr}
 4365              	.LCFI114:
 4366              		.cfi_def_cfa_offset 8
 4367              		.cfi_offset 7, -8
 4368              		.cfi_offset 14, -4
 4369 0002 84B0     		sub	sp, sp, #16
 4370              	.LCFI115:
 4371              		.cfi_def_cfa_offset 24
 4372 0004 00AF     		add	r7, sp, #0
 4373              	.LCFI116:
 4374              		.cfi_def_cfa_register 7
 4375 0006 0346     		mov	r3, r0
 4376 0008 FB71     		strb	r3, [r7, #7]
1035:../LSM9DS1_drivers.c **** 	uint8_t temp[2];
1036:../LSM9DS1_drivers.c **** 	int16_t value;
1037:../LSM9DS1_drivers.c **** 
1038:../LSM9DS1_drivers.c **** 	xgReadBytes(OUT_X_L_G + (2 * axis), temp, 2);
 4377              		.loc 1 1038 0
 4378 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4379 000c 03F10C03 		add	r3, r3, #12
 4380 0010 DBB2     		uxtb	r3, r3
 4381 0012 4FEA4303 		lsl	r3, r3, #1
 4382 0016 DAB2     		uxtb	r2, r3
 4383 0018 07F10C03 		add	r3, r7, #12
 4384 001c 1046     		mov	r0, r2
 4385 001e 1946     		mov	r1, r3
 4386 0020 4FF00202 		mov	r2, #2
 4387 0024 FFF7FEFF 		bl	xgReadBytes
1039:../LSM9DS1_drivers.c **** 
1040:../LSM9DS1_drivers.c **** 	value = (temp[1] << 8) | temp[0];
 4388              		.loc 1 1040 0
 4389 0028 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 4390 002a 4FEA0323 		lsl	r3, r3, #8
 4391 002e 9AB2     		uxth	r2, r3
 4392 0030 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 4393 0032 1343     		orrs	r3, r3, r2
 4394 0034 FB81     		strh	r3, [r7, #14]	@ movhi
1041:../LSM9DS1_drivers.c **** 
1042:../LSM9DS1_drivers.c **** 	if (_autoCalc)
 4395              		.loc 1 1042 0
 4396 0036 40F20003 		movw	r3, #:lower16:_autoCalc
 4397 003a C0F20003 		movt	r3, #:upper16:_autoCalc
 4398 003e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4399 0040 002B     		cmp	r3, #0
 4400 0042 0BD0     		beq	.L167
1043:../LSM9DS1_drivers.c **** 		value -= gBiasRaw[axis];
 4401              		.loc 1 1043 0
 4402 0044 FA89     		ldrh	r2, [r7, #14]
 4403 0046 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4404 0048 40F20003 		movw	r3, #:lower16:gBiasRaw
 4405 004c C0F20003 		movt	r3, #:upper16:gBiasRaw
 4406 0050 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 4407 0054 9BB2     		uxth	r3, r3
 4408 0056 D31A     		subs	r3, r2, r3
 4409 0058 9BB2     		uxth	r3, r3
 4410 005a FB81     		strh	r3, [r7, #14]	@ movhi
 4411              	.L167:
1044:../LSM9DS1_drivers.c **** 
1045:../LSM9DS1_drivers.c **** 	return value;
 4412              		.loc 1 1045 0
 4413 005c FB89     		ldrh	r3, [r7, #14]
 4414 005e 1BB2     		sxth	r3, r3
1046:../LSM9DS1_drivers.c **** }
 4415              		.loc 1 1046 0
 4416 0060 1846     		mov	r0, r3
 4417 0062 07F11007 		add	r7, r7, #16
 4418 0066 BD46     		mov	sp, r7
 4419 0068 80BD     		pop	{r7, pc}
 4420              		.cfi_endproc
 4421              	.LFE152:
 4423 006a 00BF     		.section	.text.calcGyro,"ax",%progbits
 4424              		.align	2
 4425              		.global	calcGyro
 4426              		.thumb
 4427              		.thumb_func
 4429              	calcGyro:
 4430              	.LFB153:
1047:../LSM9DS1_drivers.c **** 
1048:../LSM9DS1_drivers.c **** float calcGyro(int16_t gyro)
1049:../LSM9DS1_drivers.c **** {
 4431              		.loc 1 1049 0
 4432              		.cfi_startproc
 4433              		@ args = 0, pretend = 0, frame = 8
 4434              		@ frame_needed = 1, uses_anonymous_args = 0
 4435 0000 80B5     		push	{r7, lr}
 4436              	.LCFI117:
 4437              		.cfi_def_cfa_offset 8
 4438              		.cfi_offset 7, -8
 4439              		.cfi_offset 14, -4
 4440 0002 82B0     		sub	sp, sp, #8
 4441              	.LCFI118:
 4442              		.cfi_def_cfa_offset 16
 4443 0004 00AF     		add	r7, sp, #0
 4444              	.LCFI119:
 4445              		.cfi_def_cfa_register 7
 4446 0006 0346     		mov	r3, r0
 4447 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1050:../LSM9DS1_drivers.c **** 	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
1051:../LSM9DS1_drivers.c **** 	return round(gRes * gyro);
 4448              		.loc 1 1051 0
 4449 000a B7F90630 		ldrsh	r3, [r7, #6]
 4450 000e 07EE903A 		fmsr	s15, r3	@ int
 4451 0012 B8EEE77A 		fsitos	s14, s15
 4452 0016 40F20003 		movw	r3, #:lower16:gRes
 4453 001a C0F20003 		movt	r3, #:upper16:gRes
 4454 001e D3ED007A 		flds	s15, [r3, #0]
 4455 0022 67EE277A 		fmuls	s15, s14, s15
 4456 0026 17EE900A 		fmrs	r0, s15
 4457 002a FFF7FEFF 		bl	__aeabi_f2d
 4458 002e 0246     		mov	r2, r0
 4459 0030 0B46     		mov	r3, r1
 4460 0032 1046     		mov	r0, r2
 4461 0034 1946     		mov	r1, r3
 4462 0036 FFF7FEFF 		bl	round
 4463 003a 0246     		mov	r2, r0
 4464 003c 0B46     		mov	r3, r1
 4465 003e 1046     		mov	r0, r2
 4466 0040 1946     		mov	r1, r3
 4467 0042 FFF7FEFF 		bl	__aeabi_d2f
 4468 0046 0346     		mov	r3, r0	@ float
1052:../LSM9DS1_drivers.c **** }
 4469              		.loc 1 1052 0
 4470 0048 1846     		mov	r0, r3	@ float
 4471 004a 07F10807 		add	r7, r7, #8
 4472 004e BD46     		mov	sp, r7
 4473 0050 80BD     		pop	{r7, pc}
 4474              		.cfi_endproc
 4475              	.LFE153:
 4477 0052 00BF     		.section	.text.calcAccel,"ax",%progbits
 4478              		.align	2
 4479              		.global	calcAccel
 4480              		.thumb
 4481              		.thumb_func
 4483              	calcAccel:
 4484              	.LFB154:
1053:../LSM9DS1_drivers.c **** 
1054:../LSM9DS1_drivers.c **** float calcAccel(int16_t accel)
1055:../LSM9DS1_drivers.c **** {
 4485              		.loc 1 1055 0
 4486              		.cfi_startproc
 4487              		@ args = 0, pretend = 0, frame = 8
 4488              		@ frame_needed = 1, uses_anonymous_args = 0
 4489 0000 80B5     		push	{r7, lr}
 4490              	.LCFI120:
 4491              		.cfi_def_cfa_offset 8
 4492              		.cfi_offset 7, -8
 4493              		.cfi_offset 14, -4
 4494 0002 82B0     		sub	sp, sp, #8
 4495              	.LCFI121:
 4496              		.cfi_def_cfa_offset 16
 4497 0004 00AF     		add	r7, sp, #0
 4498              	.LCFI122:
 4499              		.cfi_def_cfa_register 7
 4500 0006 0346     		mov	r3, r0
 4501 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1056:../LSM9DS1_drivers.c **** 	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
1057:../LSM9DS1_drivers.c **** 	return round(aRes * accel);
 4502              		.loc 1 1057 0
 4503 000a B7F90630 		ldrsh	r3, [r7, #6]
 4504 000e 07EE903A 		fmsr	s15, r3	@ int
 4505 0012 B8EEE77A 		fsitos	s14, s15
 4506 0016 40F20003 		movw	r3, #:lower16:aRes
 4507 001a C0F20003 		movt	r3, #:upper16:aRes
 4508 001e D3ED007A 		flds	s15, [r3, #0]
 4509 0022 67EE277A 		fmuls	s15, s14, s15
 4510 0026 17EE900A 		fmrs	r0, s15
 4511 002a FFF7FEFF 		bl	__aeabi_f2d
 4512 002e 0246     		mov	r2, r0
 4513 0030 0B46     		mov	r3, r1
 4514 0032 1046     		mov	r0, r2
 4515 0034 1946     		mov	r1, r3
 4516 0036 FFF7FEFF 		bl	round
 4517 003a 0246     		mov	r2, r0
 4518 003c 0B46     		mov	r3, r1
 4519 003e 1046     		mov	r0, r2
 4520 0040 1946     		mov	r1, r3
 4521 0042 FFF7FEFF 		bl	__aeabi_d2f
 4522 0046 0346     		mov	r3, r0	@ float
1058:../LSM9DS1_drivers.c **** }
 4523              		.loc 1 1058 0
 4524 0048 1846     		mov	r0, r3	@ float
 4525 004a 07F10807 		add	r7, r7, #8
 4526 004e BD46     		mov	sp, r7
 4527 0050 80BD     		pop	{r7, pc}
 4528              		.cfi_endproc
 4529              	.LFE154:
 4531 0052 00BF     		.section	.text.setGyroScale,"ax",%progbits
 4532              		.align	2
 4533              		.global	setGyroScale
 4534              		.thumb
 4535              		.thumb_func
 4537              	setGyroScale:
 4538              	.LFB155:
1059:../LSM9DS1_drivers.c **** 
1060:../LSM9DS1_drivers.c **** 
1061:../LSM9DS1_drivers.c **** void setGyroScale(uint16_t gScl)
1062:../LSM9DS1_drivers.c **** {
 4539              		.loc 1 1062 0
 4540              		.cfi_startproc
 4541              		@ args = 0, pretend = 0, frame = 16
 4542              		@ frame_needed = 1, uses_anonymous_args = 0
 4543 0000 80B5     		push	{r7, lr}
 4544              	.LCFI123:
 4545              		.cfi_def_cfa_offset 8
 4546              		.cfi_offset 7, -8
 4547              		.cfi_offset 14, -4
 4548 0002 84B0     		sub	sp, sp, #16
 4549              	.LCFI124:
 4550              		.cfi_def_cfa_offset 24
 4551 0004 00AF     		add	r7, sp, #0
 4552              	.LCFI125:
 4553              		.cfi_def_cfa_register 7
 4554 0006 0346     		mov	r3, r0
 4555 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1063:../LSM9DS1_drivers.c **** 	// Read current value of CTRL_REG1_G:
1064:../LSM9DS1_drivers.c **** 	uint8_t ctrl1RegValue = xgReadByte(CTRL_REG1_G);
 4556              		.loc 1 1064 0
 4557 000a 4FF01000 		mov	r0, #16
 4558 000e FFF7FEFF 		bl	xgReadByte
 4559 0012 0346     		mov	r3, r0
 4560 0014 FB73     		strb	r3, [r7, #15]
1065:../LSM9DS1_drivers.c **** 	// Mask out scale bits (3 & 4):
1066:../LSM9DS1_drivers.c **** 	ctrl1RegValue &= 0xE7;
 4561              		.loc 1 1066 0
 4562 0016 FB7B     		ldrb	r3, [r7, #15]
 4563 0018 23F01803 		bic	r3, r3, #24
 4564 001c FB73     		strb	r3, [r7, #15]
1067:../LSM9DS1_drivers.c **** 	switch (gScl)
 4565              		.loc 1 1067 0
 4566 001e FB88     		ldrh	r3, [r7, #6]
 4567 0020 B3F5FA7F 		cmp	r3, #500
 4568 0024 03D0     		beq	.L175
 4569 0026 B3F5FA6F 		cmp	r3, #2000
 4570 002a 0CD0     		beq	.L176
 4571 002c 17E0     		b	.L178
 4572              	.L175:
1068:../LSM9DS1_drivers.c **** 	{
1069:../LSM9DS1_drivers.c **** 		case 500:
1070:../LSM9DS1_drivers.c **** 			ctrl1RegValue |= (0x1 << 3);
 4573              		.loc 1 1070 0
 4574 002e FB7B     		ldrb	r3, [r7, #15]
 4575 0030 43F00803 		orr	r3, r3, #8
 4576 0034 FB73     		strb	r3, [r7, #15]
1071:../LSM9DS1_drivers.c **** 			settings.gyro.scale = 500;
 4577              		.loc 1 1071 0
 4578 0036 40F20003 		movw	r3, #:lower16:settings
 4579 003a C0F20003 		movt	r3, #:upper16:settings
 4580 003e 4FF4FA72 		mov	r2, #500
 4581 0042 DA80     		strh	r2, [r3, #6]	@ movhi
1072:../LSM9DS1_drivers.c **** 			break;
 4582              		.loc 1 1072 0
 4583 0044 13E0     		b	.L177
 4584              	.L176:
1073:../LSM9DS1_drivers.c **** 		case 2000:
1074:../LSM9DS1_drivers.c **** 			ctrl1RegValue |= (0x3 << 3);
 4585              		.loc 1 1074 0
 4586 0046 FB7B     		ldrb	r3, [r7, #15]
 4587 0048 43F01803 		orr	r3, r3, #24
 4588 004c FB73     		strb	r3, [r7, #15]
1075:../LSM9DS1_drivers.c **** 			settings.gyro.scale = 2000;
 4589              		.loc 1 1075 0
 4590 004e 40F20003 		movw	r3, #:lower16:settings
 4591 0052 C0F20003 		movt	r3, #:upper16:settings
 4592 0056 4FF4FA62 		mov	r2, #2000
 4593 005a DA80     		strh	r2, [r3, #6]	@ movhi
1076:../LSM9DS1_drivers.c **** 			break;
 4594              		.loc 1 1076 0
 4595 005c 07E0     		b	.L177
 4596              	.L178:
1077:../LSM9DS1_drivers.c **** 		default: // Otherwise we'll set it to 245 dps (0x0 << 4)
1078:../LSM9DS1_drivers.c **** 			settings.gyro.scale = 245;
 4597              		.loc 1 1078 0
 4598 005e 40F20003 		movw	r3, #:lower16:settings
 4599 0062 C0F20003 		movt	r3, #:upper16:settings
 4600 0066 4FF0F502 		mov	r2, #245
 4601 006a DA80     		strh	r2, [r3, #6]	@ movhi
1079:../LSM9DS1_drivers.c **** 			break;
 4602              		.loc 1 1079 0
 4603 006c 00BF     		nop
 4604              	.L177:
1080:../LSM9DS1_drivers.c **** 	}
1081:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG1_G, ctrl1RegValue);
 4605              		.loc 1 1081 0
 4606 006e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4607 0070 4FF01000 		mov	r0, #16
 4608 0074 1946     		mov	r1, r3
 4609 0076 FFF7FEFF 		bl	xgWriteByte
1082:../LSM9DS1_drivers.c **** 
1083:../LSM9DS1_drivers.c **** 	calcgRes();
 4610              		.loc 1 1083 0
 4611 007a FFF7FEFF 		bl	calcgRes
1084:../LSM9DS1_drivers.c **** }
 4612              		.loc 1 1084 0
 4613 007e 07F11007 		add	r7, r7, #16
 4614 0082 BD46     		mov	sp, r7
 4615 0084 80BD     		pop	{r7, pc}
 4616              		.cfi_endproc
 4617              	.LFE155:
 4619 0086 00BF     		.section	.text.setAccelScale,"ax",%progbits
 4620              		.align	2
 4621              		.global	setAccelScale
 4622              		.thumb
 4623              		.thumb_func
 4625              	setAccelScale:
 4626              	.LFB156:
1085:../LSM9DS1_drivers.c **** 
1086:../LSM9DS1_drivers.c **** void setAccelScale(uint8_t aScl)
1087:../LSM9DS1_drivers.c **** {
 4627              		.loc 1 1087 0
 4628              		.cfi_startproc
 4629              		@ args = 0, pretend = 0, frame = 16
 4630              		@ frame_needed = 1, uses_anonymous_args = 0
 4631 0000 80B5     		push	{r7, lr}
 4632              	.LCFI126:
 4633              		.cfi_def_cfa_offset 8
 4634              		.cfi_offset 7, -8
 4635              		.cfi_offset 14, -4
 4636 0002 84B0     		sub	sp, sp, #16
 4637              	.LCFI127:
 4638              		.cfi_def_cfa_offset 24
 4639 0004 00AF     		add	r7, sp, #0
 4640              	.LCFI128:
 4641              		.cfi_def_cfa_register 7
 4642 0006 0346     		mov	r3, r0
 4643 0008 FB71     		strb	r3, [r7, #7]
1088:../LSM9DS1_drivers.c **** 	// We need to preserve the other bytes in CTRL_REG6_XL. So, first read it:
1089:../LSM9DS1_drivers.c **** 	uint8_t tempRegValue = xgReadByte(CTRL_REG6_XL);
 4644              		.loc 1 1089 0
 4645 000a 4FF02000 		mov	r0, #32
 4646 000e FFF7FEFF 		bl	xgReadByte
 4647 0012 0346     		mov	r3, r0
 4648 0014 FB73     		strb	r3, [r7, #15]
1090:../LSM9DS1_drivers.c **** 	// Mask out accel scale bits:
1091:../LSM9DS1_drivers.c **** 	tempRegValue &= 0xE7;
 4649              		.loc 1 1091 0
 4650 0016 FB7B     		ldrb	r3, [r7, #15]
 4651 0018 23F01803 		bic	r3, r3, #24
 4652 001c FB73     		strb	r3, [r7, #15]
1092:../LSM9DS1_drivers.c **** 
1093:../LSM9DS1_drivers.c **** 	switch (aScl)
 4653              		.loc 1 1093 0
 4654 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4655 0020 082B     		cmp	r3, #8
 4656 0022 0FD0     		beq	.L182
 4657 0024 102B     		cmp	r3, #16
 4658 0026 19D0     		beq	.L183
 4659 0028 042B     		cmp	r3, #4
 4660 002a 23D1     		bne	.L185
 4661              	.L181:
1094:../LSM9DS1_drivers.c **** 	{
1095:../LSM9DS1_drivers.c **** 		case 4:
1096:../LSM9DS1_drivers.c **** 			tempRegValue |= (0x2 << 3);
 4662              		.loc 1 1096 0
 4663 002c FB7B     		ldrb	r3, [r7, #15]
 4664 002e 43F01003 		orr	r3, r3, #16
 4665 0032 FB73     		strb	r3, [r7, #15]
1097:../LSM9DS1_drivers.c **** 			settings.accel.scale = 4;
 4666              		.loc 1 1097 0
 4667 0034 40F20003 		movw	r3, #:lower16:settings
 4668 0038 C0F20003 		movt	r3, #:upper16:settings
 4669 003c 4FF00402 		mov	r2, #4
 4670 0040 DA75     		strb	r2, [r3, #23]
1098:../LSM9DS1_drivers.c **** 			break;
 4671              		.loc 1 1098 0
 4672 0042 1FE0     		b	.L184
 4673              	.L182:
1099:../LSM9DS1_drivers.c **** 		case 8:
1100:../LSM9DS1_drivers.c **** 			tempRegValue |= (0x3 << 3);
 4674              		.loc 1 1100 0
 4675 0044 FB7B     		ldrb	r3, [r7, #15]
 4676 0046 43F01803 		orr	r3, r3, #24
 4677 004a FB73     		strb	r3, [r7, #15]
1101:../LSM9DS1_drivers.c **** 			settings.accel.scale = 8;
 4678              		.loc 1 1101 0
 4679 004c 40F20003 		movw	r3, #:lower16:settings
 4680 0050 C0F20003 		movt	r3, #:upper16:settings
 4681 0054 4FF00802 		mov	r2, #8
 4682 0058 DA75     		strb	r2, [r3, #23]
1102:../LSM9DS1_drivers.c **** 			break;
 4683              		.loc 1 1102 0
 4684 005a 13E0     		b	.L184
 4685              	.L183:
1103:../LSM9DS1_drivers.c **** 		case 16:
1104:../LSM9DS1_drivers.c **** 			tempRegValue |= (0x1 << 3);
 4686              		.loc 1 1104 0
 4687 005c FB7B     		ldrb	r3, [r7, #15]
 4688 005e 43F00803 		orr	r3, r3, #8
 4689 0062 FB73     		strb	r3, [r7, #15]
1105:../LSM9DS1_drivers.c **** 			settings.accel.scale = 16;
 4690              		.loc 1 1105 0
 4691 0064 40F20003 		movw	r3, #:lower16:settings
 4692 0068 C0F20003 		movt	r3, #:upper16:settings
 4693 006c 4FF01002 		mov	r2, #16
 4694 0070 DA75     		strb	r2, [r3, #23]
1106:../LSM9DS1_drivers.c **** 			break;
 4695              		.loc 1 1106 0
 4696 0072 07E0     		b	.L184
 4697              	.L185:
1107:../LSM9DS1_drivers.c **** 		default: // Otherwise it'll be set to 2g (0x0 << 3)
1108:../LSM9DS1_drivers.c **** 			settings.accel.scale = 2;
 4698              		.loc 1 1108 0
 4699 0074 40F20003 		movw	r3, #:lower16:settings
 4700 0078 C0F20003 		movt	r3, #:upper16:settings
 4701 007c 4FF00202 		mov	r2, #2
 4702 0080 DA75     		strb	r2, [r3, #23]
1109:../LSM9DS1_drivers.c **** 			break;
 4703              		.loc 1 1109 0
 4704 0082 00BF     		nop
 4705              	.L184:
1110:../LSM9DS1_drivers.c **** 	}
1111:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 4706              		.loc 1 1111 0
 4707 0084 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4708 0086 4FF02000 		mov	r0, #32
 4709 008a 1946     		mov	r1, r3
 4710 008c FFF7FEFF 		bl	xgWriteByte
1112:../LSM9DS1_drivers.c **** 
1113:../LSM9DS1_drivers.c **** 	// Then calculate a new aRes, which relies on aScale being set correctly:
1114:../LSM9DS1_drivers.c **** 	calcaRes();
 4711              		.loc 1 1114 0
 4712 0090 FFF7FEFF 		bl	calcaRes
1115:../LSM9DS1_drivers.c **** }
 4713              		.loc 1 1115 0
 4714 0094 07F11007 		add	r7, r7, #16
 4715 0098 BD46     		mov	sp, r7
 4716 009a 80BD     		pop	{r7, pc}
 4717              		.cfi_endproc
 4718              	.LFE156:
 4720              		.section	.text.setMagScale,"ax",%progbits
 4721              		.align	2
 4722              		.global	setMagScale
 4723              		.thumb
 4724              		.thumb_func
 4726              	setMagScale:
 4727              	.LFB157:
1116:../LSM9DS1_drivers.c **** 
1117:../LSM9DS1_drivers.c **** void setMagScale(uint8_t mScl)
1118:../LSM9DS1_drivers.c **** {
 4728              		.loc 1 1118 0
 4729              		.cfi_startproc
 4730              		@ args = 0, pretend = 0, frame = 16
 4731              		@ frame_needed = 1, uses_anonymous_args = 0
 4732 0000 80B5     		push	{r7, lr}
 4733              	.LCFI129:
 4734              		.cfi_def_cfa_offset 8
 4735              		.cfi_offset 7, -8
 4736              		.cfi_offset 14, -4
 4737 0002 84B0     		sub	sp, sp, #16
 4738              	.LCFI130:
 4739              		.cfi_def_cfa_offset 24
 4740 0004 00AF     		add	r7, sp, #0
 4741              	.LCFI131:
 4742              		.cfi_def_cfa_register 7
 4743 0006 0346     		mov	r3, r0
 4744 0008 FB71     		strb	r3, [r7, #7]
1119:../LSM9DS1_drivers.c **** 	// We need to preserve the other bytes in CTRL_REG6_XM. So, first read it:
1120:../LSM9DS1_drivers.c **** 	uint8_t temp = mReadByte(CTRL_REG2_M);
 4745              		.loc 1 1120 0
 4746 000a 4FF02100 		mov	r0, #33
 4747 000e FFF7FEFF 		bl	mReadByte
 4748 0012 0346     		mov	r3, r0
 4749 0014 FB73     		strb	r3, [r7, #15]
1121:../LSM9DS1_drivers.c **** 	// Then mask out the mag scale bits:
1122:../LSM9DS1_drivers.c **** 	temp &= 0xFF^(0x3 << 5);
 4750              		.loc 1 1122 0
 4751 0016 FB7B     		ldrb	r3, [r7, #15]
 4752 0018 23F06003 		bic	r3, r3, #96
 4753 001c FB73     		strb	r3, [r7, #15]
1123:../LSM9DS1_drivers.c **** 
1124:../LSM9DS1_drivers.c **** 	switch (mScl)
 4754              		.loc 1 1124 0
 4755 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4756 0020 0C2B     		cmp	r3, #12
 4757 0022 10D0     		beq	.L189
 4758 0024 102B     		cmp	r3, #16
 4759 0026 1BD0     		beq	.L190
 4760 0028 082B     		cmp	r3, #8
 4761 002a 26D1     		bne	.L192
 4762              	.L188:
1125:../LSM9DS1_drivers.c **** 	{
1126:../LSM9DS1_drivers.c **** 		case 8:
1127:../LSM9DS1_drivers.c **** 			temp |= (0x1 << 5);
 4763              		.loc 1 1127 0
 4764 002c FB7B     		ldrb	r3, [r7, #15]
 4765 002e 43F02003 		orr	r3, r3, #32
 4766 0032 FB73     		strb	r3, [r7, #15]
1128:../LSM9DS1_drivers.c **** 			settings.mag.scale = 8;
 4767              		.loc 1 1128 0
 4768 0034 40F20003 		movw	r3, #:lower16:settings
 4769 0038 C0F20003 		movt	r3, #:upper16:settings
 4770 003c 4FF00802 		mov	r2, #8
 4771 0040 83F82020 		strb	r2, [r3, #32]
1129:../LSM9DS1_drivers.c **** 			break;
 4772              		.loc 1 1129 0
 4773 0044 22E0     		b	.L191
 4774              	.L189:
1130:../LSM9DS1_drivers.c **** 		case 12:
1131:../LSM9DS1_drivers.c **** 			temp |= (0x2 << 5);
 4775              		.loc 1 1131 0
 4776 0046 FB7B     		ldrb	r3, [r7, #15]
 4777 0048 43F04003 		orr	r3, r3, #64
 4778 004c FB73     		strb	r3, [r7, #15]
1132:../LSM9DS1_drivers.c **** 			settings.mag.scale = 12;
 4779              		.loc 1 1132 0
 4780 004e 40F20003 		movw	r3, #:lower16:settings
 4781 0052 C0F20003 		movt	r3, #:upper16:settings
 4782 0056 4FF00C02 		mov	r2, #12
 4783 005a 83F82020 		strb	r2, [r3, #32]
1133:../LSM9DS1_drivers.c **** 			break;
 4784              		.loc 1 1133 0
 4785 005e 15E0     		b	.L191
 4786              	.L190:
1134:../LSM9DS1_drivers.c **** 		case 16:
1135:../LSM9DS1_drivers.c **** 			temp |= (0x3 << 5);
 4787              		.loc 1 1135 0
 4788 0060 FB7B     		ldrb	r3, [r7, #15]
 4789 0062 43F06003 		orr	r3, r3, #96
 4790 0066 FB73     		strb	r3, [r7, #15]
1136:../LSM9DS1_drivers.c **** 			settings.mag.scale = 16;
 4791              		.loc 1 1136 0
 4792 0068 40F20003 		movw	r3, #:lower16:settings
 4793 006c C0F20003 		movt	r3, #:upper16:settings
 4794 0070 4FF01002 		mov	r2, #16
 4795 0074 83F82020 		strb	r2, [r3, #32]
1137:../LSM9DS1_drivers.c **** 			break;
 4796              		.loc 1 1137 0
 4797 0078 08E0     		b	.L191
 4798              	.L192:
1138:../LSM9DS1_drivers.c **** 		default: // Otherwise we'll default to 4 gauss (00)
1139:../LSM9DS1_drivers.c **** 			settings.mag.scale = 4;
 4799              		.loc 1 1139 0
 4800 007a 40F20003 		movw	r3, #:lower16:settings
 4801 007e C0F20003 		movt	r3, #:upper16:settings
 4802 0082 4FF00402 		mov	r2, #4
 4803 0086 83F82020 		strb	r2, [r3, #32]
1140:../LSM9DS1_drivers.c **** 			break;
 4804              		.loc 1 1140 0
 4805 008a 00BF     		nop
 4806              	.L191:
1141:../LSM9DS1_drivers.c **** 	}
1142:../LSM9DS1_drivers.c **** 
1143:../LSM9DS1_drivers.c **** 	// And write the new register value back into CTRL_REG6_XM:
1144:../LSM9DS1_drivers.c **** 	mWriteByte(CTRL_REG2_M, temp);
 4807              		.loc 1 1144 0
 4808 008c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4809 008e 4FF02100 		mov	r0, #33
 4810 0092 1946     		mov	r1, r3
 4811 0094 FFF7FEFF 		bl	mWriteByte
1145:../LSM9DS1_drivers.c **** 
1146:../LSM9DS1_drivers.c **** 	// We've updated the sensor, but we also need to update our class variables
1147:../LSM9DS1_drivers.c **** 	// First update mScale:
1148:../LSM9DS1_drivers.c **** 	//mScale = mScl;
1149:../LSM9DS1_drivers.c **** 	// Then calculate a new mRes, which relies on mScale being set correctly:
1150:../LSM9DS1_drivers.c **** 	calcmRes();
 4812              		.loc 1 1150 0
 4813 0098 FFF7FEFF 		bl	calcmRes
1151:../LSM9DS1_drivers.c **** }
 4814              		.loc 1 1151 0
 4815 009c 07F11007 		add	r7, r7, #16
 4816 00a0 BD46     		mov	sp, r7
 4817 00a2 80BD     		pop	{r7, pc}
 4818              		.cfi_endproc
 4819              	.LFE157:
 4821              		.section	.text.setGyroODR,"ax",%progbits
 4822              		.align	2
 4823              		.global	setGyroODR
 4824              		.thumb
 4825              		.thumb_func
 4827              	setGyroODR:
 4828              	.LFB158:
1152:../LSM9DS1_drivers.c **** 
1153:../LSM9DS1_drivers.c **** void setGyroODR(uint8_t gRate)
1154:../LSM9DS1_drivers.c **** {
 4829              		.loc 1 1154 0
 4830              		.cfi_startproc
 4831              		@ args = 0, pretend = 0, frame = 16
 4832              		@ frame_needed = 1, uses_anonymous_args = 0
 4833 0000 80B5     		push	{r7, lr}
 4834              	.LCFI132:
 4835              		.cfi_def_cfa_offset 8
 4836              		.cfi_offset 7, -8
 4837              		.cfi_offset 14, -4
 4838 0002 84B0     		sub	sp, sp, #16
 4839              	.LCFI133:
 4840              		.cfi_def_cfa_offset 24
 4841 0004 00AF     		add	r7, sp, #0
 4842              	.LCFI134:
 4843              		.cfi_def_cfa_register 7
 4844 0006 0346     		mov	r3, r0
 4845 0008 FB71     		strb	r3, [r7, #7]
1155:../LSM9DS1_drivers.c **** 	// Only do this if gRate is not 0 (which would disable the gyro)
1156:../LSM9DS1_drivers.c **** 	if ((gRate & 0x07) != 0)
 4846              		.loc 1 1156 0
 4847 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4848 000c 03F00703 		and	r3, r3, #7
 4849 0010 002B     		cmp	r3, #0
 4850 0012 20D0     		beq	.L193
 4851              	.LBB9:
1157:../LSM9DS1_drivers.c **** 	{
1158:../LSM9DS1_drivers.c **** 		// We need to preserve the other bytes in CTRL_REG1_G. So, first read it:
1159:../LSM9DS1_drivers.c **** 		uint8_t temp = xgReadByte(CTRL_REG1_G);
 4852              		.loc 1 1159 0
 4853 0014 4FF01000 		mov	r0, #16
 4854 0018 FFF7FEFF 		bl	xgReadByte
 4855 001c 0346     		mov	r3, r0
 4856 001e FB73     		strb	r3, [r7, #15]
1160:../LSM9DS1_drivers.c **** 		// Then mask out the gyro ODR bits:
1161:../LSM9DS1_drivers.c **** 		temp &= 0xFF^(0x7 << 5);
 4857              		.loc 1 1161 0
 4858 0020 FB7B     		ldrb	r3, [r7, #15]
 4859 0022 03F01F03 		and	r3, r3, #31
 4860 0026 FB73     		strb	r3, [r7, #15]
1162:../LSM9DS1_drivers.c **** 		temp |= (gRate & 0x07) << 5;
 4861              		.loc 1 1162 0
 4862 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4863 002a 4FEA4313 		lsl	r3, r3, #5
 4864 002e DAB2     		uxtb	r2, r3
 4865 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4866 0032 1343     		orrs	r3, r3, r2
 4867 0034 DBB2     		uxtb	r3, r3
 4868 0036 FB73     		strb	r3, [r7, #15]
1163:../LSM9DS1_drivers.c **** 		// Update our settings struct
1164:../LSM9DS1_drivers.c **** 		settings.gyro.sampleRate = gRate & 0x07;
 4869              		.loc 1 1164 0
 4870 0038 FB79     		ldrb	r3, [r7, #7]
 4871 003a 03F00703 		and	r3, r3, #7
 4872 003e DAB2     		uxtb	r2, r3
 4873 0040 40F20003 		movw	r3, #:lower16:settings
 4874 0044 C0F20003 		movt	r3, #:upper16:settings
 4875 0048 1A72     		strb	r2, [r3, #8]
1165:../LSM9DS1_drivers.c **** 		// And write the new register value back into CTRL_REG1_G:
1166:../LSM9DS1_drivers.c **** 		xgWriteByte(CTRL_REG1_G, temp);
 4876              		.loc 1 1166 0
 4877 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4878 004c 4FF01000 		mov	r0, #16
 4879 0050 1946     		mov	r1, r3
 4880 0052 FFF7FEFF 		bl	xgWriteByte
 4881              	.L193:
 4882              	.LBE9:
1167:../LSM9DS1_drivers.c **** 	}
1168:../LSM9DS1_drivers.c **** }
 4883              		.loc 1 1168 0
 4884 0056 07F11007 		add	r7, r7, #16
 4885 005a BD46     		mov	sp, r7
 4886 005c 80BD     		pop	{r7, pc}
 4887              		.cfi_endproc
 4888              	.LFE158:
 4890 005e 00BF     		.section	.text.setAccelODR,"ax",%progbits
 4891              		.align	2
 4892              		.global	setAccelODR
 4893              		.thumb
 4894              		.thumb_func
 4896              	setAccelODR:
 4897              	.LFB159:
1169:../LSM9DS1_drivers.c **** 
1170:../LSM9DS1_drivers.c **** void setAccelODR(uint8_t aRate)
1171:../LSM9DS1_drivers.c **** {
 4898              		.loc 1 1171 0
 4899              		.cfi_startproc
 4900              		@ args = 0, pretend = 0, frame = 16
 4901              		@ frame_needed = 1, uses_anonymous_args = 0
 4902 0000 80B5     		push	{r7, lr}
 4903              	.LCFI135:
 4904              		.cfi_def_cfa_offset 8
 4905              		.cfi_offset 7, -8
 4906              		.cfi_offset 14, -4
 4907 0002 84B0     		sub	sp, sp, #16
 4908              	.LCFI136:
 4909              		.cfi_def_cfa_offset 24
 4910 0004 00AF     		add	r7, sp, #0
 4911              	.LCFI137:
 4912              		.cfi_def_cfa_register 7
 4913 0006 0346     		mov	r3, r0
 4914 0008 FB71     		strb	r3, [r7, #7]
1172:../LSM9DS1_drivers.c **** 	// Only do this if aRate is not 0 (which would disable the accel)
1173:../LSM9DS1_drivers.c **** 	if ((aRate & 0x07) != 0)
 4915              		.loc 1 1173 0
 4916 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4917 000c 03F00703 		and	r3, r3, #7
 4918 0010 002B     		cmp	r3, #0
 4919 0012 20D0     		beq	.L195
 4920              	.LBB10:
1174:../LSM9DS1_drivers.c **** 	{
1175:../LSM9DS1_drivers.c **** 		// We need to preserve the other bytes in CTRL_REG1_XM. So, first read it:
1176:../LSM9DS1_drivers.c **** 		uint8_t temp = xgReadByte(CTRL_REG6_XL);
 4921              		.loc 1 1176 0
 4922 0014 4FF02000 		mov	r0, #32
 4923 0018 FFF7FEFF 		bl	xgReadByte
 4924 001c 0346     		mov	r3, r0
 4925 001e FB73     		strb	r3, [r7, #15]
1177:../LSM9DS1_drivers.c **** 		// Then mask out the accel ODR bits:
1178:../LSM9DS1_drivers.c **** 		temp &= 0x1F;
 4926              		.loc 1 1178 0
 4927 0020 FB7B     		ldrb	r3, [r7, #15]
 4928 0022 03F01F03 		and	r3, r3, #31
 4929 0026 FB73     		strb	r3, [r7, #15]
1179:../LSM9DS1_drivers.c **** 		// Then shift in our new ODR bits:
1180:../LSM9DS1_drivers.c **** 		temp |= ((aRate & 0x07) << 5);
 4930              		.loc 1 1180 0
 4931 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4932 002a 4FEA4313 		lsl	r3, r3, #5
 4933 002e DAB2     		uxtb	r2, r3
 4934 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4935 0032 1343     		orrs	r3, r3, r2
 4936 0034 DBB2     		uxtb	r3, r3
 4937 0036 FB73     		strb	r3, [r7, #15]
1181:../LSM9DS1_drivers.c **** 		settings.accel.sampleRate = aRate & 0x07;
 4938              		.loc 1 1181 0
 4939 0038 FB79     		ldrb	r3, [r7, #7]
 4940 003a 03F00703 		and	r3, r3, #7
 4941 003e DAB2     		uxtb	r2, r3
 4942 0040 40F20003 		movw	r3, #:lower16:settings
 4943 0044 C0F20003 		movt	r3, #:upper16:settings
 4944 0048 1A76     		strb	r2, [r3, #24]
1182:../LSM9DS1_drivers.c **** 		// And write the new register value back into CTRL_REG1_XM:
1183:../LSM9DS1_drivers.c **** 		xgWriteByte(CTRL_REG6_XL, temp);
 4945              		.loc 1 1183 0
 4946 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4947 004c 4FF02000 		mov	r0, #32
 4948 0050 1946     		mov	r1, r3
 4949 0052 FFF7FEFF 		bl	xgWriteByte
 4950              	.L195:
 4951              	.LBE10:
1184:../LSM9DS1_drivers.c **** 	}
1185:../LSM9DS1_drivers.c **** }
 4952              		.loc 1 1185 0
 4953 0056 07F11007 		add	r7, r7, #16
 4954 005a BD46     		mov	sp, r7
 4955 005c 80BD     		pop	{r7, pc}
 4956              		.cfi_endproc
 4957              	.LFE159:
 4959 005e 00BF     		.section	.text.setMagODR,"ax",%progbits
 4960              		.align	2
 4961              		.global	setMagODR
 4962              		.thumb
 4963              		.thumb_func
 4965              	setMagODR:
 4966              	.LFB160:
1186:../LSM9DS1_drivers.c **** 
1187:../LSM9DS1_drivers.c **** void setMagODR(uint8_t mRate)
1188:../LSM9DS1_drivers.c **** {
 4967              		.loc 1 1188 0
 4968              		.cfi_startproc
 4969              		@ args = 0, pretend = 0, frame = 16
 4970              		@ frame_needed = 1, uses_anonymous_args = 0
 4971 0000 80B5     		push	{r7, lr}
 4972              	.LCFI138:
 4973              		.cfi_def_cfa_offset 8
 4974              		.cfi_offset 7, -8
 4975              		.cfi_offset 14, -4
 4976 0002 84B0     		sub	sp, sp, #16
 4977              	.LCFI139:
 4978              		.cfi_def_cfa_offset 24
 4979 0004 00AF     		add	r7, sp, #0
 4980              	.LCFI140:
 4981              		.cfi_def_cfa_register 7
 4982 0006 0346     		mov	r3, r0
 4983 0008 FB71     		strb	r3, [r7, #7]
1189:../LSM9DS1_drivers.c **** 	// We need to preserve the other bytes in CTRL_REG5_XM. So, first read it:
1190:../LSM9DS1_drivers.c **** 	uint8_t temp = mReadByte(CTRL_REG1_M);
 4984              		.loc 1 1190 0
 4985 000a 4FF02000 		mov	r0, #32
 4986 000e FFF7FEFF 		bl	mReadByte
 4987 0012 0346     		mov	r3, r0
 4988 0014 FB73     		strb	r3, [r7, #15]
1191:../LSM9DS1_drivers.c **** 	// Then mask out the mag ODR bits:
1192:../LSM9DS1_drivers.c **** 	temp &= 0xFF^(0x7 << 2);
 4989              		.loc 1 1192 0
 4990 0016 FB7B     		ldrb	r3, [r7, #15]
 4991 0018 23F01C03 		bic	r3, r3, #28
 4992 001c FB73     		strb	r3, [r7, #15]
1193:../LSM9DS1_drivers.c **** 	// Then shift in our new ODR bits:
1194:../LSM9DS1_drivers.c **** 	temp |= ((mRate & 0x07) << 2);
 4993              		.loc 1 1194 0
 4994 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4995 0020 03F00703 		and	r3, r3, #7
 4996 0024 4FEA8303 		lsl	r3, r3, #2
 4997 0028 DAB2     		uxtb	r2, r3
 4998 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4999 002c 1343     		orrs	r3, r3, r2
 5000 002e DBB2     		uxtb	r3, r3
 5001 0030 FB73     		strb	r3, [r7, #15]
1195:../LSM9DS1_drivers.c **** 	settings.mag.sampleRate = mRate & 0x07;
 5002              		.loc 1 1195 0
 5003 0032 FB79     		ldrb	r3, [r7, #7]
 5004 0034 03F00703 		and	r3, r3, #7
 5005 0038 DAB2     		uxtb	r2, r3
 5006 003a 40F20003 		movw	r3, #:lower16:settings
 5007 003e C0F20003 		movt	r3, #:upper16:settings
 5008 0042 83F82120 		strb	r2, [r3, #33]
1196:../LSM9DS1_drivers.c **** 	// And write the new register value back into CTRL_REG5_XM:
1197:../LSM9DS1_drivers.c **** 	mWriteByte(CTRL_REG1_M, temp);
 5009              		.loc 1 1197 0
 5010 0046 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5011 0048 4FF02000 		mov	r0, #32
 5012 004c 1946     		mov	r1, r3
 5013 004e FFF7FEFF 		bl	mWriteByte
1198:../LSM9DS1_drivers.c **** }
 5014              		.loc 1 1198 0
 5015 0052 07F11007 		add	r7, r7, #16
 5016 0056 BD46     		mov	sp, r7
 5017 0058 80BD     		pop	{r7, pc}
 5018              		.cfi_endproc
 5019              	.LFE160:
 5021 005a 00BF     		.section	.text.configInt,"ax",%progbits
 5022              		.align	2
 5023              		.global	configInt
 5024              		.thumb
 5025              		.thumb_func
 5027              	configInt:
 5028              	.LFB161:
1199:../LSM9DS1_drivers.c **** 
1200:../LSM9DS1_drivers.c **** void configInt(interrupt_select interupt, uint8_t generator, h_lactive activeLow, pp_od pushPull)
1201:../LSM9DS1_drivers.c **** {
 5029              		.loc 1 1201 0
 5030              		.cfi_startproc
 5031              		@ args = 0, pretend = 0, frame = 16
 5032              		@ frame_needed = 1, uses_anonymous_args = 0
 5033 0000 80B5     		push	{r7, lr}
 5034              	.LCFI141:
 5035              		.cfi_def_cfa_offset 8
 5036              		.cfi_offset 7, -8
 5037              		.cfi_offset 14, -4
 5038 0002 84B0     		sub	sp, sp, #16
 5039              	.LCFI142:
 5040              		.cfi_def_cfa_offset 24
 5041 0004 00AF     		add	r7, sp, #0
 5042              	.LCFI143:
 5043              		.cfi_def_cfa_register 7
 5044 0006 F871     		strb	r0, [r7, #7]
 5045 0008 B971     		strb	r1, [r7, #6]
 5046 000a 7A71     		strb	r2, [r7, #5]
 5047 000c 3B71     		strb	r3, [r7, #4]
1202:../LSM9DS1_drivers.c **** 	// Write to INT1_CTRL or INT2_CTRL. [interupt] should already be one of
1203:../LSM9DS1_drivers.c **** 	// those two values.
1204:../LSM9DS1_drivers.c **** 	// [generator] should be an OR'd list of values from the interrupt_generators enum
1205:../LSM9DS1_drivers.c **** 	xgWriteByte(interupt, generator);
 5048              		.loc 1 1205 0
 5049 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5050 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5051 0012 1046     		mov	r0, r2
 5052 0014 1946     		mov	r1, r3
 5053 0016 FFF7FEFF 		bl	xgWriteByte
1206:../LSM9DS1_drivers.c **** 
1207:../LSM9DS1_drivers.c **** 	// Configure CTRL_REG8
1208:../LSM9DS1_drivers.c **** 	uint8_t temp;
1209:../LSM9DS1_drivers.c **** 	temp = xgReadByte(CTRL_REG8);
 5054              		.loc 1 1209 0
 5055 001a 4FF02200 		mov	r0, #34
 5056 001e FFF7FEFF 		bl	xgReadByte
 5057 0022 0346     		mov	r3, r0
 5058 0024 FB73     		strb	r3, [r7, #15]
1210:../LSM9DS1_drivers.c **** 
1211:../LSM9DS1_drivers.c **** 	if (activeLow) temp |= (1<<5);
 5059              		.loc 1 1211 0
 5060 0026 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5061 0028 002B     		cmp	r3, #0
 5062 002a 04D0     		beq	.L199
 5063              		.loc 1 1211 0 is_stmt 0 discriminator 1
 5064 002c FB7B     		ldrb	r3, [r7, #15]
 5065 002e 43F02003 		orr	r3, r3, #32
 5066 0032 FB73     		strb	r3, [r7, #15]
 5067 0034 03E0     		b	.L200
 5068              	.L199:
1212:../LSM9DS1_drivers.c **** 	else temp &= ~(1<<5);
 5069              		.loc 1 1212 0 is_stmt 1
 5070 0036 FB7B     		ldrb	r3, [r7, #15]
 5071 0038 23F02003 		bic	r3, r3, #32
 5072 003c FB73     		strb	r3, [r7, #15]
 5073              	.L200:
1213:../LSM9DS1_drivers.c **** 
1214:../LSM9DS1_drivers.c **** 	if (pushPull) temp &= ~(1<<4);
 5074              		.loc 1 1214 0
 5075 003e 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 5076 0040 002B     		cmp	r3, #0
 5077 0042 04D0     		beq	.L201
 5078              		.loc 1 1214 0 is_stmt 0 discriminator 1
 5079 0044 FB7B     		ldrb	r3, [r7, #15]
 5080 0046 23F01003 		bic	r3, r3, #16
 5081 004a FB73     		strb	r3, [r7, #15]
 5082 004c 03E0     		b	.L202
 5083              	.L201:
1215:../LSM9DS1_drivers.c **** 	else temp |= (1<<4);
 5084              		.loc 1 1215 0 is_stmt 1
 5085 004e FB7B     		ldrb	r3, [r7, #15]
 5086 0050 43F01003 		orr	r3, r3, #16
 5087 0054 FB73     		strb	r3, [r7, #15]
 5088              	.L202:
1216:../LSM9DS1_drivers.c **** 
1217:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG8, temp);
 5089              		.loc 1 1217 0
 5090 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5091 0058 4FF02200 		mov	r0, #34
 5092 005c 1946     		mov	r1, r3
 5093 005e FFF7FEFF 		bl	xgWriteByte
1218:../LSM9DS1_drivers.c **** }
 5094              		.loc 1 1218 0
 5095 0062 07F11007 		add	r7, r7, #16
 5096 0066 BD46     		mov	sp, r7
 5097 0068 80BD     		pop	{r7, pc}
 5098              		.cfi_endproc
 5099              	.LFE161:
 5101 006a 00BF     		.section	.text.configInactivity,"ax",%progbits
 5102              		.align	2
 5103              		.global	configInactivity
 5104              		.thumb
 5105              		.thumb_func
 5107              	configInactivity:
 5108              	.LFB162:
1219:../LSM9DS1_drivers.c **** 
1220:../LSM9DS1_drivers.c **** 
1221:../LSM9DS1_drivers.c **** void configInactivity(uint8_t duration, uint8_t threshold, bool sleepOn)
1222:../LSM9DS1_drivers.c **** {
 5109              		.loc 1 1222 0
 5110              		.cfi_startproc
 5111              		@ args = 0, pretend = 0, frame = 16
 5112              		@ frame_needed = 1, uses_anonymous_args = 0
 5113 0000 80B5     		push	{r7, lr}
 5114              	.LCFI144:
 5115              		.cfi_def_cfa_offset 8
 5116              		.cfi_offset 7, -8
 5117              		.cfi_offset 14, -4
 5118 0002 84B0     		sub	sp, sp, #16
 5119              	.LCFI145:
 5120              		.cfi_def_cfa_offset 24
 5121 0004 00AF     		add	r7, sp, #0
 5122              	.LCFI146:
 5123              		.cfi_def_cfa_register 7
 5124 0006 1346     		mov	r3, r2
 5125 0008 0246     		mov	r2, r0
 5126 000a FA71     		strb	r2, [r7, #7]
 5127 000c 0A46     		mov	r2, r1
 5128 000e BA71     		strb	r2, [r7, #6]
 5129 0010 7B71     		strb	r3, [r7, #5]
1223:../LSM9DS1_drivers.c **** 	uint8_t temp = 0;
 5130              		.loc 1 1223 0
 5131 0012 4FF00003 		mov	r3, #0
 5132 0016 FB73     		strb	r3, [r7, #15]
1224:../LSM9DS1_drivers.c **** 
1225:../LSM9DS1_drivers.c **** 	temp = threshold & 0x7F;
 5133              		.loc 1 1225 0
 5134 0018 BB79     		ldrb	r3, [r7, #6]
 5135 001a 03F07F03 		and	r3, r3, #127
 5136 001e FB73     		strb	r3, [r7, #15]
1226:../LSM9DS1_drivers.c **** 	if (sleepOn) temp |= (1<<7);
 5137              		.loc 1 1226 0
 5138 0020 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5139 0022 002B     		cmp	r3, #0
 5140 0024 03D0     		beq	.L204
 5141              		.loc 1 1226 0 is_stmt 0 discriminator 1
 5142 0026 FB7B     		ldrb	r3, [r7, #15]
 5143 0028 63F07F03 		orn	r3, r3, #127
 5144 002c FB73     		strb	r3, [r7, #15]
 5145              	.L204:
1227:../LSM9DS1_drivers.c **** 	xgWriteByte(ACT_THS, temp);
 5146              		.loc 1 1227 0 is_stmt 1
 5147 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5148 0030 4FF00400 		mov	r0, #4
 5149 0034 1946     		mov	r1, r3
 5150 0036 FFF7FEFF 		bl	xgWriteByte
1228:../LSM9DS1_drivers.c **** 
1229:../LSM9DS1_drivers.c **** 	xgWriteByte(ACT_DUR, duration);
 5151              		.loc 1 1229 0
 5152 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5153 003c 4FF00500 		mov	r0, #5
 5154 0040 1946     		mov	r1, r3
 5155 0042 FFF7FEFF 		bl	xgWriteByte
1230:../LSM9DS1_drivers.c **** }
 5156              		.loc 1 1230 0
 5157 0046 07F11007 		add	r7, r7, #16
 5158 004a BD46     		mov	sp, r7
 5159 004c 80BD     		pop	{r7, pc}
 5160              		.cfi_endproc
 5161              	.LFE162:
 5163 004e 00BF     		.section	.text.getInactivity,"ax",%progbits
 5164              		.align	2
 5165              		.global	getInactivity
 5166              		.thumb
 5167              		.thumb_func
 5169              	getInactivity:
 5170              	.LFB163:
1231:../LSM9DS1_drivers.c **** 
1232:../LSM9DS1_drivers.c **** 
1233:../LSM9DS1_drivers.c **** uint8_t getInactivity(void)
1234:../LSM9DS1_drivers.c **** {
 5171              		.loc 1 1234 0
 5172              		.cfi_startproc
 5173              		@ args = 0, pretend = 0, frame = 8
 5174              		@ frame_needed = 1, uses_anonymous_args = 0
 5175 0000 80B5     		push	{r7, lr}
 5176              	.LCFI147:
 5177              		.cfi_def_cfa_offset 8
 5178              		.cfi_offset 7, -8
 5179              		.cfi_offset 14, -4
 5180 0002 82B0     		sub	sp, sp, #8
 5181              	.LCFI148:
 5182              		.cfi_def_cfa_offset 16
 5183 0004 00AF     		add	r7, sp, #0
 5184              	.LCFI149:
 5185              		.cfi_def_cfa_register 7
1235:../LSM9DS1_drivers.c **** 	uint8_t temp = xgReadByte(STATUS_REG_0);
 5186              		.loc 1 1235 0
 5187 0006 4FF01700 		mov	r0, #23
 5188 000a FFF7FEFF 		bl	xgReadByte
 5189 000e 0346     		mov	r3, r0
 5190 0010 FB71     		strb	r3, [r7, #7]
1236:../LSM9DS1_drivers.c **** 	temp &= (0x10);
 5191              		.loc 1 1236 0
 5192 0012 FB79     		ldrb	r3, [r7, #7]
 5193 0014 03F01003 		and	r3, r3, #16
 5194 0018 FB71     		strb	r3, [r7, #7]
1237:../LSM9DS1_drivers.c **** 	return temp;
 5195              		.loc 1 1237 0
 5196 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1238:../LSM9DS1_drivers.c **** }
 5197              		.loc 1 1238 0
 5198 001c 1846     		mov	r0, r3
 5199 001e 07F10807 		add	r7, r7, #8
 5200 0022 BD46     		mov	sp, r7
 5201 0024 80BD     		pop	{r7, pc}
 5202              		.cfi_endproc
 5203              	.LFE163:
 5205 0026 00BF     		.section	.text.configAccelInt,"ax",%progbits
 5206              		.align	2
 5207              		.global	configAccelInt
 5208              		.thumb
 5209              		.thumb_func
 5211              	configAccelInt:
 5212              	.LFB164:
1239:../LSM9DS1_drivers.c **** 
1240:../LSM9DS1_drivers.c **** void configAccelInt(uint8_t generator, bool andInterrupts)
1241:../LSM9DS1_drivers.c **** {
 5213              		.loc 1 1241 0
 5214              		.cfi_startproc
 5215              		@ args = 0, pretend = 0, frame = 16
 5216              		@ frame_needed = 1, uses_anonymous_args = 0
 5217 0000 80B5     		push	{r7, lr}
 5218              	.LCFI150:
 5219              		.cfi_def_cfa_offset 8
 5220              		.cfi_offset 7, -8
 5221              		.cfi_offset 14, -4
 5222 0002 84B0     		sub	sp, sp, #16
 5223              	.LCFI151:
 5224              		.cfi_def_cfa_offset 24
 5225 0004 00AF     		add	r7, sp, #0
 5226              	.LCFI152:
 5227              		.cfi_def_cfa_register 7
 5228 0006 0246     		mov	r2, r0
 5229 0008 0B46     		mov	r3, r1
 5230 000a FA71     		strb	r2, [r7, #7]
 5231 000c BB71     		strb	r3, [r7, #6]
1242:../LSM9DS1_drivers.c **** 	// Use variables from accel_interrupt_generator, OR'd together to create
1243:../LSM9DS1_drivers.c **** 	// the [generator]value.
1244:../LSM9DS1_drivers.c **** 	uint8_t temp = generator;
 5232              		.loc 1 1244 0
 5233 000e FB79     		ldrb	r3, [r7, #7]
 5234 0010 FB73     		strb	r3, [r7, #15]
1245:../LSM9DS1_drivers.c **** 	if (andInterrupts) temp |= 0x80;
 5235              		.loc 1 1245 0
 5236 0012 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5237 0014 002B     		cmp	r3, #0
 5238 0016 03D0     		beq	.L208
 5239              		.loc 1 1245 0 is_stmt 0 discriminator 1
 5240 0018 FB7B     		ldrb	r3, [r7, #15]
 5241 001a 63F07F03 		orn	r3, r3, #127
 5242 001e FB73     		strb	r3, [r7, #15]
 5243              	.L208:
1246:../LSM9DS1_drivers.c **** 	xgWriteByte(INT_GEN_CFG_XL, temp);
 5244              		.loc 1 1246 0 is_stmt 1
 5245 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5246 0022 4FF00600 		mov	r0, #6
 5247 0026 1946     		mov	r1, r3
 5248 0028 FFF7FEFF 		bl	xgWriteByte
1247:../LSM9DS1_drivers.c **** }
 5249              		.loc 1 1247 0
 5250 002c 07F11007 		add	r7, r7, #16
 5251 0030 BD46     		mov	sp, r7
 5252 0032 80BD     		pop	{r7, pc}
 5253              		.cfi_endproc
 5254              	.LFE164:
 5256              		.section	.text.configAccelThs,"ax",%progbits
 5257              		.align	2
 5258              		.global	configAccelThs
 5259              		.thumb
 5260              		.thumb_func
 5262              	configAccelThs:
 5263              	.LFB165:
1248:../LSM9DS1_drivers.c **** 
1249:../LSM9DS1_drivers.c **** void configAccelThs(uint8_t threshold, lsm9ds1_axis axis, uint8_t duration, bool wait)
1250:../LSM9DS1_drivers.c **** {
 5264              		.loc 1 1250 0
 5265              		.cfi_startproc
 5266              		@ args = 0, pretend = 0, frame = 16
 5267              		@ frame_needed = 1, uses_anonymous_args = 0
 5268 0000 80B5     		push	{r7, lr}
 5269              	.LCFI153:
 5270              		.cfi_def_cfa_offset 8
 5271              		.cfi_offset 7, -8
 5272              		.cfi_offset 14, -4
 5273 0002 84B0     		sub	sp, sp, #16
 5274              	.LCFI154:
 5275              		.cfi_def_cfa_offset 24
 5276 0004 00AF     		add	r7, sp, #0
 5277              	.LCFI155:
 5278              		.cfi_def_cfa_register 7
 5279 0006 F871     		strb	r0, [r7, #7]
 5280 0008 B971     		strb	r1, [r7, #6]
 5281 000a 7A71     		strb	r2, [r7, #5]
 5282 000c 3B71     		strb	r3, [r7, #4]
1251:../LSM9DS1_drivers.c **** 	// Write threshold value to INT_GEN_THS_?_XL.
1252:../LSM9DS1_drivers.c **** 	// axis will be 0, 1, or 2 (x, y, z respectively)
1253:../LSM9DS1_drivers.c **** 	xgWriteByte(INT_GEN_THS_X_XL + axis, threshold);
 5283              		.loc 1 1253 0
 5284 000e BB79     		ldrb	r3, [r7, #6]
 5285 0010 03F10703 		add	r3, r3, #7
 5286 0014 DAB2     		uxtb	r2, r3
 5287 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5288 0018 1046     		mov	r0, r2
 5289 001a 1946     		mov	r1, r3
 5290 001c FFF7FEFF 		bl	xgWriteByte
1254:../LSM9DS1_drivers.c **** 
1255:../LSM9DS1_drivers.c **** 	// Write duration and wait to INT_GEN_DUR_XL
1256:../LSM9DS1_drivers.c **** 	uint8_t temp;
1257:../LSM9DS1_drivers.c **** 	temp = (duration & 0x7F);
 5291              		.loc 1 1257 0
 5292 0020 7B79     		ldrb	r3, [r7, #5]
 5293 0022 03F07F03 		and	r3, r3, #127
 5294 0026 FB73     		strb	r3, [r7, #15]
1258:../LSM9DS1_drivers.c **** 	if (wait) temp |= 0x80;
 5295              		.loc 1 1258 0
 5296 0028 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 5297 002a 002B     		cmp	r3, #0
 5298 002c 03D0     		beq	.L210
 5299              		.loc 1 1258 0 is_stmt 0 discriminator 1
 5300 002e FB7B     		ldrb	r3, [r7, #15]
 5301 0030 63F07F03 		orn	r3, r3, #127
 5302 0034 FB73     		strb	r3, [r7, #15]
 5303              	.L210:
1259:../LSM9DS1_drivers.c **** 	xgWriteByte(INT_GEN_DUR_XL, temp);
 5304              		.loc 1 1259 0 is_stmt 1
 5305 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5306 0038 4FF00A00 		mov	r0, #10
 5307 003c 1946     		mov	r1, r3
 5308 003e FFF7FEFF 		bl	xgWriteByte
1260:../LSM9DS1_drivers.c **** }
 5309              		.loc 1 1260 0
 5310 0042 07F11007 		add	r7, r7, #16
 5311 0046 BD46     		mov	sp, r7
 5312 0048 80BD     		pop	{r7, pc}
 5313              		.cfi_endproc
 5314              	.LFE165:
 5316 004a 00BF     		.section	.text.getAccelIntSrc,"ax",%progbits
 5317              		.align	2
 5318              		.global	getAccelIntSrc
 5319              		.thumb
 5320              		.thumb_func
 5322              	getAccelIntSrc:
 5323              	.LFB166:
1261:../LSM9DS1_drivers.c **** 
1262:../LSM9DS1_drivers.c **** uint8_t getAccelIntSrc(void)
1263:../LSM9DS1_drivers.c **** {
 5324              		.loc 1 1263 0
 5325              		.cfi_startproc
 5326              		@ args = 0, pretend = 0, frame = 8
 5327              		@ frame_needed = 1, uses_anonymous_args = 0
 5328 0000 80B5     		push	{r7, lr}
 5329              	.LCFI156:
 5330              		.cfi_def_cfa_offset 8
 5331              		.cfi_offset 7, -8
 5332              		.cfi_offset 14, -4
 5333 0002 82B0     		sub	sp, sp, #8
 5334              	.LCFI157:
 5335              		.cfi_def_cfa_offset 16
 5336 0004 00AF     		add	r7, sp, #0
 5337              	.LCFI158:
 5338              		.cfi_def_cfa_register 7
1264:../LSM9DS1_drivers.c **** 	uint8_t intSrc = xgReadByte(INT_GEN_SRC_XL);
 5339              		.loc 1 1264 0
 5340 0006 4FF02600 		mov	r0, #38
 5341 000a FFF7FEFF 		bl	xgReadByte
 5342 000e 0346     		mov	r3, r0
 5343 0010 FB71     		strb	r3, [r7, #7]
1265:../LSM9DS1_drivers.c **** 
1266:../LSM9DS1_drivers.c **** 	// Check if the IA_XL (interrupt active) bit is set
1267:../LSM9DS1_drivers.c **** 	if (intSrc & (1<<6))
 5344              		.loc 1 1267 0
 5345 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5346 0014 03F04003 		and	r3, r3, #64
 5347 0018 002B     		cmp	r3, #0
 5348 001a 04D0     		beq	.L212
1268:../LSM9DS1_drivers.c **** 	{
1269:../LSM9DS1_drivers.c **** 		return (intSrc & 0x3F);
 5349              		.loc 1 1269 0
 5350 001c FB79     		ldrb	r3, [r7, #7]
 5351 001e 03F03F03 		and	r3, r3, #63
 5352 0022 DBB2     		uxtb	r3, r3
 5353 0024 01E0     		b	.L213
 5354              	.L212:
1270:../LSM9DS1_drivers.c **** 	}
1271:../LSM9DS1_drivers.c **** 
1272:../LSM9DS1_drivers.c **** 	return 0;
 5355              		.loc 1 1272 0
 5356 0026 4FF00003 		mov	r3, #0
 5357              	.L213:
1273:../LSM9DS1_drivers.c **** }
 5358              		.loc 1 1273 0
 5359 002a 1846     		mov	r0, r3
 5360 002c 07F10807 		add	r7, r7, #8
 5361 0030 BD46     		mov	sp, r7
 5362 0032 80BD     		pop	{r7, pc}
 5363              		.cfi_endproc
 5364              	.LFE166:
 5366              		.section	.text.configGyroInt,"ax",%progbits
 5367              		.align	2
 5368              		.global	configGyroInt
 5369              		.thumb
 5370              		.thumb_func
 5372              	configGyroInt:
 5373              	.LFB167:
1274:../LSM9DS1_drivers.c **** 
1275:../LSM9DS1_drivers.c **** void configGyroInt(uint8_t generator, bool aoi, bool latch)
1276:../LSM9DS1_drivers.c **** {
 5374              		.loc 1 1276 0
 5375              		.cfi_startproc
 5376              		@ args = 0, pretend = 0, frame = 16
 5377              		@ frame_needed = 1, uses_anonymous_args = 0
 5378 0000 80B5     		push	{r7, lr}
 5379              	.LCFI159:
 5380              		.cfi_def_cfa_offset 8
 5381              		.cfi_offset 7, -8
 5382              		.cfi_offset 14, -4
 5383 0002 84B0     		sub	sp, sp, #16
 5384              	.LCFI160:
 5385              		.cfi_def_cfa_offset 24
 5386 0004 00AF     		add	r7, sp, #0
 5387              	.LCFI161:
 5388              		.cfi_def_cfa_register 7
 5389 0006 1346     		mov	r3, r2
 5390 0008 0246     		mov	r2, r0
 5391 000a FA71     		strb	r2, [r7, #7]
 5392 000c 0A46     		mov	r2, r1
 5393 000e BA71     		strb	r2, [r7, #6]
 5394 0010 7B71     		strb	r3, [r7, #5]
1277:../LSM9DS1_drivers.c **** 	// Use variables from accel_interrupt_generator, OR'd together to create
1278:../LSM9DS1_drivers.c **** 	// the [generator]value.
1279:../LSM9DS1_drivers.c **** 	uint8_t temp = generator;
 5395              		.loc 1 1279 0
 5396 0012 FB79     		ldrb	r3, [r7, #7]
 5397 0014 FB73     		strb	r3, [r7, #15]
1280:../LSM9DS1_drivers.c **** 	if (aoi) temp |= 0x80;
 5398              		.loc 1 1280 0
 5399 0016 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5400 0018 002B     		cmp	r3, #0
 5401 001a 03D0     		beq	.L215
 5402              		.loc 1 1280 0 is_stmt 0 discriminator 1
 5403 001c FB7B     		ldrb	r3, [r7, #15]
 5404 001e 63F07F03 		orn	r3, r3, #127
 5405 0022 FB73     		strb	r3, [r7, #15]
 5406              	.L215:
1281:../LSM9DS1_drivers.c **** 	if (latch) temp |= 0x40;
 5407              		.loc 1 1281 0 is_stmt 1
 5408 0024 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5409 0026 002B     		cmp	r3, #0
 5410 0028 03D0     		beq	.L216
 5411              		.loc 1 1281 0 is_stmt 0 discriminator 1
 5412 002a FB7B     		ldrb	r3, [r7, #15]
 5413 002c 43F04003 		orr	r3, r3, #64
 5414 0030 FB73     		strb	r3, [r7, #15]
 5415              	.L216:
1282:../LSM9DS1_drivers.c **** 	xgWriteByte(INT_GEN_CFG_G, temp);
 5416              		.loc 1 1282 0 is_stmt 1
 5417 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5418 0034 4FF03000 		mov	r0, #48
 5419 0038 1946     		mov	r1, r3
 5420 003a FFF7FEFF 		bl	xgWriteByte
1283:../LSM9DS1_drivers.c **** }
 5421              		.loc 1 1283 0
 5422 003e 07F11007 		add	r7, r7, #16
 5423 0042 BD46     		mov	sp, r7
 5424 0044 80BD     		pop	{r7, pc}
 5425              		.cfi_endproc
 5426              	.LFE167:
 5428 0046 00BF     		.section	.text.configGyroThs,"ax",%progbits
 5429              		.align	2
 5430              		.global	configGyroThs
 5431              		.thumb
 5432              		.thumb_func
 5434              	configGyroThs:
 5435              	.LFB168:
1284:../LSM9DS1_drivers.c **** 
1285:../LSM9DS1_drivers.c **** 
1286:../LSM9DS1_drivers.c **** void configGyroThs(int16_t threshold, lsm9ds1_axis axis, uint8_t duration, bool wait)
1287:../LSM9DS1_drivers.c **** {
 5436              		.loc 1 1287 0
 5437              		.cfi_startproc
 5438              		@ args = 0, pretend = 0, frame = 16
 5439              		@ frame_needed = 1, uses_anonymous_args = 0
 5440 0000 80B5     		push	{r7, lr}
 5441              	.LCFI162:
 5442              		.cfi_def_cfa_offset 8
 5443              		.cfi_offset 7, -8
 5444              		.cfi_offset 14, -4
 5445 0002 84B0     		sub	sp, sp, #16
 5446              	.LCFI163:
 5447              		.cfi_def_cfa_offset 24
 5448 0004 00AF     		add	r7, sp, #0
 5449              	.LCFI164:
 5450              		.cfi_def_cfa_register 7
 5451 0006 F880     		strh	r0, [r7, #6]	@ movhi
 5452 0008 7971     		strb	r1, [r7, #5]
 5453 000a 3A71     		strb	r2, [r7, #4]
 5454 000c FB70     		strb	r3, [r7, #3]
1288:../LSM9DS1_drivers.c **** 	uint8_t buffer[2];
1289:../LSM9DS1_drivers.c **** 	buffer[0] = (threshold & 0x7F00) >> 8;
 5455              		.loc 1 1289 0
 5456 000e FB88     		ldrh	r3, [r7, #6]
 5457 0010 03F4FE43 		and	r3, r3, #32512
 5458 0014 4FEA2323 		asr	r3, r3, #8
 5459 0018 DBB2     		uxtb	r3, r3
 5460 001a 3B73     		strb	r3, [r7, #12]
1290:../LSM9DS1_drivers.c **** 	buffer[1] = (threshold & 0x00FF);
 5461              		.loc 1 1290 0
 5462 001c FB88     		ldrh	r3, [r7, #6]	@ movhi
 5463 001e DBB2     		uxtb	r3, r3
 5464 0020 7B73     		strb	r3, [r7, #13]
1291:../LSM9DS1_drivers.c **** 	// Write threshold value to INT_GEN_THS_?H_G and  INT_GEN_THS_?L_G.
1292:../LSM9DS1_drivers.c **** 	// axis will be 0, 1, or 2 (x, y, z respectively)
1293:../LSM9DS1_drivers.c **** 	xgWriteByte(INT_GEN_THS_XH_G + (axis * 2), buffer[0]);
 5465              		.loc 1 1293 0
 5466 0022 7B79     		ldrb	r3, [r7, #5]
 5467 0024 4FEA4303 		lsl	r3, r3, #1
 5468 0028 DBB2     		uxtb	r3, r3
 5469 002a 03F13103 		add	r3, r3, #49
 5470 002e DAB2     		uxtb	r2, r3
 5471 0030 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 5472 0032 1046     		mov	r0, r2
 5473 0034 1946     		mov	r1, r3
 5474 0036 FFF7FEFF 		bl	xgWriteByte
1294:../LSM9DS1_drivers.c **** 	xgWriteByte(INT_GEN_THS_XH_G + 1 + (axis * 2), buffer[1]);
 5475              		.loc 1 1294 0
 5476 003a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5477 003c 03F11903 		add	r3, r3, #25
 5478 0040 DBB2     		uxtb	r3, r3
 5479 0042 4FEA4303 		lsl	r3, r3, #1
 5480 0046 DAB2     		uxtb	r2, r3
 5481 0048 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 5482 004a 1046     		mov	r0, r2
 5483 004c 1946     		mov	r1, r3
 5484 004e FFF7FEFF 		bl	xgWriteByte
1295:../LSM9DS1_drivers.c **** 
1296:../LSM9DS1_drivers.c **** 	// Write duration and wait to INT_GEN_DUR_XL
1297:../LSM9DS1_drivers.c **** 	uint8_t temp;
1298:../LSM9DS1_drivers.c **** 	temp = (duration & 0x7F);
 5485              		.loc 1 1298 0
 5486 0052 3B79     		ldrb	r3, [r7, #4]
 5487 0054 03F07F03 		and	r3, r3, #127
 5488 0058 FB73     		strb	r3, [r7, #15]
1299:../LSM9DS1_drivers.c **** 	if (wait) temp |= 0x80;
 5489              		.loc 1 1299 0
 5490 005a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5491 005c 002B     		cmp	r3, #0
 5492 005e 03D0     		beq	.L218
 5493              		.loc 1 1299 0 is_stmt 0 discriminator 1
 5494 0060 FB7B     		ldrb	r3, [r7, #15]
 5495 0062 63F07F03 		orn	r3, r3, #127
 5496 0066 FB73     		strb	r3, [r7, #15]
 5497              	.L218:
1300:../LSM9DS1_drivers.c **** 	xgWriteByte(INT_GEN_DUR_G, temp);
 5498              		.loc 1 1300 0 is_stmt 1
 5499 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5500 006a 4FF03700 		mov	r0, #55
 5501 006e 1946     		mov	r1, r3
 5502 0070 FFF7FEFF 		bl	xgWriteByte
1301:../LSM9DS1_drivers.c **** }
 5503              		.loc 1 1301 0
 5504 0074 07F11007 		add	r7, r7, #16
 5505 0078 BD46     		mov	sp, r7
 5506 007a 80BD     		pop	{r7, pc}
 5507              		.cfi_endproc
 5508              	.LFE168:
 5510              		.section	.text.getGyroIntSrc,"ax",%progbits
 5511              		.align	2
 5512              		.global	getGyroIntSrc
 5513              		.thumb
 5514              		.thumb_func
 5516              	getGyroIntSrc:
 5517              	.LFB169:
1302:../LSM9DS1_drivers.c **** 
1303:../LSM9DS1_drivers.c **** 
1304:../LSM9DS1_drivers.c **** uint8_t getGyroIntSrc()
1305:../LSM9DS1_drivers.c **** {
 5518              		.loc 1 1305 0
 5519              		.cfi_startproc
 5520              		@ args = 0, pretend = 0, frame = 8
 5521              		@ frame_needed = 1, uses_anonymous_args = 0
 5522 0000 80B5     		push	{r7, lr}
 5523              	.LCFI165:
 5524              		.cfi_def_cfa_offset 8
 5525              		.cfi_offset 7, -8
 5526              		.cfi_offset 14, -4
 5527 0002 82B0     		sub	sp, sp, #8
 5528              	.LCFI166:
 5529              		.cfi_def_cfa_offset 16
 5530 0004 00AF     		add	r7, sp, #0
 5531              	.LCFI167:
 5532              		.cfi_def_cfa_register 7
1306:../LSM9DS1_drivers.c **** 	uint8_t intSrc = xgReadByte(INT_GEN_SRC_G);
 5533              		.loc 1 1306 0
 5534 0006 4FF01400 		mov	r0, #20
 5535 000a FFF7FEFF 		bl	xgReadByte
 5536 000e 0346     		mov	r3, r0
 5537 0010 FB71     		strb	r3, [r7, #7]
1307:../LSM9DS1_drivers.c **** 
1308:../LSM9DS1_drivers.c **** 	// Check if the IA_G (interrupt active) bit is set
1309:../LSM9DS1_drivers.c **** 	if (intSrc & (1<<6))
 5538              		.loc 1 1309 0
 5539 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5540 0014 03F04003 		and	r3, r3, #64
 5541 0018 002B     		cmp	r3, #0
 5542 001a 04D0     		beq	.L220
1310:../LSM9DS1_drivers.c **** 	{
1311:../LSM9DS1_drivers.c **** 		return (intSrc & 0x3F);
 5543              		.loc 1 1311 0
 5544 001c FB79     		ldrb	r3, [r7, #7]
 5545 001e 03F03F03 		and	r3, r3, #63
 5546 0022 DBB2     		uxtb	r3, r3
 5547 0024 01E0     		b	.L221
 5548              	.L220:
1312:../LSM9DS1_drivers.c **** 	}
1313:../LSM9DS1_drivers.c **** 
1314:../LSM9DS1_drivers.c **** 	return 0;
 5549              		.loc 1 1314 0
 5550 0026 4FF00003 		mov	r3, #0
 5551              	.L221:
1315:../LSM9DS1_drivers.c **** }
 5552              		.loc 1 1315 0
 5553 002a 1846     		mov	r0, r3
 5554 002c 07F10807 		add	r7, r7, #8
 5555 0030 BD46     		mov	sp, r7
 5556 0032 80BD     		pop	{r7, pc}
 5557              		.cfi_endproc
 5558              	.LFE169:
 5560              		.section	.text.configMagInt,"ax",%progbits
 5561              		.align	2
 5562              		.global	configMagInt
 5563              		.thumb
 5564              		.thumb_func
 5566              	configMagInt:
 5567              	.LFB170:
1316:../LSM9DS1_drivers.c **** 
1317:../LSM9DS1_drivers.c **** 
1318:../LSM9DS1_drivers.c **** void configMagInt(uint8_t generator, h_lactive activeLow, bool latch)
1319:../LSM9DS1_drivers.c **** {
 5568              		.loc 1 1319 0
 5569              		.cfi_startproc
 5570              		@ args = 0, pretend = 0, frame = 16
 5571              		@ frame_needed = 1, uses_anonymous_args = 0
 5572 0000 80B5     		push	{r7, lr}
 5573              	.LCFI168:
 5574              		.cfi_def_cfa_offset 8
 5575              		.cfi_offset 7, -8
 5576              		.cfi_offset 14, -4
 5577 0002 84B0     		sub	sp, sp, #16
 5578              	.LCFI169:
 5579              		.cfi_def_cfa_offset 24
 5580 0004 00AF     		add	r7, sp, #0
 5581              	.LCFI170:
 5582              		.cfi_def_cfa_register 7
 5583 0006 1346     		mov	r3, r2
 5584 0008 0246     		mov	r2, r0
 5585 000a FA71     		strb	r2, [r7, #7]
 5586 000c 0A46     		mov	r2, r1
 5587 000e BA71     		strb	r2, [r7, #6]
 5588 0010 7B71     		strb	r3, [r7, #5]
1320:../LSM9DS1_drivers.c **** 	// Mask out non-generator bits (0-4)
1321:../LSM9DS1_drivers.c **** 	uint8_t config = (generator & 0xE0);
 5589              		.loc 1 1321 0
 5590 0012 FB79     		ldrb	r3, [r7, #7]
 5591 0014 23F01F03 		bic	r3, r3, #31
 5592 0018 FB73     		strb	r3, [r7, #15]
1322:../LSM9DS1_drivers.c **** 	// IEA bit is 0 for active-low, 1 for active-high.
1323:../LSM9DS1_drivers.c **** 	if (activeLow == INT_ACTIVE_HIGH) config |= (1<<2);
 5593              		.loc 1 1323 0
 5594 001a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5595 001c 002B     		cmp	r3, #0
 5596 001e 03D1     		bne	.L223
 5597              		.loc 1 1323 0 is_stmt 0 discriminator 1
 5598 0020 FB7B     		ldrb	r3, [r7, #15]
 5599 0022 43F00403 		orr	r3, r3, #4
 5600 0026 FB73     		strb	r3, [r7, #15]
 5601              	.L223:
1324:../LSM9DS1_drivers.c **** 	// IEL bit is 0 for latched, 1 for not-latched
1325:../LSM9DS1_drivers.c **** 	if (!latch) config |= (1<<1);
 5602              		.loc 1 1325 0 is_stmt 1
 5603 0028 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5604 002a 002B     		cmp	r3, #0
 5605 002c 03D1     		bne	.L224
 5606              		.loc 1 1325 0 is_stmt 0 discriminator 1
 5607 002e FB7B     		ldrb	r3, [r7, #15]
 5608 0030 43F00203 		orr	r3, r3, #2
 5609 0034 FB73     		strb	r3, [r7, #15]
 5610              	.L224:
1326:../LSM9DS1_drivers.c **** 	// As long as we have at least 1 generator, enable the interrupt
1327:../LSM9DS1_drivers.c **** 	if (generator != 0) config |= (1<<0);
 5611              		.loc 1 1327 0 is_stmt 1
 5612 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5613 0038 002B     		cmp	r3, #0
 5614 003a 03D0     		beq	.L225
 5615              		.loc 1 1327 0 is_stmt 0 discriminator 1
 5616 003c FB7B     		ldrb	r3, [r7, #15]
 5617 003e 43F00103 		orr	r3, r3, #1
 5618 0042 FB73     		strb	r3, [r7, #15]
 5619              	.L225:
1328:../LSM9DS1_drivers.c **** 
1329:../LSM9DS1_drivers.c **** 	mWriteByte(INT_CFG_M, config);
 5620              		.loc 1 1329 0 is_stmt 1
 5621 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5622 0046 4FF03000 		mov	r0, #48
 5623 004a 1946     		mov	r1, r3
 5624 004c FFF7FEFF 		bl	mWriteByte
1330:../LSM9DS1_drivers.c **** }
 5625              		.loc 1 1330 0
 5626 0050 07F11007 		add	r7, r7, #16
 5627 0054 BD46     		mov	sp, r7
 5628 0056 80BD     		pop	{r7, pc}
 5629              		.cfi_endproc
 5630              	.LFE170:
 5632              		.section	.text.configMagThs,"ax",%progbits
 5633              		.align	2
 5634              		.global	configMagThs
 5635              		.thumb
 5636              		.thumb_func
 5638              	configMagThs:
 5639              	.LFB171:
1331:../LSM9DS1_drivers.c **** 
1332:../LSM9DS1_drivers.c **** 
1333:../LSM9DS1_drivers.c **** void configMagThs(uint16_t threshold)
1334:../LSM9DS1_drivers.c **** {
 5640              		.loc 1 1334 0
 5641              		.cfi_startproc
 5642              		@ args = 0, pretend = 0, frame = 8
 5643              		@ frame_needed = 1, uses_anonymous_args = 0
 5644 0000 80B5     		push	{r7, lr}
 5645              	.LCFI171:
 5646              		.cfi_def_cfa_offset 8
 5647              		.cfi_offset 7, -8
 5648              		.cfi_offset 14, -4
 5649 0002 82B0     		sub	sp, sp, #8
 5650              	.LCFI172:
 5651              		.cfi_def_cfa_offset 16
 5652 0004 00AF     		add	r7, sp, #0
 5653              	.LCFI173:
 5654              		.cfi_def_cfa_register 7
 5655 0006 0346     		mov	r3, r0
 5656 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1335:../LSM9DS1_drivers.c **** 	// Write high eight bits of [threshold] to INT_THS_H_M
1336:../LSM9DS1_drivers.c **** 	mWriteByte(INT_THS_H_M, (uint8_t)((threshold & 0x7F00) >> 8));
 5657              		.loc 1 1336 0
 5658 000a FB88     		ldrh	r3, [r7, #6]
 5659 000c 03F4FE43 		and	r3, r3, #32512
 5660 0010 4FEA2323 		asr	r3, r3, #8
 5661 0014 DBB2     		uxtb	r3, r3
 5662 0016 4FF03300 		mov	r0, #51
 5663 001a 1946     		mov	r1, r3
 5664 001c FFF7FEFF 		bl	mWriteByte
1337:../LSM9DS1_drivers.c **** 	// Write low eight bits of [threshold] to INT_THS_L_M
1338:../LSM9DS1_drivers.c **** 	mWriteByte(INT_THS_L_M, (uint8_t)(threshold & 0x00FF));
 5665              		.loc 1 1338 0
 5666 0020 FB88     		ldrh	r3, [r7, #6]	@ movhi
 5667 0022 DBB2     		uxtb	r3, r3
 5668 0024 4FF03200 		mov	r0, #50
 5669 0028 1946     		mov	r1, r3
 5670 002a FFF7FEFF 		bl	mWriteByte
1339:../LSM9DS1_drivers.c **** }
 5671              		.loc 1 1339 0
 5672 002e 07F10807 		add	r7, r7, #8
 5673 0032 BD46     		mov	sp, r7
 5674 0034 80BD     		pop	{r7, pc}
 5675              		.cfi_endproc
 5676              	.LFE171:
 5678 0036 00BF     		.section	.text.getMagIntSrc,"ax",%progbits
 5679              		.align	2
 5680              		.global	getMagIntSrc
 5681              		.thumb
 5682              		.thumb_func
 5684              	getMagIntSrc:
 5685              	.LFB172:
1340:../LSM9DS1_drivers.c **** 
1341:../LSM9DS1_drivers.c **** uint8_t getMagIntSrc(void)
1342:../LSM9DS1_drivers.c **** {
 5686              		.loc 1 1342 0
 5687              		.cfi_startproc
 5688              		@ args = 0, pretend = 0, frame = 8
 5689              		@ frame_needed = 1, uses_anonymous_args = 0
 5690 0000 80B5     		push	{r7, lr}
 5691              	.LCFI174:
 5692              		.cfi_def_cfa_offset 8
 5693              		.cfi_offset 7, -8
 5694              		.cfi_offset 14, -4
 5695 0002 82B0     		sub	sp, sp, #8
 5696              	.LCFI175:
 5697              		.cfi_def_cfa_offset 16
 5698 0004 00AF     		add	r7, sp, #0
 5699              	.LCFI176:
 5700              		.cfi_def_cfa_register 7
1343:../LSM9DS1_drivers.c **** 	uint8_t intSrc = mReadByte(INT_SRC_M);
 5701              		.loc 1 1343 0
 5702 0006 4FF03000 		mov	r0, #48
 5703 000a FFF7FEFF 		bl	mReadByte
 5704 000e 0346     		mov	r3, r0
 5705 0010 FB71     		strb	r3, [r7, #7]
1344:../LSM9DS1_drivers.c **** 
1345:../LSM9DS1_drivers.c **** 	// Check if the INT (interrupt active) bit is set
1346:../LSM9DS1_drivers.c **** 	if (intSrc & (1<<0))
 5706              		.loc 1 1346 0
 5707 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5708 0014 03F00103 		and	r3, r3, #1
 5709 0018 002B     		cmp	r3, #0
 5710 001a 04D0     		beq	.L228
1347:../LSM9DS1_drivers.c **** 	{
1348:../LSM9DS1_drivers.c **** 		return (intSrc & 0xFE);
 5711              		.loc 1 1348 0
 5712 001c FB79     		ldrb	r3, [r7, #7]
 5713 001e 23F00103 		bic	r3, r3, #1
 5714 0022 DBB2     		uxtb	r3, r3
 5715 0024 01E0     		b	.L229
 5716              	.L228:
1349:../LSM9DS1_drivers.c **** 	}
1350:../LSM9DS1_drivers.c **** 
1351:../LSM9DS1_drivers.c **** 	return 0;
 5717              		.loc 1 1351 0
 5718 0026 4FF00003 		mov	r3, #0
 5719              	.L229:
1352:../LSM9DS1_drivers.c **** }
 5720              		.loc 1 1352 0
 5721 002a 1846     		mov	r0, r3
 5722 002c 07F10807 		add	r7, r7, #8
 5723 0030 BD46     		mov	sp, r7
 5724 0032 80BD     		pop	{r7, pc}
 5725              		.cfi_endproc
 5726              	.LFE172:
 5728              		.section	.text.sleepGyro,"ax",%progbits
 5729              		.align	2
 5730              		.global	sleepGyro
 5731              		.thumb
 5732              		.thumb_func
 5734              	sleepGyro:
 5735              	.LFB173:
1353:../LSM9DS1_drivers.c **** 
1354:../LSM9DS1_drivers.c **** void sleepGyro(bool enable)
1355:../LSM9DS1_drivers.c **** {
 5736              		.loc 1 1355 0
 5737              		.cfi_startproc
 5738              		@ args = 0, pretend = 0, frame = 16
 5739              		@ frame_needed = 1, uses_anonymous_args = 0
 5740 0000 80B5     		push	{r7, lr}
 5741              	.LCFI177:
 5742              		.cfi_def_cfa_offset 8
 5743              		.cfi_offset 7, -8
 5744              		.cfi_offset 14, -4
 5745 0002 84B0     		sub	sp, sp, #16
 5746              	.LCFI178:
 5747              		.cfi_def_cfa_offset 24
 5748 0004 00AF     		add	r7, sp, #0
 5749              	.LCFI179:
 5750              		.cfi_def_cfa_register 7
 5751 0006 0346     		mov	r3, r0
 5752 0008 FB71     		strb	r3, [r7, #7]
1356:../LSM9DS1_drivers.c **** 	uint8_t temp = xgReadByte(CTRL_REG9);
 5753              		.loc 1 1356 0
 5754 000a 4FF02300 		mov	r0, #35
 5755 000e FFF7FEFF 		bl	xgReadByte
 5756 0012 0346     		mov	r3, r0
 5757 0014 FB73     		strb	r3, [r7, #15]
1357:../LSM9DS1_drivers.c **** 	if (enable) temp |= (1<<6);
 5758              		.loc 1 1357 0
 5759 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5760 0018 002B     		cmp	r3, #0
 5761 001a 04D0     		beq	.L231
 5762              		.loc 1 1357 0 is_stmt 0 discriminator 1
 5763 001c FB7B     		ldrb	r3, [r7, #15]
 5764 001e 43F04003 		orr	r3, r3, #64
 5765 0022 FB73     		strb	r3, [r7, #15]
 5766 0024 03E0     		b	.L232
 5767              	.L231:
1358:../LSM9DS1_drivers.c **** 	else temp &= ~(1<<6);
 5768              		.loc 1 1358 0 is_stmt 1
 5769 0026 FB7B     		ldrb	r3, [r7, #15]
 5770 0028 23F04003 		bic	r3, r3, #64
 5771 002c FB73     		strb	r3, [r7, #15]
 5772              	.L232:
1359:../LSM9DS1_drivers.c **** 	xgWriteByte(CTRL_REG9, temp);
 5773              		.loc 1 1359 0
 5774 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5775 0030 4FF02300 		mov	r0, #35
 5776 0034 1946     		mov	r1, r3
 5777 0036 FFF7FEFF 		bl	xgWriteByte
1360:../LSM9DS1_drivers.c **** }
 5778              		.loc 1 1360 0
 5779 003a 07F11007 		add	r7, r7, #16
 5780 003e BD46     		mov	sp, r7
 5781 0040 80BD     		pop	{r7, pc}
 5782              		.cfi_endproc
 5783              	.LFE173:
 5785 0042 00BF     		.section	.text.getFIFOSamples,"ax",%progbits
 5786              		.align	2
 5787              		.global	getFIFOSamples
 5788              		.thumb
 5789              		.thumb_func
 5791              	getFIFOSamples:
 5792              	.LFB174:
1361:../LSM9DS1_drivers.c **** 
1362:../LSM9DS1_drivers.c **** 
1363:../LSM9DS1_drivers.c **** uint8_t getFIFOSamples(void)
1364:../LSM9DS1_drivers.c **** {
 5793              		.loc 1 1364 0
 5794              		.cfi_startproc
 5795              		@ args = 0, pretend = 0, frame = 0
 5796              		@ frame_needed = 1, uses_anonymous_args = 0
 5797 0000 80B5     		push	{r7, lr}
 5798              	.LCFI180:
 5799              		.cfi_def_cfa_offset 8
 5800              		.cfi_offset 7, -8
 5801              		.cfi_offset 14, -4
 5802 0002 00AF     		add	r7, sp, #0
 5803              	.LCFI181:
 5804              		.cfi_def_cfa_register 7
1365:../LSM9DS1_drivers.c **** 	return (xgReadByte(FIFO_SRC) & 0x3F);
 5805              		.loc 1 1365 0
 5806 0004 4FF02F00 		mov	r0, #47
 5807 0008 FFF7FEFF 		bl	xgReadByte
 5808 000c 0346     		mov	r3, r0
 5809 000e 03F03F03 		and	r3, r3, #63
 5810 0012 DBB2     		uxtb	r3, r3
1366:../LSM9DS1_drivers.c **** }
 5811              		.loc 1 1366 0
 5812 0014 1846     		mov	r0, r3
 5813 0016 80BD     		pop	{r7, pc}
 5814              		.cfi_endproc
 5815              	.LFE174:
 5817              		.section	.text.mReadBytes,"ax",%progbits
 5818              		.align	2
 5819              		.global	mReadBytes
 5820              		.thumb
 5821              		.thumb_func
 5823              	mReadBytes:
 5824              	.LFB175:
1367:../LSM9DS1_drivers.c **** 
1368:../LSM9DS1_drivers.c **** 
1369:../LSM9DS1_drivers.c **** void mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
1370:../LSM9DS1_drivers.c **** {
 5825              		.loc 1 1370 0
 5826              		.cfi_startproc
 5827              		@ args = 0, pretend = 0, frame = 8
 5828              		@ frame_needed = 1, uses_anonymous_args = 0
 5829 0000 80B5     		push	{r7, lr}
 5830              	.LCFI182:
 5831              		.cfi_def_cfa_offset 8
 5832              		.cfi_offset 7, -8
 5833              		.cfi_offset 14, -4
 5834 0002 82B0     		sub	sp, sp, #8
 5835              	.LCFI183:
 5836              		.cfi_def_cfa_offset 16
 5837 0004 00AF     		add	r7, sp, #0
 5838              	.LCFI184:
 5839              		.cfi_def_cfa_register 7
 5840 0006 3960     		str	r1, [r7, #0]
 5841 0008 1346     		mov	r3, r2
 5842 000a 0246     		mov	r2, r0
 5843 000c FA71     		strb	r2, [r7, #7]
 5844 000e BB71     		strb	r3, [r7, #6]
1371:../LSM9DS1_drivers.c **** 	// Whether we're using I2C or SPI, read multiple bytes using the
1372:../LSM9DS1_drivers.c **** 	// accelerometer-specific I2C address or SPI CS pin.
1373:../LSM9DS1_drivers.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 5845              		.loc 1 1373 0
 5846 0010 40F20003 		movw	r3, #:lower16:settings
 5847 0014 C0F20003 		movt	r3, #:upper16:settings
 5848 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5849 001a 012B     		cmp	r3, #1
 5850 001c 0CD1     		bne	.L236
1374:../LSM9DS1_drivers.c **** 		I2CreadBytes(_mAddress, subAddress, dest, count);
 5851              		.loc 1 1374 0
 5852 001e 40F20003 		movw	r3, #:lower16:_mAddress
 5853 0022 C0F20003 		movt	r3, #:upper16:_mAddress
 5854 0026 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 5855 0028 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5856 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5857 002c 0846     		mov	r0, r1
 5858 002e 1146     		mov	r1, r2
 5859 0030 3A68     		ldr	r2, [r7, #0]
 5860 0032 FFF7FEFF 		bl	I2CreadBytes
 5861 0036 12E0     		b	.L235
 5862              	.L236:
1375:../LSM9DS1_drivers.c **** 	else if (settings.device.commInterface == IMU_MODE_SPI)
 5863              		.loc 1 1375 0
 5864 0038 40F20003 		movw	r3, #:lower16:settings
 5865 003c C0F20003 		movt	r3, #:upper16:settings
 5866 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5867 0042 002B     		cmp	r3, #0
 5868 0044 0BD1     		bne	.L235
1376:../LSM9DS1_drivers.c **** 		SPIreadBytes(_mAddress, subAddress, dest, count);
 5869              		.loc 1 1376 0
 5870 0046 40F20003 		movw	r3, #:lower16:_mAddress
 5871 004a C0F20003 		movt	r3, #:upper16:_mAddress
 5872 004e 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 5873 0050 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5874 0052 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5875 0054 0846     		mov	r0, r1
 5876 0056 1146     		mov	r1, r2
 5877 0058 3A68     		ldr	r2, [r7, #0]
 5878 005a FFF7FEFF 		bl	SPIreadBytes
 5879              	.L235:
1377:../LSM9DS1_drivers.c **** }
 5880              		.loc 1 1377 0
 5881 005e 07F10807 		add	r7, r7, #8
 5882 0062 BD46     		mov	sp, r7
 5883 0064 80BD     		pop	{r7, pc}
 5884              		.cfi_endproc
 5885              	.LFE175:
 5887              		.section	.text.myDelay,"ax",%progbits
 5888              		.align	2
 5889              		.global	myDelay
 5890              		.thumb
 5891              		.thumb_func
 5893              	myDelay:
 5894              	.LFB176:
1378:../LSM9DS1_drivers.c **** 
1379:../LSM9DS1_drivers.c **** void myDelay(volatile unsigned int delay)
1380:../LSM9DS1_drivers.c **** {
 5895              		.loc 1 1380 0
 5896              		.cfi_startproc
 5897              		@ args = 0, pretend = 0, frame = 16
 5898              		@ frame_needed = 1, uses_anonymous_args = 0
 5899              		@ link register save eliminated.
 5900 0000 80B4     		push	{r7}
 5901              	.LCFI185:
 5902              		.cfi_def_cfa_offset 4
 5903              		.cfi_offset 7, -4
 5904 0002 85B0     		sub	sp, sp, #20
 5905              	.LCFI186:
 5906              		.cfi_def_cfa_offset 24
 5907 0004 00AF     		add	r7, sp, #0
 5908              	.LCFI187:
 5909              		.cfi_def_cfa_register 7
 5910 0006 7860     		str	r0, [r7, #4]
1381:../LSM9DS1_drivers.c **** 	volatile unsigned int i = 0;
 5911              		.loc 1 1381 0
 5912 0008 4FF00003 		mov	r3, #0
 5913 000c FB60     		str	r3, [r7, #12]
1382:../LSM9DS1_drivers.c **** 
1383:../LSM9DS1_drivers.c **** 	for(i = 0; i < delay; i++)
 5914              		.loc 1 1383 0
 5915 000e 4FF00003 		mov	r3, #0
 5916 0012 FB60     		str	r3, [r7, #12]
 5917 0014 03E0     		b	.L239
 5918              	.L240:
 5919              		.loc 1 1383 0 is_stmt 0 discriminator 2
 5920 0016 FB68     		ldr	r3, [r7, #12]
 5921 0018 03F10103 		add	r3, r3, #1
 5922 001c FB60     		str	r3, [r7, #12]
 5923              	.L239:
 5924              		.loc 1 1383 0 discriminator 1
 5925 001e FA68     		ldr	r2, [r7, #12]
 5926 0020 7B68     		ldr	r3, [r7, #4]
 5927 0022 9A42     		cmp	r2, r3
 5928 0024 F7D3     		bcc	.L240
1384:../LSM9DS1_drivers.c **** 	{
1385:../LSM9DS1_drivers.c **** 		;
1386:../LSM9DS1_drivers.c **** 	}
1387:../LSM9DS1_drivers.c **** }
 5929              		.loc 1 1387 0 is_stmt 1
 5930 0026 07F11407 		add	r7, r7, #20
 5931 002a BD46     		mov	sp, r7
 5932 002c 80BC     		pop	{r7}
 5933 002e 7047     		bx	lr
 5934              		.cfi_endproc
 5935              	.LFE176:
 5937              		.text
 5938              	.Letext0:
 5939              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 5940              		.file 3 "../LSM9DS1_Types.h"
 5941              		.file 4 "C:\\DAVE3_workspace\\mojWorkspace\\Bachelor\\Dave\\Generated\\inc\\DAVESupport/../../inc/
 5942              		.file 5 "C:\\DAVE3_workspace\\mojWorkspace\\Bachelor\\Dave\\Generated\\inc\\DAVESupport/../../inc/
 5943              		.file 6 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 5944              		.file 7 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 5945              		.file 8 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/include/stddef.h"
 5946              		.file 9 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 5947              		.file 10 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/
 5948              		.file 11 "../LSM9DS1_drivers.h"
 5949              		.file 12 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 5950              		.file 13 "../timerFunctionsLSM.h"
DEFINED SYMBOLS
                            *ABS*:00000000 LSM9DS1_drivers.c
                            *COM*:00000004 TimerId
                            *COM*:00000004 Status
                            *COM*:00000004 WriteTimerId
                            *COM*:00000004 WriteTimerStatus
                            *COM*:00000004 TimerIdReadBytes
                            *COM*:00000004 StatusReadBytes
                            *COM*:00000028 settings
                            *COM*:0000000c gBias
                            *COM*:0000000c aBias
                            *COM*:0000000c mBias
                            *COM*:00000006 gBiasRaw
                            *COM*:00000006 aBiasRaw
                            *COM*:00000006 mBiasRaw
                            *COM*:00000001 _autoCalc
                            *COM*:00000001 _mAddress
                            *COM*:00000001 _xgAddress
                            *COM*:00000004 gRes
                            *COM*:00000004 aRes
                            *COM*:00000004 mRes
                            *COM*:00000002 gx
                            *COM*:00000002 gy
                            *COM*:00000002 gz
                            *COM*:00000002 ax
                            *COM*:00000002 ay
                            *COM*:00000002 az
                            *COM*:00000002 mx
                            *COM*:00000002 my
                            *COM*:00000002 mz
                            *COM*:00000002 temperature
                            *COM*:00000004 accelMeasurementsNum
                            *COM*:00000014 lk
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:55     .bss:00000000 indexAccel
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:52     .bss:00000000 $d
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:62     .data:00000000 magSensitivity
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:59     .data:00000000 $d
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:72     .bss:00000004 accelMeasurements
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:78     .bss:00000008 gyroMeasurements
                            *COM*:00001770 poms
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:82     .text.init:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:87     .text.init:00000000 init
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:363    .text.begin:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:368    .text.begin:00000000 begin
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:477    .text.constrainScales:00000000 constrainScales
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:583    .text.calcgRes:00000000 calcgRes
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:667    .text.calcmRes:00000000 calcmRes
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:625    .text.calcaRes:00000000 calcaRes
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:759    .text.initI2C:00000000 initI2C
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:786    .text.initSPI:00000000 initSPI
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:931    .text.mReadByte:00000000 mReadByte
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1037   .text.xgReadByte:00000000 xgReadByte
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1596   .text.initGyro:00000000 initGyro
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1978   .text.initAccel:00000000 initAccel
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2158   .text.initMag:00000000 initMag
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:472    .text.constrainScales:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:578    .text.calcgRes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:615    .text.calcgRes:00000030 $d
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:620    .text.calcaRes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:657    .text.calcaRes:00000030 $d
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:662    .text.calcmRes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:692    .text.calcmRes:00000020 $d
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:707    .text.calcmRes:00000054 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:754    .text.initI2C:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:781    .text.initSPI:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:808    .text.I2CreadByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:813    .text.I2CreadByte:00000000 I2CreadByte
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:926    .text.mReadByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1001   .text.SPIreadByte:00000000 SPIreadByte
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:996    .text.SPIreadByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1032   .text.xgReadByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1102   .text.xgReadBytes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1107   .text.xgReadBytes:00000000 xgReadBytes
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1177   .text.I2CreadBytes:00000000 I2CreadBytes
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1559   .text.SPIreadBytes:00000000 SPIreadBytes
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1172   .text.I2CreadBytes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1367   .text.I2CreadBytes1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1372   .text.I2CreadBytes1:00000000 I2CreadBytes1
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1554   .text.SPIreadBytes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1591   .text.initGyro:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1819   .text.xgWriteByte:00000000 xgWriteByte
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1814   .text.xgWriteByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1870   .text.I2CwriteByte:00000000 I2CwriteByte
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1865   .text.I2CwriteByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:1973   .text.initAccel:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2153   .text.initMag:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2323   .text.mWriteByte:00000000 mWriteByte
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2318   .text.mWriteByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2370   .text.enableFIFO:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2375   .text.enableFIFO:00000000 enableFIFO
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2427   .text.setFIFO:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2432   .text.setFIFO:00000000 setFIFO
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2480   .text.readGyro1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2485   .text.readGyro1:00000000 readGyro1
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4429   .text.calcGyro:00000000 calcGyro
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2667   .text.readAccel1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2672   .text.readAccel1:00000000 readAccel1
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4483   .text.calcAccel:00000000 calcAccel
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3202   .text.toAscii:00000000 toAscii
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2879   .text.readAccel1v1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:2884   .text.readAccel1v1:00000000 readAccel1v1
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3197   .text.toAscii:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3294   .text.calibrate:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3299   .text.calibrate:00000000 calibrate
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3548   .text.magAvailable:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3553   .text.magAvailable:00000000 magAvailable
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3595   .text.readMag1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3600   .text.readMag1:00000000 readMag1
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5823   .text.mReadBytes:00000000 mReadBytes
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3941   .text.calcMag:00000000 calcMag
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3703   .text.calibrateMag:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3708   .text.calibrateMag:00000000 calibrateMag
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3995   .text.magOffset:00000000 magOffset
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3936   .text.calcMag:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:3990   .text.magOffset:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4062   .text.accelAvailable:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4067   .text.accelAvailable:00000000 accelAvailable
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4102   .text.gyroAvailable:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4107   .text.gyroAvailable:00000000 gyroAvailable
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4143   .text.tempAvailable:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4148   .text.tempAvailable:00000000 tempAvailable
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4184   .text.readAccel:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4189   .text.readAccel:00000000 readAccel
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4255   .text.readMag:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4260   .text.readMag:00000000 readMag
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4307   .text.readTemp:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4312   .text.readTemp:00000000 readTemp
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4353   .text.readGyro:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4358   .text.readGyro:00000000 readGyro
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4424   .text.calcGyro:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4478   .text.calcAccel:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4532   .text.setGyroScale:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4537   .text.setGyroScale:00000000 setGyroScale
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4620   .text.setAccelScale:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4625   .text.setAccelScale:00000000 setAccelScale
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4721   .text.setMagScale:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4726   .text.setMagScale:00000000 setMagScale
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4822   .text.setGyroODR:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4827   .text.setGyroODR:00000000 setGyroODR
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4891   .text.setAccelODR:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4896   .text.setAccelODR:00000000 setAccelODR
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4960   .text.setMagODR:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:4965   .text.setMagODR:00000000 setMagODR
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5022   .text.configInt:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5027   .text.configInt:00000000 configInt
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5102   .text.configInactivity:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5107   .text.configInactivity:00000000 configInactivity
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5164   .text.getInactivity:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5169   .text.getInactivity:00000000 getInactivity
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5206   .text.configAccelInt:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5211   .text.configAccelInt:00000000 configAccelInt
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5257   .text.configAccelThs:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5262   .text.configAccelThs:00000000 configAccelThs
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5317   .text.getAccelIntSrc:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5322   .text.getAccelIntSrc:00000000 getAccelIntSrc
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5367   .text.configGyroInt:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5372   .text.configGyroInt:00000000 configGyroInt
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5429   .text.configGyroThs:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5434   .text.configGyroThs:00000000 configGyroThs
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5511   .text.getGyroIntSrc:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5516   .text.getGyroIntSrc:00000000 getGyroIntSrc
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5561   .text.configMagInt:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5566   .text.configMagInt:00000000 configMagInt
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5633   .text.configMagThs:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5638   .text.configMagThs:00000000 configMagThs
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5679   .text.getMagIntSrc:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5684   .text.getMagIntSrc:00000000 getMagIntSrc
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5729   .text.sleepGyro:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5734   .text.sleepGyro:00000000 sleepGyro
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5786   .text.getFIFOSamples:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5791   .text.getFIFOSamples:00000000 getFIFOSamples
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5818   .text.mReadBytes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5888   .text.myDelay:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccqgl1W8.s:5893   .text.myDelay:00000000 myDelay
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.LSM9DS1_drivers.h.9.225085f752270af24a0df342ed7d3479
                           .group:00000000 wm4.LSM9DS1_Registers.h.9.72af380d6da01de607f77d245bf32825
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ea28968cb6c53b1be9f53a4d9f42a86f
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.SYSTM001.h.64.6ecb31c49bc3e7691644fdcdfc11b5cd
                           .group:00000000 wm4.I2C001.h.97.5277d52889d6c741e048ea45ee1277b5
                           .group:00000000 wm4.I2C001_Conf.h.58.e471e519f7471a50493b6f4fe912ee0d
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.inttypes.h.14.da8ab5c14bc76feb3bf694db03b8ec46
                           .group:00000000 wm4.inttypes.h.20.54b7c434bb63171d5145327a6d429f51
                           .group:00000000 wm4.math.h.35.cc9264b0ced3bd063c5784e64e89cf51
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230

UNDEFINED SYMBOLS
addressTimer
subAddressTimer
timerHandlerI2CreadByte
makeTimer
indexI2CreadByte
removeTimer
DataReceive2
addressTimerI2CReadBytes
subAddressTimerI2CReadBytes
timerHandlerI2CreadBytes
indexI2CreadBytes
accelerationXYZ
timerHandlerI2CreadBytes1
addressTimerWrite
subAddressTimerWrite
dataWrite
timerHandlerI2CwriteByte
indexI2CwriteByte
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2iz
__aeabi_d2f
ceil
round
